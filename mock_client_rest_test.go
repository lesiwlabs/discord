// Code generated by lesiw.io/moxie. DO NOT EDIT.

package main

import (
	context "context"
	discord "github.com/disgoorg/disgo/discord"
	rest "github.com/disgoorg/disgo/rest"
	snowflake "github.com/disgoorg/snowflake/v2"
	http "net/http"
	runtime "runtime"
	sync "sync"
	time "time"
	unsafe "unsafe"
)

var _clientRest = new(sync.Map)

type _clientRestData struct {
	mutex sync.Mutex
	once sync.Once
	AddBanMocks []func(guildID snowflake.ID, userID snowflake.ID, deleteMessageDuration time.Duration, opts ...rest.RequestOpt) error
	AddBanCalls []_clientRest_AddBan_Call
	AddMemberMocks []func(guildID snowflake.ID, userID snowflake.ID, memberAdd discord.MemberAdd, opts ...rest.RequestOpt) (*discord.Member, error)
	AddMemberCalls []_clientRest_AddMember_Call
	AddMemberRoleMocks []func(guildID snowflake.ID, userID snowflake.ID, roleID snowflake.ID, opts ...rest.RequestOpt) error
	AddMemberRoleCalls []_clientRest_AddMemberRole_Call
	AddReactionMocks []func(channelID snowflake.ID, messageID snowflake.ID, emoji string, opts ...rest.RequestOpt) error
	AddReactionCalls []_clientRest_AddReaction_Call
	AddThreadMemberMocks []func(threadID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) error
	AddThreadMemberCalls []_clientRest_AddThreadMember_Call
	BeginGuildPruneMocks []func(guildID snowflake.ID, guildPrune discord.GuildPrune, opts ...rest.RequestOpt) (*discord.GuildPruneResult, error)
	BeginGuildPruneCalls []_clientRest_BeginGuildPrune_Call
	BulkBanMocks []func(guildID snowflake.ID, ban discord.BulkBan, opts ...rest.RequestOpt) (*discord.BulkBanResult, error)
	BulkBanCalls []_clientRest_BulkBan_Call
	BulkDeleteMessagesMocks []func(channelID snowflake.ID, messageIDs []snowflake.ID, opts ...rest.RequestOpt) error
	BulkDeleteMessagesCalls []_clientRest_BulkDeleteMessages_Call
	CloseMocks []func(ctx context.Context)
	CloseCalls []_clientRest_Close_Call
	ConsumeEntitlementMocks []func(applicationID snowflake.ID, entitlementID snowflake.ID, opts ...rest.RequestOpt) error
	ConsumeEntitlementCalls []_clientRest_ConsumeEntitlement_Call
	CreateApplicationEmojiMocks []func(applicationID snowflake.ID, emojiCreate discord.EmojiCreate, opts ...rest.RequestOpt) (*discord.Emoji, error)
	CreateApplicationEmojiCalls []_clientRest_CreateApplicationEmoji_Call
	CreateAutoModerationRuleMocks []func(guildID snowflake.ID, ruleCreate discord.AutoModerationRuleCreate, opts ...rest.RequestOpt) (*discord.AutoModerationRule, error)
	CreateAutoModerationRuleCalls []_clientRest_CreateAutoModerationRule_Call
	CreateDMChannelMocks []func(userID snowflake.ID, opts ...rest.RequestOpt) (*discord.DMChannel, error)
	CreateDMChannelCalls []_clientRest_CreateDMChannel_Call
	CreateEmojiMocks []func(guildID snowflake.ID, emojiCreate discord.EmojiCreate, opts ...rest.RequestOpt) (*discord.Emoji, error)
	CreateEmojiCalls []_clientRest_CreateEmoji_Call
	CreateFollowupMessageMocks []func(applicationID snowflake.ID, interactionToken string, messageCreate discord.MessageCreate, opts ...rest.RequestOpt) (*discord.Message, error)
	CreateFollowupMessageCalls []_clientRest_CreateFollowupMessage_Call
	CreateGlobalCommandMocks []func(applicationID snowflake.ID, commandCreate discord.ApplicationCommandCreate, opts ...rest.RequestOpt) (discord.ApplicationCommand, error)
	CreateGlobalCommandCalls []_clientRest_CreateGlobalCommand_Call
	CreateGuildMocks []func(guildCreate discord.GuildCreate, opts ...rest.RequestOpt) (*discord.RestGuild, error)
	CreateGuildCalls []_clientRest_CreateGuild_Call
	CreateGuildChannelMocks []func(guildID snowflake.ID, guildChannelCreate discord.GuildChannelCreate, opts ...rest.RequestOpt) (discord.GuildChannel, error)
	CreateGuildChannelCalls []_clientRest_CreateGuildChannel_Call
	CreateGuildCommandMocks []func(applicationID snowflake.ID, guildID snowflake.ID, command discord.ApplicationCommandCreate, opts ...rest.RequestOpt) (discord.ApplicationCommand, error)
	CreateGuildCommandCalls []_clientRest_CreateGuildCommand_Call
	CreateGuildFromTemplateMocks []func(templateCode string, createGuildFromTemplate discord.GuildFromTemplateCreate, opts ...rest.RequestOpt) (*discord.Guild, error)
	CreateGuildFromTemplateCalls []_clientRest_CreateGuildFromTemplate_Call
	CreateGuildScheduledEventMocks []func(guildID snowflake.ID, guildScheduledEventCreate discord.GuildScheduledEventCreate, opts ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)
	CreateGuildScheduledEventCalls []_clientRest_CreateGuildScheduledEvent_Call
	CreateGuildSoundboardSoundMocks []func(guildID snowflake.ID, soundCreate discord.SoundboardSoundCreate, opts ...rest.RequestOpt) (*discord.SoundboardSound, error)
	CreateGuildSoundboardSoundCalls []_clientRest_CreateGuildSoundboardSound_Call
	CreateGuildTemplateMocks []func(guildID snowflake.ID, guildTemplateCreate discord.GuildTemplateCreate, opts ...rest.RequestOpt) (*discord.GuildTemplate, error)
	CreateGuildTemplateCalls []_clientRest_CreateGuildTemplate_Call
	CreateInteractionResponseMocks []func(interactionID snowflake.ID, interactionToken string, interactionResponse discord.InteractionResponse, opts ...rest.RequestOpt) error
	CreateInteractionResponseCalls []_clientRest_CreateInteractionResponse_Call
	CreateInteractionResponseWithCallbackMocks []func(interactionID snowflake.ID, interactionToken string, interactionResponse discord.InteractionResponse, opts ...rest.RequestOpt) (*discord.InteractionCallbackResponse, error)
	CreateInteractionResponseWithCallbackCalls []_clientRest_CreateInteractionResponseWithCallback_Call
	CreateInviteMocks []func(channelID snowflake.ID, inviteCreate discord.InviteCreate, opts ...rest.RequestOpt) (*discord.Invite, error)
	CreateInviteCalls []_clientRest_CreateInvite_Call
	CreateMessageMocks []func(channelID snowflake.ID, messageCreate discord.MessageCreate, opts ...rest.RequestOpt) (*discord.Message, error)
	CreateMessageCalls []_clientRest_CreateMessage_Call
	CreatePostInThreadChannelMocks []func(channelID snowflake.ID, postCreateInChannel discord.ThreadChannelPostCreate, opts ...rest.RequestOpt) (post *discord.ThreadChannelPost, err error)
	CreatePostInThreadChannelCalls []_clientRest_CreatePostInThreadChannel_Call
	CreateRoleMocks []func(guildID snowflake.ID, createRole discord.RoleCreate, opts ...rest.RequestOpt) (*discord.Role, error)
	CreateRoleCalls []_clientRest_CreateRole_Call
	CreateStageInstanceMocks []func(stageInstanceCreate discord.StageInstanceCreate, opts ...rest.RequestOpt) (*discord.StageInstance, error)
	CreateStageInstanceCalls []_clientRest_CreateStageInstance_Call
	CreateStickerMocks []func(guildID snowflake.ID, createSticker discord.StickerCreate, opts ...rest.RequestOpt) (*discord.Sticker, error)
	CreateStickerCalls []_clientRest_CreateSticker_Call
	CreateTestEntitlementMocks []func(applicationID snowflake.ID, entitlementCreate discord.TestEntitlementCreate, opts ...rest.RequestOpt) (*discord.Entitlement, error)
	CreateTestEntitlementCalls []_clientRest_CreateTestEntitlement_Call
	CreateThreadMocks []func(channelID snowflake.ID, threadCreate discord.ThreadCreate, opts ...rest.RequestOpt) (thread *discord.GuildThread, err error)
	CreateThreadCalls []_clientRest_CreateThread_Call
	CreateThreadFromMessageMocks []func(channelID snowflake.ID, messageID snowflake.ID, threadCreateFromMessage discord.ThreadCreateFromMessage, opts ...rest.RequestOpt) (thread *discord.GuildThread, err error)
	CreateThreadFromMessageCalls []_clientRest_CreateThreadFromMessage_Call
	CreateWebhookMocks []func(channelID snowflake.ID, webhookCreate discord.WebhookCreate, opts ...rest.RequestOpt) (*discord.IncomingWebhook, error)
	CreateWebhookCalls []_clientRest_CreateWebhook_Call
	CreateWebhookMessageMocks []func(webhookID snowflake.ID, webhookToken string, messageCreate discord.WebhookMessageCreate, wait bool, threadID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error)
	CreateWebhookMessageCalls []_clientRest_CreateWebhookMessage_Call
	CreateWebhookMessageGitHubMocks []func(webhookID snowflake.ID, webhookToken string, messageCreate discord.Payload, wait bool, threadID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error)
	CreateWebhookMessageGitHubCalls []_clientRest_CreateWebhookMessageGitHub_Call
	CreateWebhookMessageSlackMocks []func(webhookID snowflake.ID, webhookToken string, messageCreate discord.Payload, wait bool, threadID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error)
	CreateWebhookMessageSlackCalls []_clientRest_CreateWebhookMessageSlack_Call
	CrosspostMessageMocks []func(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error)
	CrosspostMessageCalls []_clientRest_CrosspostMessage_Call
	DeleteApplicationEmojiMocks []func(applicationID snowflake.ID, emojiID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteApplicationEmojiCalls []_clientRest_DeleteApplicationEmoji_Call
	DeleteAutoModerationRuleMocks []func(guildID snowflake.ID, ruleID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteAutoModerationRuleCalls []_clientRest_DeleteAutoModerationRule_Call
	DeleteBanMocks []func(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteBanCalls []_clientRest_DeleteBan_Call
	DeleteChannelMocks []func(channelID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteChannelCalls []_clientRest_DeleteChannel_Call
	DeleteEmojiMocks []func(guildID snowflake.ID, emojiID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteEmojiCalls []_clientRest_DeleteEmoji_Call
	DeleteFollowupMessageMocks []func(applicationID snowflake.ID, interactionToken string, messageID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteFollowupMessageCalls []_clientRest_DeleteFollowupMessage_Call
	DeleteGlobalCommandMocks []func(applicationID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteGlobalCommandCalls []_clientRest_DeleteGlobalCommand_Call
	DeleteGuildMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteGuildCalls []_clientRest_DeleteGuild_Call
	DeleteGuildCommandMocks []func(applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteGuildCommandCalls []_clientRest_DeleteGuildCommand_Call
	DeleteGuildScheduledEventMocks []func(guildID snowflake.ID, guildScheduledEventID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteGuildScheduledEventCalls []_clientRest_DeleteGuildScheduledEvent_Call
	DeleteGuildSoundboardSoundMocks []func(guildID snowflake.ID, soundID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteGuildSoundboardSoundCalls []_clientRest_DeleteGuildSoundboardSound_Call
	DeleteGuildTemplateMocks []func(guildID snowflake.ID, templateCode string, opts ...rest.RequestOpt) (*discord.GuildTemplate, error)
	DeleteGuildTemplateCalls []_clientRest_DeleteGuildTemplate_Call
	DeleteIntegrationMocks []func(guildID snowflake.ID, integrationID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteIntegrationCalls []_clientRest_DeleteIntegration_Call
	DeleteInteractionResponseMocks []func(applicationID snowflake.ID, interactionToken string, opts ...rest.RequestOpt) error
	DeleteInteractionResponseCalls []_clientRest_DeleteInteractionResponse_Call
	DeleteInviteMocks []func(code string, opts ...rest.RequestOpt) (*discord.Invite, error)
	DeleteInviteCalls []_clientRest_DeleteInvite_Call
	DeleteMessageMocks []func(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteMessageCalls []_clientRest_DeleteMessage_Call
	DeletePermissionOverwriteMocks []func(channelID snowflake.ID, overwriteID snowflake.ID, opts ...rest.RequestOpt) error
	DeletePermissionOverwriteCalls []_clientRest_DeletePermissionOverwrite_Call
	DeleteRoleMocks []func(guildID snowflake.ID, roleID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteRoleCalls []_clientRest_DeleteRole_Call
	DeleteStageInstanceMocks []func(channelID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteStageInstanceCalls []_clientRest_DeleteStageInstance_Call
	DeleteStickerMocks []func(guildID snowflake.ID, stickerID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteStickerCalls []_clientRest_DeleteSticker_Call
	DeleteTestEntitlementMocks []func(applicationID snowflake.ID, entitlementID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteTestEntitlementCalls []_clientRest_DeleteTestEntitlement_Call
	DeleteWebhookMocks []func(webhookID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteWebhookCalls []_clientRest_DeleteWebhook_Call
	DeleteWebhookMessageMocks []func(webhookID snowflake.ID, webhookToken string, messageID snowflake.ID, threadID snowflake.ID, opts ...rest.RequestOpt) error
	DeleteWebhookMessageCalls []_clientRest_DeleteWebhookMessage_Call
	DeleteWebhookWithTokenMocks []func(webhookID snowflake.ID, webhookToken string, opts ...rest.RequestOpt) error
	DeleteWebhookWithTokenCalls []_clientRest_DeleteWebhookWithToken_Call
	DoMocks []func(endpoint *rest.CompiledEndpoint, rqBody any, rsBody any, opts ...rest.RequestOpt) error
	DoCalls []_clientRest_Do_Call
	ExpirePollMocks []func(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error)
	ExpirePollCalls []_clientRest_ExpirePoll_Call
	FollowMocks []func(channelID snowflake.ID, targetChannelID snowflake.ID, opts ...rest.RequestOpt) (*discord.FollowedChannel, error)
	FollowCalls []_clientRest_Follow_Call
	GetAccessTokenMocks []func(clientID snowflake.ID, clientSecret string, code string, redirectURI string, opts ...rest.RequestOpt) (*discord.AccessTokenResponse, error)
	GetAccessTokenCalls []_clientRest_GetAccessToken_Call
	GetActiveGuildThreadsMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildActiveThreads, error)
	GetActiveGuildThreadsCalls []_clientRest_GetActiveGuildThreads_Call
	GetActivityInstanceMocks []func(applicationID snowflake.ID, instanceID string, opts ...rest.RequestOpt) (*discord.ActivityInstance, error)
	GetActivityInstanceCalls []_clientRest_GetActivityInstance_Call
	GetAllWebhooksMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Webhook, error)
	GetAllWebhooksCalls []_clientRest_GetAllWebhooks_Call
	GetApplicationEmojiMocks []func(applicationID snowflake.ID, emojiID snowflake.ID, opts ...rest.RequestOpt) (*discord.Emoji, error)
	GetApplicationEmojiCalls []_clientRest_GetApplicationEmoji_Call
	GetApplicationEmojisMocks []func(applicationID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Emoji, error)
	GetApplicationEmojisCalls []_clientRest_GetApplicationEmojis_Call
	GetApplicationRoleConnectionMetadataMocks []func(applicationID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error)
	GetApplicationRoleConnectionMetadataCalls []_clientRest_GetApplicationRoleConnectionMetadata_Call
	GetAuditLogMocks []func(guildID snowflake.ID, userID snowflake.ID, actionType discord.AuditLogEvent, before snowflake.ID, after snowflake.ID, limit int, opts ...rest.RequestOpt) (*discord.AuditLog, error)
	GetAuditLogCalls []_clientRest_GetAuditLog_Call
	GetAuditLogPageMocks []func(guildID snowflake.ID, userID snowflake.ID, actionType discord.AuditLogEvent, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.AuditLogPage
	GetAuditLogPageCalls []_clientRest_GetAuditLogPage_Call
	GetAutoModerationRuleMocks []func(guildID snowflake.ID, ruleID snowflake.ID, opts ...rest.RequestOpt) (*discord.AutoModerationRule, error)
	GetAutoModerationRuleCalls []_clientRest_GetAutoModerationRule_Call
	GetAutoModerationRulesMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.AutoModerationRule, error)
	GetAutoModerationRulesCalls []_clientRest_GetAutoModerationRules_Call
	GetBanMocks []func(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) (*discord.Ban, error)
	GetBanCalls []_clientRest_GetBan_Call
	GetBansMocks []func(guildID snowflake.ID, before snowflake.ID, after snowflake.ID, limit int, opts ...rest.RequestOpt) ([]discord.Ban, error)
	GetBansCalls []_clientRest_GetBans_Call
	GetBansPageMocks []func(guildID snowflake.ID, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.Page[discord.Ban]
	GetBansPageCalls []_clientRest_GetBansPage_Call
	GetBotApplicationInfoMocks []func(opts ...rest.RequestOpt) (*discord.Application, error)
	GetBotApplicationInfoCalls []_clientRest_GetBotApplicationInfo_Call
	GetChannelMocks []func(channelID snowflake.ID, opts ...rest.RequestOpt) (discord.Channel, error)
	GetChannelCalls []_clientRest_GetChannel_Call
	GetChannelInvitesMocks []func(channelID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ExtendedInvite, error)
	GetChannelInvitesCalls []_clientRest_GetChannelInvites_Call
	GetCurrentApplicationMocks []func(opts ...rest.RequestOpt) (*discord.Application, error)
	GetCurrentApplicationCalls []_clientRest_GetCurrentApplication_Call
	GetCurrentAuthorizationInfoMocks []func(bearerToken string, opts ...rest.RequestOpt) (*discord.AuthorizationInformation, error)
	GetCurrentAuthorizationInfoCalls []_clientRest_GetCurrentAuthorizationInfo_Call
	GetCurrentMemberMocks []func(bearerToken string, guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.Member, error)
	GetCurrentMemberCalls []_clientRest_GetCurrentMember_Call
	GetCurrentUserMocks []func(bearerToken string, opts ...rest.RequestOpt) (*discord.OAuth2User, error)
	GetCurrentUserCalls []_clientRest_GetCurrentUser_Call
	GetCurrentUserApplicationRoleConnectionMocks []func(bearerToken string, applicationID snowflake.ID, opts ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error)
	GetCurrentUserApplicationRoleConnectionCalls []_clientRest_GetCurrentUserApplicationRoleConnection_Call
	GetCurrentUserConnectionsMocks []func(bearerToken string, opts ...rest.RequestOpt) ([]discord.Connection, error)
	GetCurrentUserConnectionsCalls []_clientRest_GetCurrentUserConnections_Call
	GetCurrentUserGuildsMocks []func(bearerToken string, before snowflake.ID, after snowflake.ID, limit int, withCounts bool, opts ...rest.RequestOpt) ([]discord.OAuth2Guild, error)
	GetCurrentUserGuildsCalls []_clientRest_GetCurrentUserGuilds_Call
	GetCurrentUserGuildsPageMocks []func(bearerToken string, startID snowflake.ID, limit int, withCounts bool, opts ...rest.RequestOpt) rest.Page[discord.OAuth2Guild]
	GetCurrentUserGuildsPageCalls []_clientRest_GetCurrentUserGuildsPage_Call
	GetCurrentUserVoiceStateMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.VoiceState, error)
	GetCurrentUserVoiceStateCalls []_clientRest_GetCurrentUserVoiceState_Call
	GetEmojiMocks []func(guildID snowflake.ID, emojiID snowflake.ID, opts ...rest.RequestOpt) (*discord.Emoji, error)
	GetEmojiCalls []_clientRest_GetEmoji_Call
	GetEmojisMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Emoji, error)
	GetEmojisCalls []_clientRest_GetEmojis_Call
	GetEntitlementMocks []func(applicationID snowflake.ID, entitlementID snowflake.ID, opts ...rest.RequestOpt) (*discord.Entitlement, error)
	GetEntitlementCalls []_clientRest_GetEntitlement_Call
	GetEntitlementsMocks []func(applicationID snowflake.ID, params rest.GetEntitlementsParams, opts ...rest.RequestOpt) ([]discord.Entitlement, error)
	GetEntitlementsCalls []_clientRest_GetEntitlements_Call
	GetFollowupMessageMocks []func(applicationID snowflake.ID, interactionToken string, messageID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error)
	GetFollowupMessageCalls []_clientRest_GetFollowupMessage_Call
	GetGatewayMocks []func(opts ...rest.RequestOpt) (*discord.Gateway, error)
	GetGatewayCalls []_clientRest_GetGateway_Call
	GetGatewayBotMocks []func(opts ...rest.RequestOpt) (*discord.GatewayBot, error)
	GetGatewayBotCalls []_clientRest_GetGatewayBot_Call
	GetGlobalCommandMocks []func(applicationID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) (discord.ApplicationCommand, error)
	GetGlobalCommandCalls []_clientRest_GetGlobalCommand_Call
	GetGlobalCommandsMocks []func(applicationID snowflake.ID, withLocalizations bool, opts ...rest.RequestOpt) ([]discord.ApplicationCommand, error)
	GetGlobalCommandsCalls []_clientRest_GetGlobalCommands_Call
	GetGuildMocks []func(guildID snowflake.ID, withCounts bool, opts ...rest.RequestOpt) (*discord.RestGuild, error)
	GetGuildCalls []_clientRest_GetGuild_Call
	GetGuildChannelsMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.GuildChannel, error)
	GetGuildChannelsCalls []_clientRest_GetGuildChannels_Call
	GetGuildCommandMocks []func(applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) (discord.ApplicationCommand, error)
	GetGuildCommandCalls []_clientRest_GetGuildCommand_Call
	GetGuildCommandPermissionsMocks []func(applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error)
	GetGuildCommandPermissionsCalls []_clientRest_GetGuildCommandPermissions_Call
	GetGuildCommandsMocks []func(applicationID snowflake.ID, guildID snowflake.ID, withLocalizations bool, opts ...rest.RequestOpt) ([]discord.ApplicationCommand, error)
	GetGuildCommandsCalls []_clientRest_GetGuildCommands_Call
	GetGuildCommandsPermissionsMocks []func(applicationID snowflake.ID, guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ApplicationCommandPermissions, error)
	GetGuildCommandsPermissionsCalls []_clientRest_GetGuildCommandsPermissions_Call
	GetGuildInvitesMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ExtendedInvite, error)
	GetGuildInvitesCalls []_clientRest_GetGuildInvites_Call
	GetGuildOnboardingMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildOnboarding, error)
	GetGuildOnboardingCalls []_clientRest_GetGuildOnboarding_Call
	GetGuildPreviewMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildPreview, error)
	GetGuildPreviewCalls []_clientRest_GetGuildPreview_Call
	GetGuildPruneCountMocks []func(guildID snowflake.ID, days int, includeRoles []snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildPruneResult, error)
	GetGuildPruneCountCalls []_clientRest_GetGuildPruneCount_Call
	GetGuildScheduledEventMocks []func(guildID snowflake.ID, guildScheduledEventID snowflake.ID, withUserCounts bool, opts ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)
	GetGuildScheduledEventCalls []_clientRest_GetGuildScheduledEvent_Call
	GetGuildScheduledEventUsersMocks []func(guildID snowflake.ID, guildScheduledEventID snowflake.ID, withMember bool, before snowflake.ID, after snowflake.ID, limit int, opts ...rest.RequestOpt) ([]discord.GuildScheduledEventUser, error)
	GetGuildScheduledEventUsersCalls []_clientRest_GetGuildScheduledEventUsers_Call
	GetGuildScheduledEventUsersPageMocks []func(guildID snowflake.ID, guildScheduledEventID snowflake.ID, withMember bool, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.Page[discord.GuildScheduledEventUser]
	GetGuildScheduledEventUsersPageCalls []_clientRest_GetGuildScheduledEventUsersPage_Call
	GetGuildScheduledEventsMocks []func(guildID snowflake.ID, withUserCounts bool, opts ...rest.RequestOpt) ([]discord.GuildScheduledEvent, error)
	GetGuildScheduledEventsCalls []_clientRest_GetGuildScheduledEvents_Call
	GetGuildSoundboardSoundMocks []func(guildID snowflake.ID, soundID snowflake.ID, opts ...rest.RequestOpt) (*discord.SoundboardSound, error)
	GetGuildSoundboardSoundCalls []_clientRest_GetGuildSoundboardSound_Call
	GetGuildSoundboardSoundsMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.SoundboardSound, error)
	GetGuildSoundboardSoundsCalls []_clientRest_GetGuildSoundboardSounds_Call
	GetGuildTemplateMocks []func(templateCode string, opts ...rest.RequestOpt) (*discord.GuildTemplate, error)
	GetGuildTemplateCalls []_clientRest_GetGuildTemplate_Call
	GetGuildTemplatesMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.GuildTemplate, error)
	GetGuildTemplatesCalls []_clientRest_GetGuildTemplates_Call
	GetGuildVanityURLMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.PartialInvite, error)
	GetGuildVanityURLCalls []_clientRest_GetGuildVanityURL_Call
	GetGuildVoiceRegionsMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.VoiceRegion, error)
	GetGuildVoiceRegionsCalls []_clientRest_GetGuildVoiceRegions_Call
	GetGuildWelcomeScreenMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error)
	GetGuildWelcomeScreenCalls []_clientRest_GetGuildWelcomeScreen_Call
	GetIntegrationsMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Integration, error)
	GetIntegrationsCalls []_clientRest_GetIntegrations_Call
	GetInteractionResponseMocks []func(applicationID snowflake.ID, interactionToken string, opts ...rest.RequestOpt) (*discord.Message, error)
	GetInteractionResponseCalls []_clientRest_GetInteractionResponse_Call
	GetInviteMocks []func(code string, opts ...rest.RequestOpt) (*discord.Invite, error)
	GetInviteCalls []_clientRest_GetInvite_Call
	GetJoinedPrivateArchivedThreadsMocks []func(channelID snowflake.ID, before time.Time, limit int, opts ...rest.RequestOpt) (threads *discord.GetThreads, err error)
	GetJoinedPrivateArchivedThreadsCalls []_clientRest_GetJoinedPrivateArchivedThreads_Call
	GetMemberMocks []func(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) (*discord.Member, error)
	GetMemberCalls []_clientRest_GetMember_Call
	GetMembersMocks []func(guildID snowflake.ID, limit int, after snowflake.ID, opts ...rest.RequestOpt) ([]discord.Member, error)
	GetMembersCalls []_clientRest_GetMembers_Call
	GetMessageMocks []func(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error)
	GetMessageCalls []_clientRest_GetMessage_Call
	GetMessagesMocks []func(channelID snowflake.ID, around snowflake.ID, before snowflake.ID, after snowflake.ID, limit int, opts ...rest.RequestOpt) ([]discord.Message, error)
	GetMessagesCalls []_clientRest_GetMessages_Call
	GetMessagesPageMocks []func(channelID snowflake.ID, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.Page[discord.Message]
	GetMessagesPageCalls []_clientRest_GetMessagesPage_Call
	GetNitroStickerPackMocks []func(packID snowflake.ID, opts ...rest.RequestOpt) (*discord.StickerPack, error)
	GetNitroStickerPackCalls []_clientRest_GetNitroStickerPack_Call
	GetNitroStickerPacksMocks []func(opts ...rest.RequestOpt) ([]discord.StickerPack, error)
	GetNitroStickerPacksCalls []_clientRest_GetNitroStickerPacks_Call
	GetPinnedMessagesMocks []func(channelID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Message, error)
	GetPinnedMessagesCalls []_clientRest_GetPinnedMessages_Call
	GetPollAnswerVotesMocks []func(channelID snowflake.ID, messageID snowflake.ID, answerID int, after snowflake.ID, limit int, opts ...rest.RequestOpt) ([]discord.User, error)
	GetPollAnswerVotesCalls []_clientRest_GetPollAnswerVotes_Call
	GetPollAnswerVotesPageMocks []func(channelID snowflake.ID, messageID snowflake.ID, answerID int, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.PollAnswerVotesPage
	GetPollAnswerVotesPageCalls []_clientRest_GetPollAnswerVotesPage_Call
	GetPrivateArchivedThreadsMocks []func(channelID snowflake.ID, before time.Time, limit int, opts ...rest.RequestOpt) (threads *discord.GetThreads, err error)
	GetPrivateArchivedThreadsCalls []_clientRest_GetPrivateArchivedThreads_Call
	GetPublicArchivedThreadsMocks []func(channelID snowflake.ID, before time.Time, limit int, opts ...rest.RequestOpt) (threads *discord.GetThreads, err error)
	GetPublicArchivedThreadsCalls []_clientRest_GetPublicArchivedThreads_Call
	GetReactionsMocks []func(channelID snowflake.ID, messageID snowflake.ID, emoji string, reactionType discord.MessageReactionType, after int, limit int, opts ...rest.RequestOpt) ([]discord.User, error)
	GetReactionsCalls []_clientRest_GetReactions_Call
	GetRoleMocks []func(guildID snowflake.ID, roleID snowflake.ID, opts ...rest.RequestOpt) (*discord.Role, error)
	GetRoleCalls []_clientRest_GetRole_Call
	GetRolesMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Role, error)
	GetRolesCalls []_clientRest_GetRoles_Call
	GetSKUSubscriptionMocks []func(skuID snowflake.ID, subscriptionID snowflake.ID, opts ...rest.RequestOpt) (*discord.Subscription, error)
	GetSKUSubscriptionCalls []_clientRest_GetSKUSubscription_Call
	GetSKUSubscriptionsMocks []func(skuID snowflake.ID, before snowflake.ID, after snowflake.ID, limit int, userID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Subscription, error)
	GetSKUSubscriptionsCalls []_clientRest_GetSKUSubscriptions_Call
	GetSKUSubscriptionsPageMocks []func(skuID snowflake.ID, userID snowflake.ID, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.Page[discord.Subscription]
	GetSKUSubscriptionsPageCalls []_clientRest_GetSKUSubscriptionsPage_Call
	GetSKUsMocks []func(applicationID snowflake.ID, opts ...rest.RequestOpt) ([]discord.SKU, error)
	GetSKUsCalls []_clientRest_GetSKUs_Call
	GetSoundboardDefaultSoundsMocks []func(opts ...rest.RequestOpt) ([]discord.SoundboardSound, error)
	GetSoundboardDefaultSoundsCalls []_clientRest_GetSoundboardDefaultSounds_Call
	GetStageInstanceMocks []func(channelID snowflake.ID, opts ...rest.RequestOpt) (*discord.StageInstance, error)
	GetStageInstanceCalls []_clientRest_GetStageInstance_Call
	GetStickerMocks []func(stickerID snowflake.ID, opts ...rest.RequestOpt) (*discord.Sticker, error)
	GetStickerCalls []_clientRest_GetSticker_Call
	GetStickersMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Sticker, error)
	GetStickersCalls []_clientRest_GetStickers_Call
	GetThreadMemberMocks []func(threadID snowflake.ID, userID snowflake.ID, withMember bool, opts ...rest.RequestOpt) (threadMember *discord.ThreadMember, err error)
	GetThreadMemberCalls []_clientRest_GetThreadMember_Call
	GetThreadMembersMocks []func(threadID snowflake.ID, opts ...rest.RequestOpt) (threadMembers []discord.ThreadMember, err error)
	GetThreadMembersCalls []_clientRest_GetThreadMembers_Call
	GetThreadMembersPageMocks []func(threadID snowflake.ID, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.ThreadMemberPage
	GetThreadMembersPageCalls []_clientRest_GetThreadMembersPage_Call
	GetUserMocks []func(userID snowflake.ID, opts ...rest.RequestOpt) (*discord.User, error)
	GetUserCalls []_clientRest_GetUser_Call
	GetUserVoiceStateMocks []func(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) (*discord.VoiceState, error)
	GetUserVoiceStateCalls []_clientRest_GetUserVoiceState_Call
	GetVoiceRegionsMocks []func(opts ...rest.RequestOpt) ([]discord.VoiceRegion, error)
	GetVoiceRegionsCalls []_clientRest_GetVoiceRegions_Call
	GetWebhookMocks []func(webhookID snowflake.ID, opts ...rest.RequestOpt) (discord.Webhook, error)
	GetWebhookCalls []_clientRest_GetWebhook_Call
	GetWebhookWithTokenMocks []func(webhookID snowflake.ID, webhookToken string, opts ...rest.RequestOpt) (discord.Webhook, error)
	GetWebhookWithTokenCalls []_clientRest_GetWebhookWithToken_Call
	GetWebhooksMocks []func(channelID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Webhook, error)
	GetWebhooksCalls []_clientRest_GetWebhooks_Call
	HTTPClientMocks []func() *http.Client
	HTTPClientCalls []_clientRest_HTTPClient_Call
	JoinThreadMocks []func(threadID snowflake.ID, opts ...rest.RequestOpt) error
	JoinThreadCalls []_clientRest_JoinThread_Call
	LeaveGuildMocks []func(guildID snowflake.ID, opts ...rest.RequestOpt) error
	LeaveGuildCalls []_clientRest_LeaveGuild_Call
	LeaveThreadMocks []func(threadID snowflake.ID, opts ...rest.RequestOpt) error
	LeaveThreadCalls []_clientRest_LeaveThread_Call
	PinMessageMocks []func(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) error
	PinMessageCalls []_clientRest_PinMessage_Call
	RateLimiterMocks []func() rest.RateLimiter
	RateLimiterCalls []_clientRest_RateLimiter_Call
	RefreshAccessTokenMocks []func(clientID snowflake.ID, clientSecret string, refreshToken string, opts ...rest.RequestOpt) (*discord.AccessTokenResponse, error)
	RefreshAccessTokenCalls []_clientRest_RefreshAccessToken_Call
	RemoveAllReactionsMocks []func(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) error
	RemoveAllReactionsCalls []_clientRest_RemoveAllReactions_Call
	RemoveAllReactionsForEmojiMocks []func(channelID snowflake.ID, messageID snowflake.ID, emoji string, opts ...rest.RequestOpt) error
	RemoveAllReactionsForEmojiCalls []_clientRest_RemoveAllReactionsForEmoji_Call
	RemoveMemberMocks []func(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) error
	RemoveMemberCalls []_clientRest_RemoveMember_Call
	RemoveMemberRoleMocks []func(guildID snowflake.ID, userID snowflake.ID, roleID snowflake.ID, opts ...rest.RequestOpt) error
	RemoveMemberRoleCalls []_clientRest_RemoveMemberRole_Call
	RemoveOwnReactionMocks []func(channelID snowflake.ID, messageID snowflake.ID, emoji string, opts ...rest.RequestOpt) error
	RemoveOwnReactionCalls []_clientRest_RemoveOwnReaction_Call
	RemoveThreadMemberMocks []func(threadID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) error
	RemoveThreadMemberCalls []_clientRest_RemoveThreadMember_Call
	RemoveUserReactionMocks []func(channelID snowflake.ID, messageID snowflake.ID, emoji string, userID snowflake.ID, opts ...rest.RequestOpt) error
	RemoveUserReactionCalls []_clientRest_RemoveUserReaction_Call
	SearchMembersMocks []func(guildID snowflake.ID, query string, limit int, opts ...rest.RequestOpt) ([]discord.Member, error)
	SearchMembersCalls []_clientRest_SearchMembers_Call
	SendSoundboardSoundMocks []func(channelID snowflake.ID, sendSound discord.SendSoundboardSound, opts ...rest.RequestOpt) error
	SendSoundboardSoundCalls []_clientRest_SendSoundboardSound_Call
	SendTypingMocks []func(channelID snowflake.ID, opts ...rest.RequestOpt) error
	SendTypingCalls []_clientRest_SendTyping_Call
	SetGlobalCommandsMocks []func(applicationID snowflake.ID, commandCreates []discord.ApplicationCommandCreate, opts ...rest.RequestOpt) ([]discord.ApplicationCommand, error)
	SetGlobalCommandsCalls []_clientRest_SetGlobalCommands_Call
	SetGuildCommandPermissionsMocks []func(bearerToken string, applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, commandPermissions []discord.ApplicationCommandPermission, opts ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error)
	SetGuildCommandPermissionsCalls []_clientRest_SetGuildCommandPermissions_Call
	SetGuildCommandsMocks []func(applicationID snowflake.ID, guildID snowflake.ID, commands []discord.ApplicationCommandCreate, opts ...rest.RequestOpt) ([]discord.ApplicationCommand, error)
	SetGuildCommandsCalls []_clientRest_SetGuildCommands_Call
	SyncGuildTemplateMocks []func(guildID snowflake.ID, templateCode string, opts ...rest.RequestOpt) (*discord.GuildTemplate, error)
	SyncGuildTemplateCalls []_clientRest_SyncGuildTemplate_Call
	UnpinMessageMocks []func(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) error
	UnpinMessageCalls []_clientRest_UnpinMessage_Call
	UpdateApplicationEmojiMocks []func(applicationID snowflake.ID, emojiID snowflake.ID, emojiUpdate discord.EmojiUpdate, opts ...rest.RequestOpt) (*discord.Emoji, error)
	UpdateApplicationEmojiCalls []_clientRest_UpdateApplicationEmoji_Call
	UpdateApplicationRoleConnectionMetadataMocks []func(applicationID snowflake.ID, newRecords []discord.ApplicationRoleConnectionMetadata, opts ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error)
	UpdateApplicationRoleConnectionMetadataCalls []_clientRest_UpdateApplicationRoleConnectionMetadata_Call
	UpdateAutoModerationRuleMocks []func(guildID snowflake.ID, ruleID snowflake.ID, ruleUpdate discord.AutoModerationRuleUpdate, opts ...rest.RequestOpt) (*discord.AutoModerationRule, error)
	UpdateAutoModerationRuleCalls []_clientRest_UpdateAutoModerationRule_Call
	UpdateChannelMocks []func(channelID snowflake.ID, channelUpdate discord.ChannelUpdate, opts ...rest.RequestOpt) (discord.Channel, error)
	UpdateChannelCalls []_clientRest_UpdateChannel_Call
	UpdateChannelPositionsMocks []func(guildID snowflake.ID, guildChannelPositionUpdates []discord.GuildChannelPositionUpdate, opts ...rest.RequestOpt) error
	UpdateChannelPositionsCalls []_clientRest_UpdateChannelPositions_Call
	UpdateCurrentApplicationMocks []func(applicationUpdate discord.ApplicationUpdate, opts ...rest.RequestOpt) (*discord.Application, error)
	UpdateCurrentApplicationCalls []_clientRest_UpdateCurrentApplication_Call
	UpdateCurrentMemberMocks []func(guildID snowflake.ID, nick string, opts ...rest.RequestOpt) (*string, error)
	UpdateCurrentMemberCalls []_clientRest_UpdateCurrentMember_Call
	UpdateCurrentUserMocks []func(userUpdate discord.UserUpdate, opts ...rest.RequestOpt) (*discord.OAuth2User, error)
	UpdateCurrentUserCalls []_clientRest_UpdateCurrentUser_Call
	UpdateCurrentUserApplicationRoleConnectionMocks []func(bearerToken string, applicationID snowflake.ID, connectionUpdate discord.ApplicationRoleConnectionUpdate, opts ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error)
	UpdateCurrentUserApplicationRoleConnectionCalls []_clientRest_UpdateCurrentUserApplicationRoleConnection_Call
	UpdateCurrentUserVoiceStateMocks []func(guildID snowflake.ID, currentUserVoiceStateUpdate discord.CurrentUserVoiceStateUpdate, opts ...rest.RequestOpt) error
	UpdateCurrentUserVoiceStateCalls []_clientRest_UpdateCurrentUserVoiceState_Call
	UpdateEmojiMocks []func(guildID snowflake.ID, emojiID snowflake.ID, emojiUpdate discord.EmojiUpdate, opts ...rest.RequestOpt) (*discord.Emoji, error)
	UpdateEmojiCalls []_clientRest_UpdateEmoji_Call
	UpdateFollowupMessageMocks []func(applicationID snowflake.ID, interactionToken string, messageID snowflake.ID, messageUpdate discord.MessageUpdate, opts ...rest.RequestOpt) (*discord.Message, error)
	UpdateFollowupMessageCalls []_clientRest_UpdateFollowupMessage_Call
	UpdateGlobalCommandMocks []func(applicationID snowflake.ID, commandID snowflake.ID, commandUpdate discord.ApplicationCommandUpdate, opts ...rest.RequestOpt) (discord.ApplicationCommand, error)
	UpdateGlobalCommandCalls []_clientRest_UpdateGlobalCommand_Call
	UpdateGuildMocks []func(guildID snowflake.ID, guildUpdate discord.GuildUpdate, opts ...rest.RequestOpt) (*discord.RestGuild, error)
	UpdateGuildCalls []_clientRest_UpdateGuild_Call
	UpdateGuildCommandMocks []func(applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, command discord.ApplicationCommandUpdate, opts ...rest.RequestOpt) (discord.ApplicationCommand, error)
	UpdateGuildCommandCalls []_clientRest_UpdateGuildCommand_Call
	UpdateGuildIncidentActionsMocks []func(guildID snowflake.ID, actionsUpdate discord.GuildIncidentActionsUpdate, opts ...rest.RequestOpt) (*discord.GuildIncidentsData, error)
	UpdateGuildIncidentActionsCalls []_clientRest_UpdateGuildIncidentActions_Call
	UpdateGuildOnboardingMocks []func(guildID snowflake.ID, onboardingUpdate discord.GuildOnboardingUpdate, opts ...rest.RequestOpt) (*discord.GuildOnboarding, error)
	UpdateGuildOnboardingCalls []_clientRest_UpdateGuildOnboarding_Call
	UpdateGuildScheduledEventMocks []func(guildID snowflake.ID, guildScheduledEventID snowflake.ID, guildScheduledEventUpdate discord.GuildScheduledEventUpdate, opts ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)
	UpdateGuildScheduledEventCalls []_clientRest_UpdateGuildScheduledEvent_Call
	UpdateGuildSoundboardSoundMocks []func(guildID snowflake.ID, soundID snowflake.ID, soundUpdate discord.SoundboardSoundUpdate, opts ...rest.RequestOpt) (*discord.SoundboardSound, error)
	UpdateGuildSoundboardSoundCalls []_clientRest_UpdateGuildSoundboardSound_Call
	UpdateGuildTemplateMocks []func(guildID snowflake.ID, templateCode string, guildTemplateUpdate discord.GuildTemplateUpdate, opts ...rest.RequestOpt) (*discord.GuildTemplate, error)
	UpdateGuildTemplateCalls []_clientRest_UpdateGuildTemplate_Call
	UpdateGuildWelcomeScreenMocks []func(guildID snowflake.ID, screenUpdate discord.GuildWelcomeScreenUpdate, opts ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error)
	UpdateGuildWelcomeScreenCalls []_clientRest_UpdateGuildWelcomeScreen_Call
	UpdateInteractionResponseMocks []func(applicationID snowflake.ID, interactionToken string, messageUpdate discord.MessageUpdate, opts ...rest.RequestOpt) (*discord.Message, error)
	UpdateInteractionResponseCalls []_clientRest_UpdateInteractionResponse_Call
	UpdateMemberMocks []func(guildID snowflake.ID, userID snowflake.ID, memberUpdate discord.MemberUpdate, opts ...rest.RequestOpt) (*discord.Member, error)
	UpdateMemberCalls []_clientRest_UpdateMember_Call
	UpdateMessageMocks []func(channelID snowflake.ID, messageID snowflake.ID, messageUpdate discord.MessageUpdate, opts ...rest.RequestOpt) (*discord.Message, error)
	UpdateMessageCalls []_clientRest_UpdateMessage_Call
	UpdatePermissionOverwriteMocks []func(channelID snowflake.ID, overwriteID snowflake.ID, permissionOverwrite discord.PermissionOverwriteUpdate, opts ...rest.RequestOpt) error
	UpdatePermissionOverwriteCalls []_clientRest_UpdatePermissionOverwrite_Call
	UpdateRoleMocks []func(guildID snowflake.ID, roleID snowflake.ID, roleUpdate discord.RoleUpdate, opts ...rest.RequestOpt) (*discord.Role, error)
	UpdateRoleCalls []_clientRest_UpdateRole_Call
	UpdateRolePositionsMocks []func(guildID snowflake.ID, rolePositionUpdates []discord.RolePositionUpdate, opts ...rest.RequestOpt) ([]discord.Role, error)
	UpdateRolePositionsCalls []_clientRest_UpdateRolePositions_Call
	UpdateStageInstanceMocks []func(channelID snowflake.ID, stageInstanceUpdate discord.StageInstanceUpdate, opts ...rest.RequestOpt) (*discord.StageInstance, error)
	UpdateStageInstanceCalls []_clientRest_UpdateStageInstance_Call
	UpdateStickerMocks []func(guildID snowflake.ID, stickerID snowflake.ID, stickerUpdate discord.StickerUpdate, opts ...rest.RequestOpt) (*discord.Sticker, error)
	UpdateStickerCalls []_clientRest_UpdateSticker_Call
	UpdateUserVoiceStateMocks []func(guildID snowflake.ID, userID snowflake.ID, userVoiceStateUpdate discord.UserVoiceStateUpdate, opts ...rest.RequestOpt) error
	UpdateUserVoiceStateCalls []_clientRest_UpdateUserVoiceState_Call
	UpdateWebhookMocks []func(webhookID snowflake.ID, webhookUpdate discord.WebhookUpdate, opts ...rest.RequestOpt) (discord.Webhook, error)
	UpdateWebhookCalls []_clientRest_UpdateWebhook_Call
	UpdateWebhookMessageMocks []func(webhookID snowflake.ID, webhookToken string, messageID snowflake.ID, messageUpdate discord.WebhookMessageUpdate, threadID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error)
	UpdateWebhookMessageCalls []_clientRest_UpdateWebhookMessage_Call
	UpdateWebhookWithTokenMocks []func(webhookID snowflake.ID, webhookToken string, webhookUpdate discord.WebhookUpdateWithToken, opts ...rest.RequestOpt) (discord.Webhook, error)
	UpdateWebhookWithTokenCalls []_clientRest_UpdateWebhookWithToken_Call
}

func _clientRestPtrData(t *clientRest) *_clientRestData {
	ptr := uintptr(unsafe.Pointer(t))
	val, loaded := _clientRest.LoadOrStore(ptr, new(_clientRestData))
	if !loaded {
		val.(*_clientRestData).once.Do(func() { runtime.SetFinalizer(t, func(_ *clientRest) { _clientRest.Delete(ptr) })})
	}
	return val.(*_clientRestData)
}

type _clientRest_AddBan_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	DeleteMessageDuration time.Duration
	Opts []rest.RequestOpt
}
type _clientRest_AddMember_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	MemberAdd discord.MemberAdd
	Opts []rest.RequestOpt
}
type _clientRest_AddMemberRole_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	RoleID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_AddReaction_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Emoji string
	Opts []rest.RequestOpt
}
type _clientRest_AddThreadMember_Call struct {
	ThreadID snowflake.ID
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_BeginGuildPrune_Call struct {
	GuildID snowflake.ID
	GuildPrune discord.GuildPrune
	Opts []rest.RequestOpt
}
type _clientRest_BulkBan_Call struct {
	GuildID snowflake.ID
	Ban discord.BulkBan
	Opts []rest.RequestOpt
}
type _clientRest_BulkDeleteMessages_Call struct {
	ChannelID snowflake.ID
	MessageIDs []snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_Close_Call struct {
	Ctx context.Context
}
type _clientRest_ConsumeEntitlement_Call struct {
	ApplicationID snowflake.ID
	EntitlementID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_CreateApplicationEmoji_Call struct {
	ApplicationID snowflake.ID
	EmojiCreate discord.EmojiCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateAutoModerationRule_Call struct {
	GuildID snowflake.ID
	RuleCreate discord.AutoModerationRuleCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateDMChannel_Call struct {
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_CreateEmoji_Call struct {
	GuildID snowflake.ID
	EmojiCreate discord.EmojiCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateFollowupMessage_Call struct {
	ApplicationID snowflake.ID
	InteractionToken string
	MessageCreate discord.MessageCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateGlobalCommand_Call struct {
	ApplicationID snowflake.ID
	CommandCreate discord.ApplicationCommandCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateGuild_Call struct {
	GuildCreate discord.GuildCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateGuildChannel_Call struct {
	GuildID snowflake.ID
	GuildChannelCreate discord.GuildChannelCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateGuildCommand_Call struct {
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	Command discord.ApplicationCommandCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateGuildFromTemplate_Call struct {
	TemplateCode string
	CreateGuildFromTemplate discord.GuildFromTemplateCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateGuildScheduledEvent_Call struct {
	GuildID snowflake.ID
	GuildScheduledEventCreate discord.GuildScheduledEventCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateGuildSoundboardSound_Call struct {
	GuildID snowflake.ID
	SoundCreate discord.SoundboardSoundCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateGuildTemplate_Call struct {
	GuildID snowflake.ID
	GuildTemplateCreate discord.GuildTemplateCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateInteractionResponse_Call struct {
	InteractionID snowflake.ID
	InteractionToken string
	InteractionResponse discord.InteractionResponse
	Opts []rest.RequestOpt
}
type _clientRest_CreateInteractionResponseWithCallback_Call struct {
	InteractionID snowflake.ID
	InteractionToken string
	InteractionResponse discord.InteractionResponse
	Opts []rest.RequestOpt
}
type _clientRest_CreateInvite_Call struct {
	ChannelID snowflake.ID
	InviteCreate discord.InviteCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateMessage_Call struct {
	ChannelID snowflake.ID
	MessageCreate discord.MessageCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreatePostInThreadChannel_Call struct {
	ChannelID snowflake.ID
	PostCreateInChannel discord.ThreadChannelPostCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateRole_Call struct {
	GuildID snowflake.ID
	CreateRole discord.RoleCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateStageInstance_Call struct {
	StageInstanceCreate discord.StageInstanceCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateSticker_Call struct {
	GuildID snowflake.ID
	CreateSticker discord.StickerCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateTestEntitlement_Call struct {
	ApplicationID snowflake.ID
	EntitlementCreate discord.TestEntitlementCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateThread_Call struct {
	ChannelID snowflake.ID
	ThreadCreate discord.ThreadCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateThreadFromMessage_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	ThreadCreateFromMessage discord.ThreadCreateFromMessage
	Opts []rest.RequestOpt
}
type _clientRest_CreateWebhook_Call struct {
	ChannelID snowflake.ID
	WebhookCreate discord.WebhookCreate
	Opts []rest.RequestOpt
}
type _clientRest_CreateWebhookMessage_Call struct {
	WebhookID snowflake.ID
	WebhookToken string
	MessageCreate discord.WebhookMessageCreate
	Wait bool
	ThreadID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_CreateWebhookMessageGitHub_Call struct {
	WebhookID snowflake.ID
	WebhookToken string
	MessageCreate discord.Payload
	Wait bool
	ThreadID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_CreateWebhookMessageSlack_Call struct {
	WebhookID snowflake.ID
	WebhookToken string
	MessageCreate discord.Payload
	Wait bool
	ThreadID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_CrosspostMessage_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteApplicationEmoji_Call struct {
	ApplicationID snowflake.ID
	EmojiID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteAutoModerationRule_Call struct {
	GuildID snowflake.ID
	RuleID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteBan_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteChannel_Call struct {
	ChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteEmoji_Call struct {
	GuildID snowflake.ID
	EmojiID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteFollowupMessage_Call struct {
	ApplicationID snowflake.ID
	InteractionToken string
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteGlobalCommand_Call struct {
	ApplicationID snowflake.ID
	CommandID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteGuild_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteGuildCommand_Call struct {
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	CommandID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteGuildScheduledEvent_Call struct {
	GuildID snowflake.ID
	GuildScheduledEventID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteGuildSoundboardSound_Call struct {
	GuildID snowflake.ID
	SoundID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteGuildTemplate_Call struct {
	GuildID snowflake.ID
	TemplateCode string
	Opts []rest.RequestOpt
}
type _clientRest_DeleteIntegration_Call struct {
	GuildID snowflake.ID
	IntegrationID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteInteractionResponse_Call struct {
	ApplicationID snowflake.ID
	InteractionToken string
	Opts []rest.RequestOpt
}
type _clientRest_DeleteInvite_Call struct {
	Code string
	Opts []rest.RequestOpt
}
type _clientRest_DeleteMessage_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeletePermissionOverwrite_Call struct {
	ChannelID snowflake.ID
	OverwriteID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteRole_Call struct {
	GuildID snowflake.ID
	RoleID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteStageInstance_Call struct {
	ChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteSticker_Call struct {
	GuildID snowflake.ID
	StickerID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteTestEntitlement_Call struct {
	ApplicationID snowflake.ID
	EntitlementID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteWebhook_Call struct {
	WebhookID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteWebhookMessage_Call struct {
	WebhookID snowflake.ID
	WebhookToken string
	MessageID snowflake.ID
	ThreadID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_DeleteWebhookWithToken_Call struct {
	WebhookID snowflake.ID
	WebhookToken string
	Opts []rest.RequestOpt
}
type _clientRest_Do_Call struct {
	Endpoint *rest.CompiledEndpoint
	RqBody any
	RsBody any
	Opts []rest.RequestOpt
}
type _clientRest_ExpirePoll_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_Follow_Call struct {
	ChannelID snowflake.ID
	TargetChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetAccessToken_Call struct {
	ClientID snowflake.ID
	ClientSecret string
	Code string
	RedirectURI string
	Opts []rest.RequestOpt
}
type _clientRest_GetActiveGuildThreads_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetActivityInstance_Call struct {
	ApplicationID snowflake.ID
	InstanceID string
	Opts []rest.RequestOpt
}
type _clientRest_GetAllWebhooks_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetApplicationEmoji_Call struct {
	ApplicationID snowflake.ID
	EmojiID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetApplicationEmojis_Call struct {
	ApplicationID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetApplicationRoleConnectionMetadata_Call struct {
	ApplicationID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetAuditLog_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	ActionType discord.AuditLogEvent
	Before snowflake.ID
	After snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetAuditLogPage_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	ActionType discord.AuditLogEvent
	StartID snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetAutoModerationRule_Call struct {
	GuildID snowflake.ID
	RuleID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetAutoModerationRules_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetBan_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetBans_Call struct {
	GuildID snowflake.ID
	Before snowflake.ID
	After snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetBansPage_Call struct {
	GuildID snowflake.ID
	StartID snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetBotApplicationInfo_Call struct {
	Opts []rest.RequestOpt
}
type _clientRest_GetChannel_Call struct {
	ChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetChannelInvites_Call struct {
	ChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentApplication_Call struct {
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentAuthorizationInfo_Call struct {
	BearerToken string
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentMember_Call struct {
	BearerToken string
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentUser_Call struct {
	BearerToken string
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentUserApplicationRoleConnection_Call struct {
	BearerToken string
	ApplicationID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentUserConnections_Call struct {
	BearerToken string
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentUserGuilds_Call struct {
	BearerToken string
	Before snowflake.ID
	After snowflake.ID
	Limit int
	WithCounts bool
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentUserGuildsPage_Call struct {
	BearerToken string
	StartID snowflake.ID
	Limit int
	WithCounts bool
	Opts []rest.RequestOpt
}
type _clientRest_GetCurrentUserVoiceState_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetEmoji_Call struct {
	GuildID snowflake.ID
	EmojiID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetEmojis_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetEntitlement_Call struct {
	ApplicationID snowflake.ID
	EntitlementID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetEntitlements_Call struct {
	ApplicationID snowflake.ID
	Params rest.GetEntitlementsParams
	Opts []rest.RequestOpt
}
type _clientRest_GetFollowupMessage_Call struct {
	ApplicationID snowflake.ID
	InteractionToken string
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGateway_Call struct {
	Opts []rest.RequestOpt
}
type _clientRest_GetGatewayBot_Call struct {
	Opts []rest.RequestOpt
}
type _clientRest_GetGlobalCommand_Call struct {
	ApplicationID snowflake.ID
	CommandID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGlobalCommands_Call struct {
	ApplicationID snowflake.ID
	WithLocalizations bool
	Opts []rest.RequestOpt
}
type _clientRest_GetGuild_Call struct {
	GuildID snowflake.ID
	WithCounts bool
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildChannels_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildCommand_Call struct {
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	CommandID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildCommandPermissions_Call struct {
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	CommandID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildCommands_Call struct {
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	WithLocalizations bool
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildCommandsPermissions_Call struct {
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildInvites_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildOnboarding_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildPreview_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildPruneCount_Call struct {
	GuildID snowflake.ID
	Days int
	IncludeRoles []snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildScheduledEvent_Call struct {
	GuildID snowflake.ID
	GuildScheduledEventID snowflake.ID
	WithUserCounts bool
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildScheduledEventUsers_Call struct {
	GuildID snowflake.ID
	GuildScheduledEventID snowflake.ID
	WithMember bool
	Before snowflake.ID
	After snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildScheduledEventUsersPage_Call struct {
	GuildID snowflake.ID
	GuildScheduledEventID snowflake.ID
	WithMember bool
	StartID snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildScheduledEvents_Call struct {
	GuildID snowflake.ID
	WithUserCounts bool
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildSoundboardSound_Call struct {
	GuildID snowflake.ID
	SoundID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildSoundboardSounds_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildTemplate_Call struct {
	TemplateCode string
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildTemplates_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildVanityURL_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildVoiceRegions_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetGuildWelcomeScreen_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetIntegrations_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetInteractionResponse_Call struct {
	ApplicationID snowflake.ID
	InteractionToken string
	Opts []rest.RequestOpt
}
type _clientRest_GetInvite_Call struct {
	Code string
	Opts []rest.RequestOpt
}
type _clientRest_GetJoinedPrivateArchivedThreads_Call struct {
	ChannelID snowflake.ID
	Before time.Time
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetMember_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetMembers_Call struct {
	GuildID snowflake.ID
	Limit int
	After snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetMessage_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetMessages_Call struct {
	ChannelID snowflake.ID
	Around snowflake.ID
	Before snowflake.ID
	After snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetMessagesPage_Call struct {
	ChannelID snowflake.ID
	StartID snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetNitroStickerPack_Call struct {
	PackID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetNitroStickerPacks_Call struct {
	Opts []rest.RequestOpt
}
type _clientRest_GetPinnedMessages_Call struct {
	ChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetPollAnswerVotes_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	AnswerID int
	After snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetPollAnswerVotesPage_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	AnswerID int
	StartID snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetPrivateArchivedThreads_Call struct {
	ChannelID snowflake.ID
	Before time.Time
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetPublicArchivedThreads_Call struct {
	ChannelID snowflake.ID
	Before time.Time
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetReactions_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Emoji string
	ReactionType discord.MessageReactionType
	After int
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetRole_Call struct {
	GuildID snowflake.ID
	RoleID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetRoles_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetSKUSubscription_Call struct {
	SkuID snowflake.ID
	SubscriptionID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetSKUSubscriptions_Call struct {
	SkuID snowflake.ID
	Before snowflake.ID
	After snowflake.ID
	Limit int
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetSKUSubscriptionsPage_Call struct {
	SkuID snowflake.ID
	UserID snowflake.ID
	StartID snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetSKUs_Call struct {
	ApplicationID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetSoundboardDefaultSounds_Call struct {
	Opts []rest.RequestOpt
}
type _clientRest_GetStageInstance_Call struct {
	ChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetSticker_Call struct {
	StickerID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetStickers_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetThreadMember_Call struct {
	ThreadID snowflake.ID
	UserID snowflake.ID
	WithMember bool
	Opts []rest.RequestOpt
}
type _clientRest_GetThreadMembers_Call struct {
	ThreadID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetThreadMembersPage_Call struct {
	ThreadID snowflake.ID
	StartID snowflake.ID
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_GetUser_Call struct {
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetUserVoiceState_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetVoiceRegions_Call struct {
	Opts []rest.RequestOpt
}
type _clientRest_GetWebhook_Call struct {
	WebhookID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_GetWebhookWithToken_Call struct {
	WebhookID snowflake.ID
	WebhookToken string
	Opts []rest.RequestOpt
}
type _clientRest_GetWebhooks_Call struct {
	ChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_HTTPClient_Call struct {}
type _clientRest_JoinThread_Call struct {
	ThreadID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_LeaveGuild_Call struct {
	GuildID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_LeaveThread_Call struct {
	ThreadID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_PinMessage_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_RateLimiter_Call struct {}
type _clientRest_RefreshAccessToken_Call struct {
	ClientID snowflake.ID
	ClientSecret string
	RefreshToken string
	Opts []rest.RequestOpt
}
type _clientRest_RemoveAllReactions_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_RemoveAllReactionsForEmoji_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Emoji string
	Opts []rest.RequestOpt
}
type _clientRest_RemoveMember_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_RemoveMemberRole_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	RoleID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_RemoveOwnReaction_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Emoji string
	Opts []rest.RequestOpt
}
type _clientRest_RemoveThreadMember_Call struct {
	ThreadID snowflake.ID
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_RemoveUserReaction_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Emoji string
	UserID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_SearchMembers_Call struct {
	GuildID snowflake.ID
	Query string
	Limit int
	Opts []rest.RequestOpt
}
type _clientRest_SendSoundboardSound_Call struct {
	ChannelID snowflake.ID
	SendSound discord.SendSoundboardSound
	Opts []rest.RequestOpt
}
type _clientRest_SendTyping_Call struct {
	ChannelID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_SetGlobalCommands_Call struct {
	ApplicationID snowflake.ID
	CommandCreates []discord.ApplicationCommandCreate
	Opts []rest.RequestOpt
}
type _clientRest_SetGuildCommandPermissions_Call struct {
	BearerToken string
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	CommandID snowflake.ID
	CommandPermissions []discord.ApplicationCommandPermission
	Opts []rest.RequestOpt
}
type _clientRest_SetGuildCommands_Call struct {
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	Commands []discord.ApplicationCommandCreate
	Opts []rest.RequestOpt
}
type _clientRest_SyncGuildTemplate_Call struct {
	GuildID snowflake.ID
	TemplateCode string
	Opts []rest.RequestOpt
}
type _clientRest_UnpinMessage_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_UpdateApplicationEmoji_Call struct {
	ApplicationID snowflake.ID
	EmojiID snowflake.ID
	EmojiUpdate discord.EmojiUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateApplicationRoleConnectionMetadata_Call struct {
	ApplicationID snowflake.ID
	NewRecords []discord.ApplicationRoleConnectionMetadata
	Opts []rest.RequestOpt
}
type _clientRest_UpdateAutoModerationRule_Call struct {
	GuildID snowflake.ID
	RuleID snowflake.ID
	RuleUpdate discord.AutoModerationRuleUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateChannel_Call struct {
	ChannelID snowflake.ID
	ChannelUpdate discord.ChannelUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateChannelPositions_Call struct {
	GuildID snowflake.ID
	GuildChannelPositionUpdates []discord.GuildChannelPositionUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateCurrentApplication_Call struct {
	ApplicationUpdate discord.ApplicationUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateCurrentMember_Call struct {
	GuildID snowflake.ID
	Nick string
	Opts []rest.RequestOpt
}
type _clientRest_UpdateCurrentUser_Call struct {
	UserUpdate discord.UserUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateCurrentUserApplicationRoleConnection_Call struct {
	BearerToken string
	ApplicationID snowflake.ID
	ConnectionUpdate discord.ApplicationRoleConnectionUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateCurrentUserVoiceState_Call struct {
	GuildID snowflake.ID
	CurrentUserVoiceStateUpdate discord.CurrentUserVoiceStateUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateEmoji_Call struct {
	GuildID snowflake.ID
	EmojiID snowflake.ID
	EmojiUpdate discord.EmojiUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateFollowupMessage_Call struct {
	ApplicationID snowflake.ID
	InteractionToken string
	MessageID snowflake.ID
	MessageUpdate discord.MessageUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGlobalCommand_Call struct {
	ApplicationID snowflake.ID
	CommandID snowflake.ID
	CommandUpdate discord.ApplicationCommandUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGuild_Call struct {
	GuildID snowflake.ID
	GuildUpdate discord.GuildUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGuildCommand_Call struct {
	ApplicationID snowflake.ID
	GuildID snowflake.ID
	CommandID snowflake.ID
	Command discord.ApplicationCommandUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGuildIncidentActions_Call struct {
	GuildID snowflake.ID
	ActionsUpdate discord.GuildIncidentActionsUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGuildOnboarding_Call struct {
	GuildID snowflake.ID
	OnboardingUpdate discord.GuildOnboardingUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGuildScheduledEvent_Call struct {
	GuildID snowflake.ID
	GuildScheduledEventID snowflake.ID
	GuildScheduledEventUpdate discord.GuildScheduledEventUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGuildSoundboardSound_Call struct {
	GuildID snowflake.ID
	SoundID snowflake.ID
	SoundUpdate discord.SoundboardSoundUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGuildTemplate_Call struct {
	GuildID snowflake.ID
	TemplateCode string
	GuildTemplateUpdate discord.GuildTemplateUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateGuildWelcomeScreen_Call struct {
	GuildID snowflake.ID
	ScreenUpdate discord.GuildWelcomeScreenUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateInteractionResponse_Call struct {
	ApplicationID snowflake.ID
	InteractionToken string
	MessageUpdate discord.MessageUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateMember_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	MemberUpdate discord.MemberUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateMessage_Call struct {
	ChannelID snowflake.ID
	MessageID snowflake.ID
	MessageUpdate discord.MessageUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdatePermissionOverwrite_Call struct {
	ChannelID snowflake.ID
	OverwriteID snowflake.ID
	PermissionOverwrite discord.PermissionOverwriteUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateRole_Call struct {
	GuildID snowflake.ID
	RoleID snowflake.ID
	RoleUpdate discord.RoleUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateRolePositions_Call struct {
	GuildID snowflake.ID
	RolePositionUpdates []discord.RolePositionUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateStageInstance_Call struct {
	ChannelID snowflake.ID
	StageInstanceUpdate discord.StageInstanceUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateSticker_Call struct {
	GuildID snowflake.ID
	StickerID snowflake.ID
	StickerUpdate discord.StickerUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateUserVoiceState_Call struct {
	GuildID snowflake.ID
	UserID snowflake.ID
	UserVoiceStateUpdate discord.UserVoiceStateUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateWebhook_Call struct {
	WebhookID snowflake.ID
	WebhookUpdate discord.WebhookUpdate
	Opts []rest.RequestOpt
}
type _clientRest_UpdateWebhookMessage_Call struct {
	WebhookID snowflake.ID
	WebhookToken string
	MessageID snowflake.ID
	MessageUpdate discord.WebhookMessageUpdate
	ThreadID snowflake.ID
	Opts []rest.RequestOpt
}
type _clientRest_UpdateWebhookWithToken_Call struct {
	WebhookID snowflake.ID
	WebhookToken string
	WebhookUpdate discord.WebhookUpdateWithToken
	Opts []rest.RequestOpt
}

func (_recv *clientRest) AddBan(guildID snowflake.ID, userID snowflake.ID, deleteMessageDuration time.Duration, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.AddBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.AddBanCalls = append(_dat.AddBanCalls, _clientRest_AddBan_Call{guildID, userID, deleteMessageDuration, opts})
	var _fn func(snowflake.ID, snowflake.ID, time.Duration, ...rest.RequestOpt) (error)
	if len(_dat.AddBanMocks) > 0 {
		_fn = _dat.AddBanMocks[0]
		if len(_dat.AddBanMocks) > 1 {
			_dat.AddBanMocks = _dat.AddBanMocks[1:]
		}
	} else { _fn = _recv.Rest.AddBan }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, deleteMessageDuration, opts...)
}

func (_recv *clientRest) _AddBan_Do(fn func(snowflake.ID, snowflake.ID, time.Duration, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.AddBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.AddBanMocks = []func(snowflake.ID, snowflake.ID, time.Duration, ...rest.RequestOpt) (error){}
	} else if len(_dat.AddBanMocks) < 2 {
		_dat.AddBanMocks = []func(snowflake.ID, snowflake.ID, time.Duration, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.AddBanMocks = _dat.AddBanMocks[:len(_dat.AddBanMocks)-1]
		_dat.AddBanMocks = append(_dat.AddBanMocks, fn)
		_dat.AddBanMocks = append(_dat.AddBanMocks, fn)
	}
}

func (_recv *clientRest) _AddBan_Stub() {
	_recv._AddBan_Do(func(snowflake.ID, snowflake.ID, time.Duration, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _AddBan_Return(r0 error) {
	_recv._AddBan_Do(func(snowflake.ID, snowflake.ID, time.Duration, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _AddBan_Calls() []_clientRest_AddBan_Call {
	if _recv == nil {
		panic("clientRest.AddBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.AddBanCalls
}

func (_recv *clientRest) AddMember(guildID snowflake.ID, userID snowflake.ID, memberAdd discord.MemberAdd, opts ...rest.RequestOpt) (*discord.Member, error) {
	if _recv == nil {
		panic("clientRest.AddMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.AddMemberCalls = append(_dat.AddMemberCalls, _clientRest_AddMember_Call{guildID, userID, memberAdd, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.MemberAdd, ...rest.RequestOpt) (*discord.Member, error)
	if len(_dat.AddMemberMocks) > 0 {
		_fn = _dat.AddMemberMocks[0]
		if len(_dat.AddMemberMocks) > 1 {
			_dat.AddMemberMocks = _dat.AddMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.AddMember }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, memberAdd, opts...)
}

func (_recv *clientRest) _AddMember_Do(fn func(snowflake.ID, snowflake.ID, discord.MemberAdd, ...rest.RequestOpt) (*discord.Member, error)) {
	if _recv == nil {
		panic("clientRest.AddMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.AddMemberMocks = []func(snowflake.ID, snowflake.ID, discord.MemberAdd, ...rest.RequestOpt) (*discord.Member, error){}
	} else if len(_dat.AddMemberMocks) < 2 {
		_dat.AddMemberMocks = []func(snowflake.ID, snowflake.ID, discord.MemberAdd, ...rest.RequestOpt) (*discord.Member, error){fn, fn}
	} else {
		_dat.AddMemberMocks = _dat.AddMemberMocks[:len(_dat.AddMemberMocks)-1]
		_dat.AddMemberMocks = append(_dat.AddMemberMocks, fn)
		_dat.AddMemberMocks = append(_dat.AddMemberMocks, fn)
	}
}

func (_recv *clientRest) _AddMember_Stub() {
	_recv._AddMember_Do(func(snowflake.ID, snowflake.ID, discord.MemberAdd, ...rest.RequestOpt) (r0 *discord.Member, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _AddMember_Return(r0 *discord.Member, r1 error) {
	_recv._AddMember_Do(func(snowflake.ID, snowflake.ID, discord.MemberAdd, ...rest.RequestOpt) (*discord.Member, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _AddMember_Calls() []_clientRest_AddMember_Call {
	if _recv == nil {
		panic("clientRest.AddMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.AddMemberCalls
}

func (_recv *clientRest) AddMemberRole(guildID snowflake.ID, userID snowflake.ID, roleID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.AddMemberRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.AddMemberRoleCalls = append(_dat.AddMemberRoleCalls, _clientRest_AddMemberRole_Call{guildID, userID, roleID, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.AddMemberRoleMocks) > 0 {
		_fn = _dat.AddMemberRoleMocks[0]
		if len(_dat.AddMemberRoleMocks) > 1 {
			_dat.AddMemberRoleMocks = _dat.AddMemberRoleMocks[1:]
		}
	} else { _fn = _recv.Rest.AddMemberRole }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, roleID, opts...)
}

func (_recv *clientRest) _AddMemberRole_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.AddMemberRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.AddMemberRoleMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.AddMemberRoleMocks) < 2 {
		_dat.AddMemberRoleMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.AddMemberRoleMocks = _dat.AddMemberRoleMocks[:len(_dat.AddMemberRoleMocks)-1]
		_dat.AddMemberRoleMocks = append(_dat.AddMemberRoleMocks, fn)
		_dat.AddMemberRoleMocks = append(_dat.AddMemberRoleMocks, fn)
	}
}

func (_recv *clientRest) _AddMemberRole_Stub() {
	_recv._AddMemberRole_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _AddMemberRole_Return(r0 error) {
	_recv._AddMemberRole_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _AddMemberRole_Calls() []_clientRest_AddMemberRole_Call {
	if _recv == nil {
		panic("clientRest.AddMemberRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.AddMemberRoleCalls
}

func (_recv *clientRest) AddReaction(channelID snowflake.ID, messageID snowflake.ID, emoji string, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.AddReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.AddReactionCalls = append(_dat.AddReactionCalls, _clientRest_AddReaction_Call{channelID, messageID, emoji, opts})
	var _fn func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error)
	if len(_dat.AddReactionMocks) > 0 {
		_fn = _dat.AddReactionMocks[0]
		if len(_dat.AddReactionMocks) > 1 {
			_dat.AddReactionMocks = _dat.AddReactionMocks[1:]
		}
	} else { _fn = _recv.Rest.AddReaction }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, emoji, opts...)
}

func (_recv *clientRest) _AddReaction_Do(fn func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.AddReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.AddReactionMocks = []func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error){}
	} else if len(_dat.AddReactionMocks) < 2 {
		_dat.AddReactionMocks = []func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.AddReactionMocks = _dat.AddReactionMocks[:len(_dat.AddReactionMocks)-1]
		_dat.AddReactionMocks = append(_dat.AddReactionMocks, fn)
		_dat.AddReactionMocks = append(_dat.AddReactionMocks, fn)
	}
}

func (_recv *clientRest) _AddReaction_Stub() {
	_recv._AddReaction_Do(func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _AddReaction_Return(r0 error) {
	_recv._AddReaction_Do(func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _AddReaction_Calls() []_clientRest_AddReaction_Call {
	if _recv == nil {
		panic("clientRest.AddReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.AddReactionCalls
}

func (_recv *clientRest) AddThreadMember(threadID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.AddThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.AddThreadMemberCalls = append(_dat.AddThreadMemberCalls, _clientRest_AddThreadMember_Call{threadID, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.AddThreadMemberMocks) > 0 {
		_fn = _dat.AddThreadMemberMocks[0]
		if len(_dat.AddThreadMemberMocks) > 1 {
			_dat.AddThreadMemberMocks = _dat.AddThreadMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.AddThreadMember }
	_dat.mutex.Unlock()
	return _fn(threadID, userID, opts...)
}

func (_recv *clientRest) _AddThreadMember_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.AddThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.AddThreadMemberMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.AddThreadMemberMocks) < 2 {
		_dat.AddThreadMemberMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.AddThreadMemberMocks = _dat.AddThreadMemberMocks[:len(_dat.AddThreadMemberMocks)-1]
		_dat.AddThreadMemberMocks = append(_dat.AddThreadMemberMocks, fn)
		_dat.AddThreadMemberMocks = append(_dat.AddThreadMemberMocks, fn)
	}
}

func (_recv *clientRest) _AddThreadMember_Stub() {
	_recv._AddThreadMember_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _AddThreadMember_Return(r0 error) {
	_recv._AddThreadMember_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _AddThreadMember_Calls() []_clientRest_AddThreadMember_Call {
	if _recv == nil {
		panic("clientRest.AddThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.AddThreadMemberCalls
}

func (_recv *clientRest) BeginGuildPrune(guildID snowflake.ID, guildPrune discord.GuildPrune, opts ...rest.RequestOpt) (*discord.GuildPruneResult, error) {
	if _recv == nil {
		panic("clientRest.BeginGuildPrune: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.BeginGuildPruneCalls = append(_dat.BeginGuildPruneCalls, _clientRest_BeginGuildPrune_Call{guildID, guildPrune, opts})
	var _fn func(snowflake.ID, discord.GuildPrune, ...rest.RequestOpt) (*discord.GuildPruneResult, error)
	if len(_dat.BeginGuildPruneMocks) > 0 {
		_fn = _dat.BeginGuildPruneMocks[0]
		if len(_dat.BeginGuildPruneMocks) > 1 {
			_dat.BeginGuildPruneMocks = _dat.BeginGuildPruneMocks[1:]
		}
	} else { _fn = _recv.Rest.BeginGuildPrune }
	_dat.mutex.Unlock()
	return _fn(guildID, guildPrune, opts...)
}

func (_recv *clientRest) _BeginGuildPrune_Do(fn func(snowflake.ID, discord.GuildPrune, ...rest.RequestOpt) (*discord.GuildPruneResult, error)) {
	if _recv == nil {
		panic("clientRest.BeginGuildPrune: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.BeginGuildPruneMocks = []func(snowflake.ID, discord.GuildPrune, ...rest.RequestOpt) (*discord.GuildPruneResult, error){}
	} else if len(_dat.BeginGuildPruneMocks) < 2 {
		_dat.BeginGuildPruneMocks = []func(snowflake.ID, discord.GuildPrune, ...rest.RequestOpt) (*discord.GuildPruneResult, error){fn, fn}
	} else {
		_dat.BeginGuildPruneMocks = _dat.BeginGuildPruneMocks[:len(_dat.BeginGuildPruneMocks)-1]
		_dat.BeginGuildPruneMocks = append(_dat.BeginGuildPruneMocks, fn)
		_dat.BeginGuildPruneMocks = append(_dat.BeginGuildPruneMocks, fn)
	}
}

func (_recv *clientRest) _BeginGuildPrune_Stub() {
	_recv._BeginGuildPrune_Do(func(snowflake.ID, discord.GuildPrune, ...rest.RequestOpt) (r0 *discord.GuildPruneResult, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _BeginGuildPrune_Return(r0 *discord.GuildPruneResult, r1 error) {
	_recv._BeginGuildPrune_Do(func(snowflake.ID, discord.GuildPrune, ...rest.RequestOpt) (*discord.GuildPruneResult, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _BeginGuildPrune_Calls() []_clientRest_BeginGuildPrune_Call {
	if _recv == nil {
		panic("clientRest.BeginGuildPrune: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.BeginGuildPruneCalls
}

func (_recv *clientRest) BulkBan(guildID snowflake.ID, ban discord.BulkBan, opts ...rest.RequestOpt) (*discord.BulkBanResult, error) {
	if _recv == nil {
		panic("clientRest.BulkBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.BulkBanCalls = append(_dat.BulkBanCalls, _clientRest_BulkBan_Call{guildID, ban, opts})
	var _fn func(snowflake.ID, discord.BulkBan, ...rest.RequestOpt) (*discord.BulkBanResult, error)
	if len(_dat.BulkBanMocks) > 0 {
		_fn = _dat.BulkBanMocks[0]
		if len(_dat.BulkBanMocks) > 1 {
			_dat.BulkBanMocks = _dat.BulkBanMocks[1:]
		}
	} else { _fn = _recv.Rest.BulkBan }
	_dat.mutex.Unlock()
	return _fn(guildID, ban, opts...)
}

func (_recv *clientRest) _BulkBan_Do(fn func(snowflake.ID, discord.BulkBan, ...rest.RequestOpt) (*discord.BulkBanResult, error)) {
	if _recv == nil {
		panic("clientRest.BulkBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.BulkBanMocks = []func(snowflake.ID, discord.BulkBan, ...rest.RequestOpt) (*discord.BulkBanResult, error){}
	} else if len(_dat.BulkBanMocks) < 2 {
		_dat.BulkBanMocks = []func(snowflake.ID, discord.BulkBan, ...rest.RequestOpt) (*discord.BulkBanResult, error){fn, fn}
	} else {
		_dat.BulkBanMocks = _dat.BulkBanMocks[:len(_dat.BulkBanMocks)-1]
		_dat.BulkBanMocks = append(_dat.BulkBanMocks, fn)
		_dat.BulkBanMocks = append(_dat.BulkBanMocks, fn)
	}
}

func (_recv *clientRest) _BulkBan_Stub() {
	_recv._BulkBan_Do(func(snowflake.ID, discord.BulkBan, ...rest.RequestOpt) (r0 *discord.BulkBanResult, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _BulkBan_Return(r0 *discord.BulkBanResult, r1 error) {
	_recv._BulkBan_Do(func(snowflake.ID, discord.BulkBan, ...rest.RequestOpt) (*discord.BulkBanResult, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _BulkBan_Calls() []_clientRest_BulkBan_Call {
	if _recv == nil {
		panic("clientRest.BulkBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.BulkBanCalls
}

func (_recv *clientRest) BulkDeleteMessages(channelID snowflake.ID, messageIDs []snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.BulkDeleteMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.BulkDeleteMessagesCalls = append(_dat.BulkDeleteMessagesCalls, _clientRest_BulkDeleteMessages_Call{channelID, messageIDs, opts})
	var _fn func(snowflake.ID, []snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.BulkDeleteMessagesMocks) > 0 {
		_fn = _dat.BulkDeleteMessagesMocks[0]
		if len(_dat.BulkDeleteMessagesMocks) > 1 {
			_dat.BulkDeleteMessagesMocks = _dat.BulkDeleteMessagesMocks[1:]
		}
	} else { _fn = _recv.Rest.BulkDeleteMessages }
	_dat.mutex.Unlock()
	return _fn(channelID, messageIDs, opts...)
}

func (_recv *clientRest) _BulkDeleteMessages_Do(fn func(snowflake.ID, []snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.BulkDeleteMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.BulkDeleteMessagesMocks = []func(snowflake.ID, []snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.BulkDeleteMessagesMocks) < 2 {
		_dat.BulkDeleteMessagesMocks = []func(snowflake.ID, []snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.BulkDeleteMessagesMocks = _dat.BulkDeleteMessagesMocks[:len(_dat.BulkDeleteMessagesMocks)-1]
		_dat.BulkDeleteMessagesMocks = append(_dat.BulkDeleteMessagesMocks, fn)
		_dat.BulkDeleteMessagesMocks = append(_dat.BulkDeleteMessagesMocks, fn)
	}
}

func (_recv *clientRest) _BulkDeleteMessages_Stub() {
	_recv._BulkDeleteMessages_Do(func(snowflake.ID, []snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _BulkDeleteMessages_Return(r0 error) {
	_recv._BulkDeleteMessages_Do(func(snowflake.ID, []snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _BulkDeleteMessages_Calls() []_clientRest_BulkDeleteMessages_Call {
	if _recv == nil {
		panic("clientRest.BulkDeleteMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.BulkDeleteMessagesCalls
}

func (_recv *clientRest) Close(ctx context.Context) {
	if _recv == nil {
		panic("clientRest.Close: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CloseCalls = append(_dat.CloseCalls, _clientRest_Close_Call{ctx})
	var _fn func(context.Context) ()
	if len(_dat.CloseMocks) > 0 {
		_fn = _dat.CloseMocks[0]
		if len(_dat.CloseMocks) > 1 {
			_dat.CloseMocks = _dat.CloseMocks[1:]
		}
	} else { _fn = _recv.Rest.Close }
	_dat.mutex.Unlock()
	_fn(ctx)
}

func (_recv *clientRest) _Close_Do(fn func(context.Context) ()) {
	if _recv == nil {
		panic("clientRest.Close: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CloseMocks = []func(context.Context) (){}
	} else if len(_dat.CloseMocks) < 2 {
		_dat.CloseMocks = []func(context.Context) (){fn, fn}
	} else {
		_dat.CloseMocks = _dat.CloseMocks[:len(_dat.CloseMocks)-1]
		_dat.CloseMocks = append(_dat.CloseMocks, fn)
		_dat.CloseMocks = append(_dat.CloseMocks, fn)
	}
}

func (_recv *clientRest) _Close_Stub() {
	_recv._Close_Do(func(context.Context) () {
		return 
	})
}

func (_recv *clientRest) _Close_Return() {
	_recv._Close_Do(func(context.Context) () {
		return 
	})
}

func (_recv *clientRest) _Close_Calls() []_clientRest_Close_Call {
	if _recv == nil {
		panic("clientRest.Close: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CloseCalls
}

func (_recv *clientRest) ConsumeEntitlement(applicationID snowflake.ID, entitlementID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.ConsumeEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.ConsumeEntitlementCalls = append(_dat.ConsumeEntitlementCalls, _clientRest_ConsumeEntitlement_Call{applicationID, entitlementID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.ConsumeEntitlementMocks) > 0 {
		_fn = _dat.ConsumeEntitlementMocks[0]
		if len(_dat.ConsumeEntitlementMocks) > 1 {
			_dat.ConsumeEntitlementMocks = _dat.ConsumeEntitlementMocks[1:]
		}
	} else { _fn = _recv.Rest.ConsumeEntitlement }
	_dat.mutex.Unlock()
	return _fn(applicationID, entitlementID, opts...)
}

func (_recv *clientRest) _ConsumeEntitlement_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.ConsumeEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.ConsumeEntitlementMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.ConsumeEntitlementMocks) < 2 {
		_dat.ConsumeEntitlementMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.ConsumeEntitlementMocks = _dat.ConsumeEntitlementMocks[:len(_dat.ConsumeEntitlementMocks)-1]
		_dat.ConsumeEntitlementMocks = append(_dat.ConsumeEntitlementMocks, fn)
		_dat.ConsumeEntitlementMocks = append(_dat.ConsumeEntitlementMocks, fn)
	}
}

func (_recv *clientRest) _ConsumeEntitlement_Stub() {
	_recv._ConsumeEntitlement_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _ConsumeEntitlement_Return(r0 error) {
	_recv._ConsumeEntitlement_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _ConsumeEntitlement_Calls() []_clientRest_ConsumeEntitlement_Call {
	if _recv == nil {
		panic("clientRest.ConsumeEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.ConsumeEntitlementCalls
}

func (_recv *clientRest) CreateApplicationEmoji(applicationID snowflake.ID, emojiCreate discord.EmojiCreate, opts ...rest.RequestOpt) (*discord.Emoji, error) {
	if _recv == nil {
		panic("clientRest.CreateApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateApplicationEmojiCalls = append(_dat.CreateApplicationEmojiCalls, _clientRest_CreateApplicationEmoji_Call{applicationID, emojiCreate, opts})
	var _fn func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error)
	if len(_dat.CreateApplicationEmojiMocks) > 0 {
		_fn = _dat.CreateApplicationEmojiMocks[0]
		if len(_dat.CreateApplicationEmojiMocks) > 1 {
			_dat.CreateApplicationEmojiMocks = _dat.CreateApplicationEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateApplicationEmoji }
	_dat.mutex.Unlock()
	return _fn(applicationID, emojiCreate, opts...)
}

func (_recv *clientRest) _CreateApplicationEmoji_Do(fn func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error)) {
	if _recv == nil {
		panic("clientRest.CreateApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateApplicationEmojiMocks = []func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error){}
	} else if len(_dat.CreateApplicationEmojiMocks) < 2 {
		_dat.CreateApplicationEmojiMocks = []func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error){fn, fn}
	} else {
		_dat.CreateApplicationEmojiMocks = _dat.CreateApplicationEmojiMocks[:len(_dat.CreateApplicationEmojiMocks)-1]
		_dat.CreateApplicationEmojiMocks = append(_dat.CreateApplicationEmojiMocks, fn)
		_dat.CreateApplicationEmojiMocks = append(_dat.CreateApplicationEmojiMocks, fn)
	}
}

func (_recv *clientRest) _CreateApplicationEmoji_Stub() {
	_recv._CreateApplicationEmoji_Do(func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (r0 *discord.Emoji, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateApplicationEmoji_Return(r0 *discord.Emoji, r1 error) {
	_recv._CreateApplicationEmoji_Do(func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateApplicationEmoji_Calls() []_clientRest_CreateApplicationEmoji_Call {
	if _recv == nil {
		panic("clientRest.CreateApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateApplicationEmojiCalls
}

func (_recv *clientRest) CreateAutoModerationRule(guildID snowflake.ID, ruleCreate discord.AutoModerationRuleCreate, opts ...rest.RequestOpt) (*discord.AutoModerationRule, error) {
	if _recv == nil {
		panic("clientRest.CreateAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateAutoModerationRuleCalls = append(_dat.CreateAutoModerationRuleCalls, _clientRest_CreateAutoModerationRule_Call{guildID, ruleCreate, opts})
	var _fn func(snowflake.ID, discord.AutoModerationRuleCreate, ...rest.RequestOpt) (*discord.AutoModerationRule, error)
	if len(_dat.CreateAutoModerationRuleMocks) > 0 {
		_fn = _dat.CreateAutoModerationRuleMocks[0]
		if len(_dat.CreateAutoModerationRuleMocks) > 1 {
			_dat.CreateAutoModerationRuleMocks = _dat.CreateAutoModerationRuleMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateAutoModerationRule }
	_dat.mutex.Unlock()
	return _fn(guildID, ruleCreate, opts...)
}

func (_recv *clientRest) _CreateAutoModerationRule_Do(fn func(snowflake.ID, discord.AutoModerationRuleCreate, ...rest.RequestOpt) (*discord.AutoModerationRule, error)) {
	if _recv == nil {
		panic("clientRest.CreateAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateAutoModerationRuleMocks = []func(snowflake.ID, discord.AutoModerationRuleCreate, ...rest.RequestOpt) (*discord.AutoModerationRule, error){}
	} else if len(_dat.CreateAutoModerationRuleMocks) < 2 {
		_dat.CreateAutoModerationRuleMocks = []func(snowflake.ID, discord.AutoModerationRuleCreate, ...rest.RequestOpt) (*discord.AutoModerationRule, error){fn, fn}
	} else {
		_dat.CreateAutoModerationRuleMocks = _dat.CreateAutoModerationRuleMocks[:len(_dat.CreateAutoModerationRuleMocks)-1]
		_dat.CreateAutoModerationRuleMocks = append(_dat.CreateAutoModerationRuleMocks, fn)
		_dat.CreateAutoModerationRuleMocks = append(_dat.CreateAutoModerationRuleMocks, fn)
	}
}

func (_recv *clientRest) _CreateAutoModerationRule_Stub() {
	_recv._CreateAutoModerationRule_Do(func(snowflake.ID, discord.AutoModerationRuleCreate, ...rest.RequestOpt) (r0 *discord.AutoModerationRule, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateAutoModerationRule_Return(r0 *discord.AutoModerationRule, r1 error) {
	_recv._CreateAutoModerationRule_Do(func(snowflake.ID, discord.AutoModerationRuleCreate, ...rest.RequestOpt) (*discord.AutoModerationRule, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateAutoModerationRule_Calls() []_clientRest_CreateAutoModerationRule_Call {
	if _recv == nil {
		panic("clientRest.CreateAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateAutoModerationRuleCalls
}

func (_recv *clientRest) CreateDMChannel(userID snowflake.ID, opts ...rest.RequestOpt) (*discord.DMChannel, error) {
	if _recv == nil {
		panic("clientRest.CreateDMChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateDMChannelCalls = append(_dat.CreateDMChannelCalls, _clientRest_CreateDMChannel_Call{userID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.DMChannel, error)
	if len(_dat.CreateDMChannelMocks) > 0 {
		_fn = _dat.CreateDMChannelMocks[0]
		if len(_dat.CreateDMChannelMocks) > 1 {
			_dat.CreateDMChannelMocks = _dat.CreateDMChannelMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateDMChannel }
	_dat.mutex.Unlock()
	return _fn(userID, opts...)
}

func (_recv *clientRest) _CreateDMChannel_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.DMChannel, error)) {
	if _recv == nil {
		panic("clientRest.CreateDMChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateDMChannelMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.DMChannel, error){}
	} else if len(_dat.CreateDMChannelMocks) < 2 {
		_dat.CreateDMChannelMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.DMChannel, error){fn, fn}
	} else {
		_dat.CreateDMChannelMocks = _dat.CreateDMChannelMocks[:len(_dat.CreateDMChannelMocks)-1]
		_dat.CreateDMChannelMocks = append(_dat.CreateDMChannelMocks, fn)
		_dat.CreateDMChannelMocks = append(_dat.CreateDMChannelMocks, fn)
	}
}

func (_recv *clientRest) _CreateDMChannel_Stub() {
	_recv._CreateDMChannel_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.DMChannel, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateDMChannel_Return(r0 *discord.DMChannel, r1 error) {
	_recv._CreateDMChannel_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.DMChannel, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateDMChannel_Calls() []_clientRest_CreateDMChannel_Call {
	if _recv == nil {
		panic("clientRest.CreateDMChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateDMChannelCalls
}

func (_recv *clientRest) CreateEmoji(guildID snowflake.ID, emojiCreate discord.EmojiCreate, opts ...rest.RequestOpt) (*discord.Emoji, error) {
	if _recv == nil {
		panic("clientRest.CreateEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateEmojiCalls = append(_dat.CreateEmojiCalls, _clientRest_CreateEmoji_Call{guildID, emojiCreate, opts})
	var _fn func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error)
	if len(_dat.CreateEmojiMocks) > 0 {
		_fn = _dat.CreateEmojiMocks[0]
		if len(_dat.CreateEmojiMocks) > 1 {
			_dat.CreateEmojiMocks = _dat.CreateEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateEmoji }
	_dat.mutex.Unlock()
	return _fn(guildID, emojiCreate, opts...)
}

func (_recv *clientRest) _CreateEmoji_Do(fn func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error)) {
	if _recv == nil {
		panic("clientRest.CreateEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateEmojiMocks = []func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error){}
	} else if len(_dat.CreateEmojiMocks) < 2 {
		_dat.CreateEmojiMocks = []func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error){fn, fn}
	} else {
		_dat.CreateEmojiMocks = _dat.CreateEmojiMocks[:len(_dat.CreateEmojiMocks)-1]
		_dat.CreateEmojiMocks = append(_dat.CreateEmojiMocks, fn)
		_dat.CreateEmojiMocks = append(_dat.CreateEmojiMocks, fn)
	}
}

func (_recv *clientRest) _CreateEmoji_Stub() {
	_recv._CreateEmoji_Do(func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (r0 *discord.Emoji, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateEmoji_Return(r0 *discord.Emoji, r1 error) {
	_recv._CreateEmoji_Do(func(snowflake.ID, discord.EmojiCreate, ...rest.RequestOpt) (*discord.Emoji, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateEmoji_Calls() []_clientRest_CreateEmoji_Call {
	if _recv == nil {
		panic("clientRest.CreateEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateEmojiCalls
}

func (_recv *clientRest) CreateFollowupMessage(applicationID snowflake.ID, interactionToken string, messageCreate discord.MessageCreate, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.CreateFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateFollowupMessageCalls = append(_dat.CreateFollowupMessageCalls, _clientRest_CreateFollowupMessage_Call{applicationID, interactionToken, messageCreate, opts})
	var _fn func(snowflake.ID, string, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.CreateFollowupMessageMocks) > 0 {
		_fn = _dat.CreateFollowupMessageMocks[0]
		if len(_dat.CreateFollowupMessageMocks) > 1 {
			_dat.CreateFollowupMessageMocks = _dat.CreateFollowupMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateFollowupMessage }
	_dat.mutex.Unlock()
	return _fn(applicationID, interactionToken, messageCreate, opts...)
}

func (_recv *clientRest) _CreateFollowupMessage_Do(fn func(snowflake.ID, string, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.CreateFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateFollowupMessageMocks = []func(snowflake.ID, string, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.CreateFollowupMessageMocks) < 2 {
		_dat.CreateFollowupMessageMocks = []func(snowflake.ID, string, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.CreateFollowupMessageMocks = _dat.CreateFollowupMessageMocks[:len(_dat.CreateFollowupMessageMocks)-1]
		_dat.CreateFollowupMessageMocks = append(_dat.CreateFollowupMessageMocks, fn)
		_dat.CreateFollowupMessageMocks = append(_dat.CreateFollowupMessageMocks, fn)
	}
}

func (_recv *clientRest) _CreateFollowupMessage_Stub() {
	_recv._CreateFollowupMessage_Do(func(snowflake.ID, string, discord.MessageCreate, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateFollowupMessage_Return(r0 *discord.Message, r1 error) {
	_recv._CreateFollowupMessage_Do(func(snowflake.ID, string, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateFollowupMessage_Calls() []_clientRest_CreateFollowupMessage_Call {
	if _recv == nil {
		panic("clientRest.CreateFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateFollowupMessageCalls
}

func (_recv *clientRest) CreateGlobalCommand(applicationID snowflake.ID, commandCreate discord.ApplicationCommandCreate, opts ...rest.RequestOpt) (discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.CreateGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateGlobalCommandCalls = append(_dat.CreateGlobalCommandCalls, _clientRest_CreateGlobalCommand_Call{applicationID, commandCreate, opts})
	var _fn func(snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error)
	if len(_dat.CreateGlobalCommandMocks) > 0 {
		_fn = _dat.CreateGlobalCommandMocks[0]
		if len(_dat.CreateGlobalCommandMocks) > 1 {
			_dat.CreateGlobalCommandMocks = _dat.CreateGlobalCommandMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateGlobalCommand }
	_dat.mutex.Unlock()
	return _fn(applicationID, commandCreate, opts...)
}

func (_recv *clientRest) _CreateGlobalCommand_Do(fn func(snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.CreateGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateGlobalCommandMocks = []func(snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error){}
	} else if len(_dat.CreateGlobalCommandMocks) < 2 {
		_dat.CreateGlobalCommandMocks = []func(snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.CreateGlobalCommandMocks = _dat.CreateGlobalCommandMocks[:len(_dat.CreateGlobalCommandMocks)-1]
		_dat.CreateGlobalCommandMocks = append(_dat.CreateGlobalCommandMocks, fn)
		_dat.CreateGlobalCommandMocks = append(_dat.CreateGlobalCommandMocks, fn)
	}
}

func (_recv *clientRest) _CreateGlobalCommand_Stub() {
	_recv._CreateGlobalCommand_Do(func(snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (r0 discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGlobalCommand_Return(r0 discord.ApplicationCommand, r1 error) {
	_recv._CreateGlobalCommand_Do(func(snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGlobalCommand_Calls() []_clientRest_CreateGlobalCommand_Call {
	if _recv == nil {
		panic("clientRest.CreateGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateGlobalCommandCalls
}

func (_recv *clientRest) CreateGuild(guildCreate discord.GuildCreate, opts ...rest.RequestOpt) (*discord.RestGuild, error) {
	if _recv == nil {
		panic("clientRest.CreateGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateGuildCalls = append(_dat.CreateGuildCalls, _clientRest_CreateGuild_Call{guildCreate, opts})
	var _fn func(discord.GuildCreate, ...rest.RequestOpt) (*discord.RestGuild, error)
	if len(_dat.CreateGuildMocks) > 0 {
		_fn = _dat.CreateGuildMocks[0]
		if len(_dat.CreateGuildMocks) > 1 {
			_dat.CreateGuildMocks = _dat.CreateGuildMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateGuild }
	_dat.mutex.Unlock()
	return _fn(guildCreate, opts...)
}

func (_recv *clientRest) _CreateGuild_Do(fn func(discord.GuildCreate, ...rest.RequestOpt) (*discord.RestGuild, error)) {
	if _recv == nil {
		panic("clientRest.CreateGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateGuildMocks = []func(discord.GuildCreate, ...rest.RequestOpt) (*discord.RestGuild, error){}
	} else if len(_dat.CreateGuildMocks) < 2 {
		_dat.CreateGuildMocks = []func(discord.GuildCreate, ...rest.RequestOpt) (*discord.RestGuild, error){fn, fn}
	} else {
		_dat.CreateGuildMocks = _dat.CreateGuildMocks[:len(_dat.CreateGuildMocks)-1]
		_dat.CreateGuildMocks = append(_dat.CreateGuildMocks, fn)
		_dat.CreateGuildMocks = append(_dat.CreateGuildMocks, fn)
	}
}

func (_recv *clientRest) _CreateGuild_Stub() {
	_recv._CreateGuild_Do(func(discord.GuildCreate, ...rest.RequestOpt) (r0 *discord.RestGuild, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuild_Return(r0 *discord.RestGuild, r1 error) {
	_recv._CreateGuild_Do(func(discord.GuildCreate, ...rest.RequestOpt) (*discord.RestGuild, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuild_Calls() []_clientRest_CreateGuild_Call {
	if _recv == nil {
		panic("clientRest.CreateGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateGuildCalls
}

func (_recv *clientRest) CreateGuildChannel(guildID snowflake.ID, guildChannelCreate discord.GuildChannelCreate, opts ...rest.RequestOpt) (discord.GuildChannel, error) {
	if _recv == nil {
		panic("clientRest.CreateGuildChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateGuildChannelCalls = append(_dat.CreateGuildChannelCalls, _clientRest_CreateGuildChannel_Call{guildID, guildChannelCreate, opts})
	var _fn func(snowflake.ID, discord.GuildChannelCreate, ...rest.RequestOpt) (discord.GuildChannel, error)
	if len(_dat.CreateGuildChannelMocks) > 0 {
		_fn = _dat.CreateGuildChannelMocks[0]
		if len(_dat.CreateGuildChannelMocks) > 1 {
			_dat.CreateGuildChannelMocks = _dat.CreateGuildChannelMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateGuildChannel }
	_dat.mutex.Unlock()
	return _fn(guildID, guildChannelCreate, opts...)
}

func (_recv *clientRest) _CreateGuildChannel_Do(fn func(snowflake.ID, discord.GuildChannelCreate, ...rest.RequestOpt) (discord.GuildChannel, error)) {
	if _recv == nil {
		panic("clientRest.CreateGuildChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateGuildChannelMocks = []func(snowflake.ID, discord.GuildChannelCreate, ...rest.RequestOpt) (discord.GuildChannel, error){}
	} else if len(_dat.CreateGuildChannelMocks) < 2 {
		_dat.CreateGuildChannelMocks = []func(snowflake.ID, discord.GuildChannelCreate, ...rest.RequestOpt) (discord.GuildChannel, error){fn, fn}
	} else {
		_dat.CreateGuildChannelMocks = _dat.CreateGuildChannelMocks[:len(_dat.CreateGuildChannelMocks)-1]
		_dat.CreateGuildChannelMocks = append(_dat.CreateGuildChannelMocks, fn)
		_dat.CreateGuildChannelMocks = append(_dat.CreateGuildChannelMocks, fn)
	}
}

func (_recv *clientRest) _CreateGuildChannel_Stub() {
	_recv._CreateGuildChannel_Do(func(snowflake.ID, discord.GuildChannelCreate, ...rest.RequestOpt) (r0 discord.GuildChannel, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildChannel_Return(r0 discord.GuildChannel, r1 error) {
	_recv._CreateGuildChannel_Do(func(snowflake.ID, discord.GuildChannelCreate, ...rest.RequestOpt) (discord.GuildChannel, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildChannel_Calls() []_clientRest_CreateGuildChannel_Call {
	if _recv == nil {
		panic("clientRest.CreateGuildChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateGuildChannelCalls
}

func (_recv *clientRest) CreateGuildCommand(applicationID snowflake.ID, guildID snowflake.ID, command discord.ApplicationCommandCreate, opts ...rest.RequestOpt) (discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.CreateGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateGuildCommandCalls = append(_dat.CreateGuildCommandCalls, _clientRest_CreateGuildCommand_Call{applicationID, guildID, command, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error)
	if len(_dat.CreateGuildCommandMocks) > 0 {
		_fn = _dat.CreateGuildCommandMocks[0]
		if len(_dat.CreateGuildCommandMocks) > 1 {
			_dat.CreateGuildCommandMocks = _dat.CreateGuildCommandMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateGuildCommand }
	_dat.mutex.Unlock()
	return _fn(applicationID, guildID, command, opts...)
}

func (_recv *clientRest) _CreateGuildCommand_Do(fn func(snowflake.ID, snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.CreateGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateGuildCommandMocks = []func(snowflake.ID, snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error){}
	} else if len(_dat.CreateGuildCommandMocks) < 2 {
		_dat.CreateGuildCommandMocks = []func(snowflake.ID, snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.CreateGuildCommandMocks = _dat.CreateGuildCommandMocks[:len(_dat.CreateGuildCommandMocks)-1]
		_dat.CreateGuildCommandMocks = append(_dat.CreateGuildCommandMocks, fn)
		_dat.CreateGuildCommandMocks = append(_dat.CreateGuildCommandMocks, fn)
	}
}

func (_recv *clientRest) _CreateGuildCommand_Stub() {
	_recv._CreateGuildCommand_Do(func(snowflake.ID, snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (r0 discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildCommand_Return(r0 discord.ApplicationCommand, r1 error) {
	_recv._CreateGuildCommand_Do(func(snowflake.ID, snowflake.ID, discord.ApplicationCommandCreate, ...rest.RequestOpt) (discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildCommand_Calls() []_clientRest_CreateGuildCommand_Call {
	if _recv == nil {
		panic("clientRest.CreateGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateGuildCommandCalls
}

func (_recv *clientRest) CreateGuildFromTemplate(templateCode string, createGuildFromTemplate discord.GuildFromTemplateCreate, opts ...rest.RequestOpt) (*discord.Guild, error) {
	if _recv == nil {
		panic("clientRest.CreateGuildFromTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateGuildFromTemplateCalls = append(_dat.CreateGuildFromTemplateCalls, _clientRest_CreateGuildFromTemplate_Call{templateCode, createGuildFromTemplate, opts})
	var _fn func(string, discord.GuildFromTemplateCreate, ...rest.RequestOpt) (*discord.Guild, error)
	if len(_dat.CreateGuildFromTemplateMocks) > 0 {
		_fn = _dat.CreateGuildFromTemplateMocks[0]
		if len(_dat.CreateGuildFromTemplateMocks) > 1 {
			_dat.CreateGuildFromTemplateMocks = _dat.CreateGuildFromTemplateMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateGuildFromTemplate }
	_dat.mutex.Unlock()
	return _fn(templateCode, createGuildFromTemplate, opts...)
}

func (_recv *clientRest) _CreateGuildFromTemplate_Do(fn func(string, discord.GuildFromTemplateCreate, ...rest.RequestOpt) (*discord.Guild, error)) {
	if _recv == nil {
		panic("clientRest.CreateGuildFromTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateGuildFromTemplateMocks = []func(string, discord.GuildFromTemplateCreate, ...rest.RequestOpt) (*discord.Guild, error){}
	} else if len(_dat.CreateGuildFromTemplateMocks) < 2 {
		_dat.CreateGuildFromTemplateMocks = []func(string, discord.GuildFromTemplateCreate, ...rest.RequestOpt) (*discord.Guild, error){fn, fn}
	} else {
		_dat.CreateGuildFromTemplateMocks = _dat.CreateGuildFromTemplateMocks[:len(_dat.CreateGuildFromTemplateMocks)-1]
		_dat.CreateGuildFromTemplateMocks = append(_dat.CreateGuildFromTemplateMocks, fn)
		_dat.CreateGuildFromTemplateMocks = append(_dat.CreateGuildFromTemplateMocks, fn)
	}
}

func (_recv *clientRest) _CreateGuildFromTemplate_Stub() {
	_recv._CreateGuildFromTemplate_Do(func(string, discord.GuildFromTemplateCreate, ...rest.RequestOpt) (r0 *discord.Guild, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildFromTemplate_Return(r0 *discord.Guild, r1 error) {
	_recv._CreateGuildFromTemplate_Do(func(string, discord.GuildFromTemplateCreate, ...rest.RequestOpt) (*discord.Guild, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildFromTemplate_Calls() []_clientRest_CreateGuildFromTemplate_Call {
	if _recv == nil {
		panic("clientRest.CreateGuildFromTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateGuildFromTemplateCalls
}

func (_recv *clientRest) CreateGuildScheduledEvent(guildID snowflake.ID, guildScheduledEventCreate discord.GuildScheduledEventCreate, opts ...rest.RequestOpt) (*discord.GuildScheduledEvent, error) {
	if _recv == nil {
		panic("clientRest.CreateGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateGuildScheduledEventCalls = append(_dat.CreateGuildScheduledEventCalls, _clientRest_CreateGuildScheduledEvent_Call{guildID, guildScheduledEventCreate, opts})
	var _fn func(snowflake.ID, discord.GuildScheduledEventCreate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)
	if len(_dat.CreateGuildScheduledEventMocks) > 0 {
		_fn = _dat.CreateGuildScheduledEventMocks[0]
		if len(_dat.CreateGuildScheduledEventMocks) > 1 {
			_dat.CreateGuildScheduledEventMocks = _dat.CreateGuildScheduledEventMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateGuildScheduledEvent }
	_dat.mutex.Unlock()
	return _fn(guildID, guildScheduledEventCreate, opts...)
}

func (_recv *clientRest) _CreateGuildScheduledEvent_Do(fn func(snowflake.ID, discord.GuildScheduledEventCreate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)) {
	if _recv == nil {
		panic("clientRest.CreateGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateGuildScheduledEventMocks = []func(snowflake.ID, discord.GuildScheduledEventCreate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error){}
	} else if len(_dat.CreateGuildScheduledEventMocks) < 2 {
		_dat.CreateGuildScheduledEventMocks = []func(snowflake.ID, discord.GuildScheduledEventCreate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error){fn, fn}
	} else {
		_dat.CreateGuildScheduledEventMocks = _dat.CreateGuildScheduledEventMocks[:len(_dat.CreateGuildScheduledEventMocks)-1]
		_dat.CreateGuildScheduledEventMocks = append(_dat.CreateGuildScheduledEventMocks, fn)
		_dat.CreateGuildScheduledEventMocks = append(_dat.CreateGuildScheduledEventMocks, fn)
	}
}

func (_recv *clientRest) _CreateGuildScheduledEvent_Stub() {
	_recv._CreateGuildScheduledEvent_Do(func(snowflake.ID, discord.GuildScheduledEventCreate, ...rest.RequestOpt) (r0 *discord.GuildScheduledEvent, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildScheduledEvent_Return(r0 *discord.GuildScheduledEvent, r1 error) {
	_recv._CreateGuildScheduledEvent_Do(func(snowflake.ID, discord.GuildScheduledEventCreate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildScheduledEvent_Calls() []_clientRest_CreateGuildScheduledEvent_Call {
	if _recv == nil {
		panic("clientRest.CreateGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateGuildScheduledEventCalls
}

func (_recv *clientRest) CreateGuildSoundboardSound(guildID snowflake.ID, soundCreate discord.SoundboardSoundCreate, opts ...rest.RequestOpt) (*discord.SoundboardSound, error) {
	if _recv == nil {
		panic("clientRest.CreateGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateGuildSoundboardSoundCalls = append(_dat.CreateGuildSoundboardSoundCalls, _clientRest_CreateGuildSoundboardSound_Call{guildID, soundCreate, opts})
	var _fn func(snowflake.ID, discord.SoundboardSoundCreate, ...rest.RequestOpt) (*discord.SoundboardSound, error)
	if len(_dat.CreateGuildSoundboardSoundMocks) > 0 {
		_fn = _dat.CreateGuildSoundboardSoundMocks[0]
		if len(_dat.CreateGuildSoundboardSoundMocks) > 1 {
			_dat.CreateGuildSoundboardSoundMocks = _dat.CreateGuildSoundboardSoundMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateGuildSoundboardSound }
	_dat.mutex.Unlock()
	return _fn(guildID, soundCreate, opts...)
}

func (_recv *clientRest) _CreateGuildSoundboardSound_Do(fn func(snowflake.ID, discord.SoundboardSoundCreate, ...rest.RequestOpt) (*discord.SoundboardSound, error)) {
	if _recv == nil {
		panic("clientRest.CreateGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateGuildSoundboardSoundMocks = []func(snowflake.ID, discord.SoundboardSoundCreate, ...rest.RequestOpt) (*discord.SoundboardSound, error){}
	} else if len(_dat.CreateGuildSoundboardSoundMocks) < 2 {
		_dat.CreateGuildSoundboardSoundMocks = []func(snowflake.ID, discord.SoundboardSoundCreate, ...rest.RequestOpt) (*discord.SoundboardSound, error){fn, fn}
	} else {
		_dat.CreateGuildSoundboardSoundMocks = _dat.CreateGuildSoundboardSoundMocks[:len(_dat.CreateGuildSoundboardSoundMocks)-1]
		_dat.CreateGuildSoundboardSoundMocks = append(_dat.CreateGuildSoundboardSoundMocks, fn)
		_dat.CreateGuildSoundboardSoundMocks = append(_dat.CreateGuildSoundboardSoundMocks, fn)
	}
}

func (_recv *clientRest) _CreateGuildSoundboardSound_Stub() {
	_recv._CreateGuildSoundboardSound_Do(func(snowflake.ID, discord.SoundboardSoundCreate, ...rest.RequestOpt) (r0 *discord.SoundboardSound, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildSoundboardSound_Return(r0 *discord.SoundboardSound, r1 error) {
	_recv._CreateGuildSoundboardSound_Do(func(snowflake.ID, discord.SoundboardSoundCreate, ...rest.RequestOpt) (*discord.SoundboardSound, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildSoundboardSound_Calls() []_clientRest_CreateGuildSoundboardSound_Call {
	if _recv == nil {
		panic("clientRest.CreateGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateGuildSoundboardSoundCalls
}

func (_recv *clientRest) CreateGuildTemplate(guildID snowflake.ID, guildTemplateCreate discord.GuildTemplateCreate, opts ...rest.RequestOpt) (*discord.GuildTemplate, error) {
	if _recv == nil {
		panic("clientRest.CreateGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateGuildTemplateCalls = append(_dat.CreateGuildTemplateCalls, _clientRest_CreateGuildTemplate_Call{guildID, guildTemplateCreate, opts})
	var _fn func(snowflake.ID, discord.GuildTemplateCreate, ...rest.RequestOpt) (*discord.GuildTemplate, error)
	if len(_dat.CreateGuildTemplateMocks) > 0 {
		_fn = _dat.CreateGuildTemplateMocks[0]
		if len(_dat.CreateGuildTemplateMocks) > 1 {
			_dat.CreateGuildTemplateMocks = _dat.CreateGuildTemplateMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateGuildTemplate }
	_dat.mutex.Unlock()
	return _fn(guildID, guildTemplateCreate, opts...)
}

func (_recv *clientRest) _CreateGuildTemplate_Do(fn func(snowflake.ID, discord.GuildTemplateCreate, ...rest.RequestOpt) (*discord.GuildTemplate, error)) {
	if _recv == nil {
		panic("clientRest.CreateGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateGuildTemplateMocks = []func(snowflake.ID, discord.GuildTemplateCreate, ...rest.RequestOpt) (*discord.GuildTemplate, error){}
	} else if len(_dat.CreateGuildTemplateMocks) < 2 {
		_dat.CreateGuildTemplateMocks = []func(snowflake.ID, discord.GuildTemplateCreate, ...rest.RequestOpt) (*discord.GuildTemplate, error){fn, fn}
	} else {
		_dat.CreateGuildTemplateMocks = _dat.CreateGuildTemplateMocks[:len(_dat.CreateGuildTemplateMocks)-1]
		_dat.CreateGuildTemplateMocks = append(_dat.CreateGuildTemplateMocks, fn)
		_dat.CreateGuildTemplateMocks = append(_dat.CreateGuildTemplateMocks, fn)
	}
}

func (_recv *clientRest) _CreateGuildTemplate_Stub() {
	_recv._CreateGuildTemplate_Do(func(snowflake.ID, discord.GuildTemplateCreate, ...rest.RequestOpt) (r0 *discord.GuildTemplate, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildTemplate_Return(r0 *discord.GuildTemplate, r1 error) {
	_recv._CreateGuildTemplate_Do(func(snowflake.ID, discord.GuildTemplateCreate, ...rest.RequestOpt) (*discord.GuildTemplate, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateGuildTemplate_Calls() []_clientRest_CreateGuildTemplate_Call {
	if _recv == nil {
		panic("clientRest.CreateGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateGuildTemplateCalls
}

func (_recv *clientRest) CreateInteractionResponse(interactionID snowflake.ID, interactionToken string, interactionResponse discord.InteractionResponse, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.CreateInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateInteractionResponseCalls = append(_dat.CreateInteractionResponseCalls, _clientRest_CreateInteractionResponse_Call{interactionID, interactionToken, interactionResponse, opts})
	var _fn func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (error)
	if len(_dat.CreateInteractionResponseMocks) > 0 {
		_fn = _dat.CreateInteractionResponseMocks[0]
		if len(_dat.CreateInteractionResponseMocks) > 1 {
			_dat.CreateInteractionResponseMocks = _dat.CreateInteractionResponseMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateInteractionResponse }
	_dat.mutex.Unlock()
	return _fn(interactionID, interactionToken, interactionResponse, opts...)
}

func (_recv *clientRest) _CreateInteractionResponse_Do(fn func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.CreateInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateInteractionResponseMocks = []func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (error){}
	} else if len(_dat.CreateInteractionResponseMocks) < 2 {
		_dat.CreateInteractionResponseMocks = []func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.CreateInteractionResponseMocks = _dat.CreateInteractionResponseMocks[:len(_dat.CreateInteractionResponseMocks)-1]
		_dat.CreateInteractionResponseMocks = append(_dat.CreateInteractionResponseMocks, fn)
		_dat.CreateInteractionResponseMocks = append(_dat.CreateInteractionResponseMocks, fn)
	}
}

func (_recv *clientRest) _CreateInteractionResponse_Stub() {
	_recv._CreateInteractionResponse_Do(func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _CreateInteractionResponse_Return(r0 error) {
	_recv._CreateInteractionResponse_Do(func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _CreateInteractionResponse_Calls() []_clientRest_CreateInteractionResponse_Call {
	if _recv == nil {
		panic("clientRest.CreateInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateInteractionResponseCalls
}

func (_recv *clientRest) CreateInteractionResponseWithCallback(interactionID snowflake.ID, interactionToken string, interactionResponse discord.InteractionResponse, opts ...rest.RequestOpt) (*discord.InteractionCallbackResponse, error) {
	if _recv == nil {
		panic("clientRest.CreateInteractionResponseWithCallback: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateInteractionResponseWithCallbackCalls = append(_dat.CreateInteractionResponseWithCallbackCalls, _clientRest_CreateInteractionResponseWithCallback_Call{interactionID, interactionToken, interactionResponse, opts})
	var _fn func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (*discord.InteractionCallbackResponse, error)
	if len(_dat.CreateInteractionResponseWithCallbackMocks) > 0 {
		_fn = _dat.CreateInteractionResponseWithCallbackMocks[0]
		if len(_dat.CreateInteractionResponseWithCallbackMocks) > 1 {
			_dat.CreateInteractionResponseWithCallbackMocks = _dat.CreateInteractionResponseWithCallbackMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateInteractionResponseWithCallback }
	_dat.mutex.Unlock()
	return _fn(interactionID, interactionToken, interactionResponse, opts...)
}

func (_recv *clientRest) _CreateInteractionResponseWithCallback_Do(fn func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (*discord.InteractionCallbackResponse, error)) {
	if _recv == nil {
		panic("clientRest.CreateInteractionResponseWithCallback: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateInteractionResponseWithCallbackMocks = []func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (*discord.InteractionCallbackResponse, error){}
	} else if len(_dat.CreateInteractionResponseWithCallbackMocks) < 2 {
		_dat.CreateInteractionResponseWithCallbackMocks = []func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (*discord.InteractionCallbackResponse, error){fn, fn}
	} else {
		_dat.CreateInteractionResponseWithCallbackMocks = _dat.CreateInteractionResponseWithCallbackMocks[:len(_dat.CreateInteractionResponseWithCallbackMocks)-1]
		_dat.CreateInteractionResponseWithCallbackMocks = append(_dat.CreateInteractionResponseWithCallbackMocks, fn)
		_dat.CreateInteractionResponseWithCallbackMocks = append(_dat.CreateInteractionResponseWithCallbackMocks, fn)
	}
}

func (_recv *clientRest) _CreateInteractionResponseWithCallback_Stub() {
	_recv._CreateInteractionResponseWithCallback_Do(func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (r0 *discord.InteractionCallbackResponse, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateInteractionResponseWithCallback_Return(r0 *discord.InteractionCallbackResponse, r1 error) {
	_recv._CreateInteractionResponseWithCallback_Do(func(snowflake.ID, string, discord.InteractionResponse, ...rest.RequestOpt) (*discord.InteractionCallbackResponse, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateInteractionResponseWithCallback_Calls() []_clientRest_CreateInteractionResponseWithCallback_Call {
	if _recv == nil {
		panic("clientRest.CreateInteractionResponseWithCallback: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateInteractionResponseWithCallbackCalls
}

func (_recv *clientRest) CreateInvite(channelID snowflake.ID, inviteCreate discord.InviteCreate, opts ...rest.RequestOpt) (*discord.Invite, error) {
	if _recv == nil {
		panic("clientRest.CreateInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateInviteCalls = append(_dat.CreateInviteCalls, _clientRest_CreateInvite_Call{channelID, inviteCreate, opts})
	var _fn func(snowflake.ID, discord.InviteCreate, ...rest.RequestOpt) (*discord.Invite, error)
	if len(_dat.CreateInviteMocks) > 0 {
		_fn = _dat.CreateInviteMocks[0]
		if len(_dat.CreateInviteMocks) > 1 {
			_dat.CreateInviteMocks = _dat.CreateInviteMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateInvite }
	_dat.mutex.Unlock()
	return _fn(channelID, inviteCreate, opts...)
}

func (_recv *clientRest) _CreateInvite_Do(fn func(snowflake.ID, discord.InviteCreate, ...rest.RequestOpt) (*discord.Invite, error)) {
	if _recv == nil {
		panic("clientRest.CreateInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateInviteMocks = []func(snowflake.ID, discord.InviteCreate, ...rest.RequestOpt) (*discord.Invite, error){}
	} else if len(_dat.CreateInviteMocks) < 2 {
		_dat.CreateInviteMocks = []func(snowflake.ID, discord.InviteCreate, ...rest.RequestOpt) (*discord.Invite, error){fn, fn}
	} else {
		_dat.CreateInviteMocks = _dat.CreateInviteMocks[:len(_dat.CreateInviteMocks)-1]
		_dat.CreateInviteMocks = append(_dat.CreateInviteMocks, fn)
		_dat.CreateInviteMocks = append(_dat.CreateInviteMocks, fn)
	}
}

func (_recv *clientRest) _CreateInvite_Stub() {
	_recv._CreateInvite_Do(func(snowflake.ID, discord.InviteCreate, ...rest.RequestOpt) (r0 *discord.Invite, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateInvite_Return(r0 *discord.Invite, r1 error) {
	_recv._CreateInvite_Do(func(snowflake.ID, discord.InviteCreate, ...rest.RequestOpt) (*discord.Invite, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateInvite_Calls() []_clientRest_CreateInvite_Call {
	if _recv == nil {
		panic("clientRest.CreateInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateInviteCalls
}

func (_recv *clientRest) CreateMessage(channelID snowflake.ID, messageCreate discord.MessageCreate, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.CreateMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateMessageCalls = append(_dat.CreateMessageCalls, _clientRest_CreateMessage_Call{channelID, messageCreate, opts})
	var _fn func(snowflake.ID, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.CreateMessageMocks) > 0 {
		_fn = _dat.CreateMessageMocks[0]
		if len(_dat.CreateMessageMocks) > 1 {
			_dat.CreateMessageMocks = _dat.CreateMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateMessage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageCreate, opts...)
}

func (_recv *clientRest) _CreateMessage_Do(fn func(snowflake.ID, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.CreateMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateMessageMocks = []func(snowflake.ID, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.CreateMessageMocks) < 2 {
		_dat.CreateMessageMocks = []func(snowflake.ID, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.CreateMessageMocks = _dat.CreateMessageMocks[:len(_dat.CreateMessageMocks)-1]
		_dat.CreateMessageMocks = append(_dat.CreateMessageMocks, fn)
		_dat.CreateMessageMocks = append(_dat.CreateMessageMocks, fn)
	}
}

func (_recv *clientRest) _CreateMessage_Stub() {
	_recv._CreateMessage_Do(func(snowflake.ID, discord.MessageCreate, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateMessage_Return(r0 *discord.Message, r1 error) {
	_recv._CreateMessage_Do(func(snowflake.ID, discord.MessageCreate, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateMessage_Calls() []_clientRest_CreateMessage_Call {
	if _recv == nil {
		panic("clientRest.CreateMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateMessageCalls
}

func (_recv *clientRest) CreatePostInThreadChannel(channelID snowflake.ID, postCreateInChannel discord.ThreadChannelPostCreate, opts ...rest.RequestOpt) (*discord.ThreadChannelPost, error) {
	if _recv == nil {
		panic("clientRest.CreatePostInThreadChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreatePostInThreadChannelCalls = append(_dat.CreatePostInThreadChannelCalls, _clientRest_CreatePostInThreadChannel_Call{channelID, postCreateInChannel, opts})
	var _fn func(snowflake.ID, discord.ThreadChannelPostCreate, ...rest.RequestOpt) (*discord.ThreadChannelPost, error)
	if len(_dat.CreatePostInThreadChannelMocks) > 0 {
		_fn = _dat.CreatePostInThreadChannelMocks[0]
		if len(_dat.CreatePostInThreadChannelMocks) > 1 {
			_dat.CreatePostInThreadChannelMocks = _dat.CreatePostInThreadChannelMocks[1:]
		}
	} else { _fn = _recv.Rest.CreatePostInThreadChannel }
	_dat.mutex.Unlock()
	return _fn(channelID, postCreateInChannel, opts...)
}

func (_recv *clientRest) _CreatePostInThreadChannel_Do(fn func(snowflake.ID, discord.ThreadChannelPostCreate, ...rest.RequestOpt) (*discord.ThreadChannelPost, error)) {
	if _recv == nil {
		panic("clientRest.CreatePostInThreadChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreatePostInThreadChannelMocks = []func(snowflake.ID, discord.ThreadChannelPostCreate, ...rest.RequestOpt) (*discord.ThreadChannelPost, error){}
	} else if len(_dat.CreatePostInThreadChannelMocks) < 2 {
		_dat.CreatePostInThreadChannelMocks = []func(snowflake.ID, discord.ThreadChannelPostCreate, ...rest.RequestOpt) (*discord.ThreadChannelPost, error){fn, fn}
	} else {
		_dat.CreatePostInThreadChannelMocks = _dat.CreatePostInThreadChannelMocks[:len(_dat.CreatePostInThreadChannelMocks)-1]
		_dat.CreatePostInThreadChannelMocks = append(_dat.CreatePostInThreadChannelMocks, fn)
		_dat.CreatePostInThreadChannelMocks = append(_dat.CreatePostInThreadChannelMocks, fn)
	}
}

func (_recv *clientRest) _CreatePostInThreadChannel_Stub() {
	_recv._CreatePostInThreadChannel_Do(func(snowflake.ID, discord.ThreadChannelPostCreate, ...rest.RequestOpt) (post *discord.ThreadChannelPost, err error) {
		return post, err
	})
}

func (_recv *clientRest) _CreatePostInThreadChannel_Return(post *discord.ThreadChannelPost, err error) {
	_recv._CreatePostInThreadChannel_Do(func(snowflake.ID, discord.ThreadChannelPostCreate, ...rest.RequestOpt) (*discord.ThreadChannelPost, error) {
		return post, err
	})
}

func (_recv *clientRest) _CreatePostInThreadChannel_Calls() []_clientRest_CreatePostInThreadChannel_Call {
	if _recv == nil {
		panic("clientRest.CreatePostInThreadChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreatePostInThreadChannelCalls
}

func (_recv *clientRest) CreateRole(guildID snowflake.ID, createRole discord.RoleCreate, opts ...rest.RequestOpt) (*discord.Role, error) {
	if _recv == nil {
		panic("clientRest.CreateRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateRoleCalls = append(_dat.CreateRoleCalls, _clientRest_CreateRole_Call{guildID, createRole, opts})
	var _fn func(snowflake.ID, discord.RoleCreate, ...rest.RequestOpt) (*discord.Role, error)
	if len(_dat.CreateRoleMocks) > 0 {
		_fn = _dat.CreateRoleMocks[0]
		if len(_dat.CreateRoleMocks) > 1 {
			_dat.CreateRoleMocks = _dat.CreateRoleMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateRole }
	_dat.mutex.Unlock()
	return _fn(guildID, createRole, opts...)
}

func (_recv *clientRest) _CreateRole_Do(fn func(snowflake.ID, discord.RoleCreate, ...rest.RequestOpt) (*discord.Role, error)) {
	if _recv == nil {
		panic("clientRest.CreateRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateRoleMocks = []func(snowflake.ID, discord.RoleCreate, ...rest.RequestOpt) (*discord.Role, error){}
	} else if len(_dat.CreateRoleMocks) < 2 {
		_dat.CreateRoleMocks = []func(snowflake.ID, discord.RoleCreate, ...rest.RequestOpt) (*discord.Role, error){fn, fn}
	} else {
		_dat.CreateRoleMocks = _dat.CreateRoleMocks[:len(_dat.CreateRoleMocks)-1]
		_dat.CreateRoleMocks = append(_dat.CreateRoleMocks, fn)
		_dat.CreateRoleMocks = append(_dat.CreateRoleMocks, fn)
	}
}

func (_recv *clientRest) _CreateRole_Stub() {
	_recv._CreateRole_Do(func(snowflake.ID, discord.RoleCreate, ...rest.RequestOpt) (r0 *discord.Role, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateRole_Return(r0 *discord.Role, r1 error) {
	_recv._CreateRole_Do(func(snowflake.ID, discord.RoleCreate, ...rest.RequestOpt) (*discord.Role, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateRole_Calls() []_clientRest_CreateRole_Call {
	if _recv == nil {
		panic("clientRest.CreateRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateRoleCalls
}

func (_recv *clientRest) CreateStageInstance(stageInstanceCreate discord.StageInstanceCreate, opts ...rest.RequestOpt) (*discord.StageInstance, error) {
	if _recv == nil {
		panic("clientRest.CreateStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateStageInstanceCalls = append(_dat.CreateStageInstanceCalls, _clientRest_CreateStageInstance_Call{stageInstanceCreate, opts})
	var _fn func(discord.StageInstanceCreate, ...rest.RequestOpt) (*discord.StageInstance, error)
	if len(_dat.CreateStageInstanceMocks) > 0 {
		_fn = _dat.CreateStageInstanceMocks[0]
		if len(_dat.CreateStageInstanceMocks) > 1 {
			_dat.CreateStageInstanceMocks = _dat.CreateStageInstanceMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateStageInstance }
	_dat.mutex.Unlock()
	return _fn(stageInstanceCreate, opts...)
}

func (_recv *clientRest) _CreateStageInstance_Do(fn func(discord.StageInstanceCreate, ...rest.RequestOpt) (*discord.StageInstance, error)) {
	if _recv == nil {
		panic("clientRest.CreateStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateStageInstanceMocks = []func(discord.StageInstanceCreate, ...rest.RequestOpt) (*discord.StageInstance, error){}
	} else if len(_dat.CreateStageInstanceMocks) < 2 {
		_dat.CreateStageInstanceMocks = []func(discord.StageInstanceCreate, ...rest.RequestOpt) (*discord.StageInstance, error){fn, fn}
	} else {
		_dat.CreateStageInstanceMocks = _dat.CreateStageInstanceMocks[:len(_dat.CreateStageInstanceMocks)-1]
		_dat.CreateStageInstanceMocks = append(_dat.CreateStageInstanceMocks, fn)
		_dat.CreateStageInstanceMocks = append(_dat.CreateStageInstanceMocks, fn)
	}
}

func (_recv *clientRest) _CreateStageInstance_Stub() {
	_recv._CreateStageInstance_Do(func(discord.StageInstanceCreate, ...rest.RequestOpt) (r0 *discord.StageInstance, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateStageInstance_Return(r0 *discord.StageInstance, r1 error) {
	_recv._CreateStageInstance_Do(func(discord.StageInstanceCreate, ...rest.RequestOpt) (*discord.StageInstance, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateStageInstance_Calls() []_clientRest_CreateStageInstance_Call {
	if _recv == nil {
		panic("clientRest.CreateStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateStageInstanceCalls
}

func (_recv *clientRest) CreateSticker(guildID snowflake.ID, createSticker discord.StickerCreate, opts ...rest.RequestOpt) (*discord.Sticker, error) {
	if _recv == nil {
		panic("clientRest.CreateSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateStickerCalls = append(_dat.CreateStickerCalls, _clientRest_CreateSticker_Call{guildID, createSticker, opts})
	var _fn func(snowflake.ID, discord.StickerCreate, ...rest.RequestOpt) (*discord.Sticker, error)
	if len(_dat.CreateStickerMocks) > 0 {
		_fn = _dat.CreateStickerMocks[0]
		if len(_dat.CreateStickerMocks) > 1 {
			_dat.CreateStickerMocks = _dat.CreateStickerMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateSticker }
	_dat.mutex.Unlock()
	return _fn(guildID, createSticker, opts...)
}

func (_recv *clientRest) _CreateSticker_Do(fn func(snowflake.ID, discord.StickerCreate, ...rest.RequestOpt) (*discord.Sticker, error)) {
	if _recv == nil {
		panic("clientRest.CreateSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateStickerMocks = []func(snowflake.ID, discord.StickerCreate, ...rest.RequestOpt) (*discord.Sticker, error){}
	} else if len(_dat.CreateStickerMocks) < 2 {
		_dat.CreateStickerMocks = []func(snowflake.ID, discord.StickerCreate, ...rest.RequestOpt) (*discord.Sticker, error){fn, fn}
	} else {
		_dat.CreateStickerMocks = _dat.CreateStickerMocks[:len(_dat.CreateStickerMocks)-1]
		_dat.CreateStickerMocks = append(_dat.CreateStickerMocks, fn)
		_dat.CreateStickerMocks = append(_dat.CreateStickerMocks, fn)
	}
}

func (_recv *clientRest) _CreateSticker_Stub() {
	_recv._CreateSticker_Do(func(snowflake.ID, discord.StickerCreate, ...rest.RequestOpt) (r0 *discord.Sticker, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateSticker_Return(r0 *discord.Sticker, r1 error) {
	_recv._CreateSticker_Do(func(snowflake.ID, discord.StickerCreate, ...rest.RequestOpt) (*discord.Sticker, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateSticker_Calls() []_clientRest_CreateSticker_Call {
	if _recv == nil {
		panic("clientRest.CreateSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateStickerCalls
}

func (_recv *clientRest) CreateTestEntitlement(applicationID snowflake.ID, entitlementCreate discord.TestEntitlementCreate, opts ...rest.RequestOpt) (*discord.Entitlement, error) {
	if _recv == nil {
		panic("clientRest.CreateTestEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateTestEntitlementCalls = append(_dat.CreateTestEntitlementCalls, _clientRest_CreateTestEntitlement_Call{applicationID, entitlementCreate, opts})
	var _fn func(snowflake.ID, discord.TestEntitlementCreate, ...rest.RequestOpt) (*discord.Entitlement, error)
	if len(_dat.CreateTestEntitlementMocks) > 0 {
		_fn = _dat.CreateTestEntitlementMocks[0]
		if len(_dat.CreateTestEntitlementMocks) > 1 {
			_dat.CreateTestEntitlementMocks = _dat.CreateTestEntitlementMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateTestEntitlement }
	_dat.mutex.Unlock()
	return _fn(applicationID, entitlementCreate, opts...)
}

func (_recv *clientRest) _CreateTestEntitlement_Do(fn func(snowflake.ID, discord.TestEntitlementCreate, ...rest.RequestOpt) (*discord.Entitlement, error)) {
	if _recv == nil {
		panic("clientRest.CreateTestEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateTestEntitlementMocks = []func(snowflake.ID, discord.TestEntitlementCreate, ...rest.RequestOpt) (*discord.Entitlement, error){}
	} else if len(_dat.CreateTestEntitlementMocks) < 2 {
		_dat.CreateTestEntitlementMocks = []func(snowflake.ID, discord.TestEntitlementCreate, ...rest.RequestOpt) (*discord.Entitlement, error){fn, fn}
	} else {
		_dat.CreateTestEntitlementMocks = _dat.CreateTestEntitlementMocks[:len(_dat.CreateTestEntitlementMocks)-1]
		_dat.CreateTestEntitlementMocks = append(_dat.CreateTestEntitlementMocks, fn)
		_dat.CreateTestEntitlementMocks = append(_dat.CreateTestEntitlementMocks, fn)
	}
}

func (_recv *clientRest) _CreateTestEntitlement_Stub() {
	_recv._CreateTestEntitlement_Do(func(snowflake.ID, discord.TestEntitlementCreate, ...rest.RequestOpt) (r0 *discord.Entitlement, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateTestEntitlement_Return(r0 *discord.Entitlement, r1 error) {
	_recv._CreateTestEntitlement_Do(func(snowflake.ID, discord.TestEntitlementCreate, ...rest.RequestOpt) (*discord.Entitlement, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateTestEntitlement_Calls() []_clientRest_CreateTestEntitlement_Call {
	if _recv == nil {
		panic("clientRest.CreateTestEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateTestEntitlementCalls
}

func (_recv *clientRest) CreateThread(channelID snowflake.ID, threadCreate discord.ThreadCreate, opts ...rest.RequestOpt) (*discord.GuildThread, error) {
	if _recv == nil {
		panic("clientRest.CreateThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateThreadCalls = append(_dat.CreateThreadCalls, _clientRest_CreateThread_Call{channelID, threadCreate, opts})
	var _fn func(snowflake.ID, discord.ThreadCreate, ...rest.RequestOpt) (*discord.GuildThread, error)
	if len(_dat.CreateThreadMocks) > 0 {
		_fn = _dat.CreateThreadMocks[0]
		if len(_dat.CreateThreadMocks) > 1 {
			_dat.CreateThreadMocks = _dat.CreateThreadMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateThread }
	_dat.mutex.Unlock()
	return _fn(channelID, threadCreate, opts...)
}

func (_recv *clientRest) _CreateThread_Do(fn func(snowflake.ID, discord.ThreadCreate, ...rest.RequestOpt) (*discord.GuildThread, error)) {
	if _recv == nil {
		panic("clientRest.CreateThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateThreadMocks = []func(snowflake.ID, discord.ThreadCreate, ...rest.RequestOpt) (*discord.GuildThread, error){}
	} else if len(_dat.CreateThreadMocks) < 2 {
		_dat.CreateThreadMocks = []func(snowflake.ID, discord.ThreadCreate, ...rest.RequestOpt) (*discord.GuildThread, error){fn, fn}
	} else {
		_dat.CreateThreadMocks = _dat.CreateThreadMocks[:len(_dat.CreateThreadMocks)-1]
		_dat.CreateThreadMocks = append(_dat.CreateThreadMocks, fn)
		_dat.CreateThreadMocks = append(_dat.CreateThreadMocks, fn)
	}
}

func (_recv *clientRest) _CreateThread_Stub() {
	_recv._CreateThread_Do(func(snowflake.ID, discord.ThreadCreate, ...rest.RequestOpt) (thread *discord.GuildThread, err error) {
		return thread, err
	})
}

func (_recv *clientRest) _CreateThread_Return(thread *discord.GuildThread, err error) {
	_recv._CreateThread_Do(func(snowflake.ID, discord.ThreadCreate, ...rest.RequestOpt) (*discord.GuildThread, error) {
		return thread, err
	})
}

func (_recv *clientRest) _CreateThread_Calls() []_clientRest_CreateThread_Call {
	if _recv == nil {
		panic("clientRest.CreateThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateThreadCalls
}

func (_recv *clientRest) CreateThreadFromMessage(channelID snowflake.ID, messageID snowflake.ID, threadCreateFromMessage discord.ThreadCreateFromMessage, opts ...rest.RequestOpt) (*discord.GuildThread, error) {
	if _recv == nil {
		panic("clientRest.CreateThreadFromMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateThreadFromMessageCalls = append(_dat.CreateThreadFromMessageCalls, _clientRest_CreateThreadFromMessage_Call{channelID, messageID, threadCreateFromMessage, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.ThreadCreateFromMessage, ...rest.RequestOpt) (*discord.GuildThread, error)
	if len(_dat.CreateThreadFromMessageMocks) > 0 {
		_fn = _dat.CreateThreadFromMessageMocks[0]
		if len(_dat.CreateThreadFromMessageMocks) > 1 {
			_dat.CreateThreadFromMessageMocks = _dat.CreateThreadFromMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateThreadFromMessage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, threadCreateFromMessage, opts...)
}

func (_recv *clientRest) _CreateThreadFromMessage_Do(fn func(snowflake.ID, snowflake.ID, discord.ThreadCreateFromMessage, ...rest.RequestOpt) (*discord.GuildThread, error)) {
	if _recv == nil {
		panic("clientRest.CreateThreadFromMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateThreadFromMessageMocks = []func(snowflake.ID, snowflake.ID, discord.ThreadCreateFromMessage, ...rest.RequestOpt) (*discord.GuildThread, error){}
	} else if len(_dat.CreateThreadFromMessageMocks) < 2 {
		_dat.CreateThreadFromMessageMocks = []func(snowflake.ID, snowflake.ID, discord.ThreadCreateFromMessage, ...rest.RequestOpt) (*discord.GuildThread, error){fn, fn}
	} else {
		_dat.CreateThreadFromMessageMocks = _dat.CreateThreadFromMessageMocks[:len(_dat.CreateThreadFromMessageMocks)-1]
		_dat.CreateThreadFromMessageMocks = append(_dat.CreateThreadFromMessageMocks, fn)
		_dat.CreateThreadFromMessageMocks = append(_dat.CreateThreadFromMessageMocks, fn)
	}
}

func (_recv *clientRest) _CreateThreadFromMessage_Stub() {
	_recv._CreateThreadFromMessage_Do(func(snowflake.ID, snowflake.ID, discord.ThreadCreateFromMessage, ...rest.RequestOpt) (thread *discord.GuildThread, err error) {
		return thread, err
	})
}

func (_recv *clientRest) _CreateThreadFromMessage_Return(thread *discord.GuildThread, err error) {
	_recv._CreateThreadFromMessage_Do(func(snowflake.ID, snowflake.ID, discord.ThreadCreateFromMessage, ...rest.RequestOpt) (*discord.GuildThread, error) {
		return thread, err
	})
}

func (_recv *clientRest) _CreateThreadFromMessage_Calls() []_clientRest_CreateThreadFromMessage_Call {
	if _recv == nil {
		panic("clientRest.CreateThreadFromMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateThreadFromMessageCalls
}

func (_recv *clientRest) CreateWebhook(channelID snowflake.ID, webhookCreate discord.WebhookCreate, opts ...rest.RequestOpt) (*discord.IncomingWebhook, error) {
	if _recv == nil {
		panic("clientRest.CreateWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateWebhookCalls = append(_dat.CreateWebhookCalls, _clientRest_CreateWebhook_Call{channelID, webhookCreate, opts})
	var _fn func(snowflake.ID, discord.WebhookCreate, ...rest.RequestOpt) (*discord.IncomingWebhook, error)
	if len(_dat.CreateWebhookMocks) > 0 {
		_fn = _dat.CreateWebhookMocks[0]
		if len(_dat.CreateWebhookMocks) > 1 {
			_dat.CreateWebhookMocks = _dat.CreateWebhookMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateWebhook }
	_dat.mutex.Unlock()
	return _fn(channelID, webhookCreate, opts...)
}

func (_recv *clientRest) _CreateWebhook_Do(fn func(snowflake.ID, discord.WebhookCreate, ...rest.RequestOpt) (*discord.IncomingWebhook, error)) {
	if _recv == nil {
		panic("clientRest.CreateWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateWebhookMocks = []func(snowflake.ID, discord.WebhookCreate, ...rest.RequestOpt) (*discord.IncomingWebhook, error){}
	} else if len(_dat.CreateWebhookMocks) < 2 {
		_dat.CreateWebhookMocks = []func(snowflake.ID, discord.WebhookCreate, ...rest.RequestOpt) (*discord.IncomingWebhook, error){fn, fn}
	} else {
		_dat.CreateWebhookMocks = _dat.CreateWebhookMocks[:len(_dat.CreateWebhookMocks)-1]
		_dat.CreateWebhookMocks = append(_dat.CreateWebhookMocks, fn)
		_dat.CreateWebhookMocks = append(_dat.CreateWebhookMocks, fn)
	}
}

func (_recv *clientRest) _CreateWebhook_Stub() {
	_recv._CreateWebhook_Do(func(snowflake.ID, discord.WebhookCreate, ...rest.RequestOpt) (r0 *discord.IncomingWebhook, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateWebhook_Return(r0 *discord.IncomingWebhook, r1 error) {
	_recv._CreateWebhook_Do(func(snowflake.ID, discord.WebhookCreate, ...rest.RequestOpt) (*discord.IncomingWebhook, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateWebhook_Calls() []_clientRest_CreateWebhook_Call {
	if _recv == nil {
		panic("clientRest.CreateWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateWebhookCalls
}

func (_recv *clientRest) CreateWebhookMessage(webhookID snowflake.ID, webhookToken string, messageCreate discord.WebhookMessageCreate, wait bool, threadID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateWebhookMessageCalls = append(_dat.CreateWebhookMessageCalls, _clientRest_CreateWebhookMessage_Call{webhookID, webhookToken, messageCreate, wait, threadID, opts})
	var _fn func(snowflake.ID, string, discord.WebhookMessageCreate, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.CreateWebhookMessageMocks) > 0 {
		_fn = _dat.CreateWebhookMessageMocks[0]
		if len(_dat.CreateWebhookMessageMocks) > 1 {
			_dat.CreateWebhookMessageMocks = _dat.CreateWebhookMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateWebhookMessage }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookToken, messageCreate, wait, threadID, opts...)
}

func (_recv *clientRest) _CreateWebhookMessage_Do(fn func(snowflake.ID, string, discord.WebhookMessageCreate, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateWebhookMessageMocks = []func(snowflake.ID, string, discord.WebhookMessageCreate, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.CreateWebhookMessageMocks) < 2 {
		_dat.CreateWebhookMessageMocks = []func(snowflake.ID, string, discord.WebhookMessageCreate, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.CreateWebhookMessageMocks = _dat.CreateWebhookMessageMocks[:len(_dat.CreateWebhookMessageMocks)-1]
		_dat.CreateWebhookMessageMocks = append(_dat.CreateWebhookMessageMocks, fn)
		_dat.CreateWebhookMessageMocks = append(_dat.CreateWebhookMessageMocks, fn)
	}
}

func (_recv *clientRest) _CreateWebhookMessage_Stub() {
	_recv._CreateWebhookMessage_Do(func(snowflake.ID, string, discord.WebhookMessageCreate, bool, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateWebhookMessage_Return(r0 *discord.Message, r1 error) {
	_recv._CreateWebhookMessage_Do(func(snowflake.ID, string, discord.WebhookMessageCreate, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateWebhookMessage_Calls() []_clientRest_CreateWebhookMessage_Call {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateWebhookMessageCalls
}

func (_recv *clientRest) CreateWebhookMessageGitHub(webhookID snowflake.ID, webhookToken string, messageCreate discord.Payload, wait bool, threadID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessageGitHub: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateWebhookMessageGitHubCalls = append(_dat.CreateWebhookMessageGitHubCalls, _clientRest_CreateWebhookMessageGitHub_Call{webhookID, webhookToken, messageCreate, wait, threadID, opts})
	var _fn func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.CreateWebhookMessageGitHubMocks) > 0 {
		_fn = _dat.CreateWebhookMessageGitHubMocks[0]
		if len(_dat.CreateWebhookMessageGitHubMocks) > 1 {
			_dat.CreateWebhookMessageGitHubMocks = _dat.CreateWebhookMessageGitHubMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateWebhookMessageGitHub }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookToken, messageCreate, wait, threadID, opts...)
}

func (_recv *clientRest) _CreateWebhookMessageGitHub_Do(fn func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessageGitHub: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateWebhookMessageGitHubMocks = []func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.CreateWebhookMessageGitHubMocks) < 2 {
		_dat.CreateWebhookMessageGitHubMocks = []func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.CreateWebhookMessageGitHubMocks = _dat.CreateWebhookMessageGitHubMocks[:len(_dat.CreateWebhookMessageGitHubMocks)-1]
		_dat.CreateWebhookMessageGitHubMocks = append(_dat.CreateWebhookMessageGitHubMocks, fn)
		_dat.CreateWebhookMessageGitHubMocks = append(_dat.CreateWebhookMessageGitHubMocks, fn)
	}
}

func (_recv *clientRest) _CreateWebhookMessageGitHub_Stub() {
	_recv._CreateWebhookMessageGitHub_Do(func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateWebhookMessageGitHub_Return(r0 *discord.Message, r1 error) {
	_recv._CreateWebhookMessageGitHub_Do(func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateWebhookMessageGitHub_Calls() []_clientRest_CreateWebhookMessageGitHub_Call {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessageGitHub: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateWebhookMessageGitHubCalls
}

func (_recv *clientRest) CreateWebhookMessageSlack(webhookID snowflake.ID, webhookToken string, messageCreate discord.Payload, wait bool, threadID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessageSlack: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CreateWebhookMessageSlackCalls = append(_dat.CreateWebhookMessageSlackCalls, _clientRest_CreateWebhookMessageSlack_Call{webhookID, webhookToken, messageCreate, wait, threadID, opts})
	var _fn func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.CreateWebhookMessageSlackMocks) > 0 {
		_fn = _dat.CreateWebhookMessageSlackMocks[0]
		if len(_dat.CreateWebhookMessageSlackMocks) > 1 {
			_dat.CreateWebhookMessageSlackMocks = _dat.CreateWebhookMessageSlackMocks[1:]
		}
	} else { _fn = _recv.Rest.CreateWebhookMessageSlack }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookToken, messageCreate, wait, threadID, opts...)
}

func (_recv *clientRest) _CreateWebhookMessageSlack_Do(fn func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessageSlack: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CreateWebhookMessageSlackMocks = []func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.CreateWebhookMessageSlackMocks) < 2 {
		_dat.CreateWebhookMessageSlackMocks = []func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.CreateWebhookMessageSlackMocks = _dat.CreateWebhookMessageSlackMocks[:len(_dat.CreateWebhookMessageSlackMocks)-1]
		_dat.CreateWebhookMessageSlackMocks = append(_dat.CreateWebhookMessageSlackMocks, fn)
		_dat.CreateWebhookMessageSlackMocks = append(_dat.CreateWebhookMessageSlackMocks, fn)
	}
}

func (_recv *clientRest) _CreateWebhookMessageSlack_Stub() {
	_recv._CreateWebhookMessageSlack_Do(func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateWebhookMessageSlack_Return(r0 *discord.Message, r1 error) {
	_recv._CreateWebhookMessageSlack_Do(func(snowflake.ID, string, discord.Payload, bool, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CreateWebhookMessageSlack_Calls() []_clientRest_CreateWebhookMessageSlack_Call {
	if _recv == nil {
		panic("clientRest.CreateWebhookMessageSlack: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CreateWebhookMessageSlackCalls
}

func (_recv *clientRest) CrosspostMessage(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.CrosspostMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.CrosspostMessageCalls = append(_dat.CrosspostMessageCalls, _clientRest_CrosspostMessage_Call{channelID, messageID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.CrosspostMessageMocks) > 0 {
		_fn = _dat.CrosspostMessageMocks[0]
		if len(_dat.CrosspostMessageMocks) > 1 {
			_dat.CrosspostMessageMocks = _dat.CrosspostMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.CrosspostMessage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, opts...)
}

func (_recv *clientRest) _CrosspostMessage_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.CrosspostMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.CrosspostMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.CrosspostMessageMocks) < 2 {
		_dat.CrosspostMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.CrosspostMessageMocks = _dat.CrosspostMessageMocks[:len(_dat.CrosspostMessageMocks)-1]
		_dat.CrosspostMessageMocks = append(_dat.CrosspostMessageMocks, fn)
		_dat.CrosspostMessageMocks = append(_dat.CrosspostMessageMocks, fn)
	}
}

func (_recv *clientRest) _CrosspostMessage_Stub() {
	_recv._CrosspostMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CrosspostMessage_Return(r0 *discord.Message, r1 error) {
	_recv._CrosspostMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _CrosspostMessage_Calls() []_clientRest_CrosspostMessage_Call {
	if _recv == nil {
		panic("clientRest.CrosspostMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.CrosspostMessageCalls
}

func (_recv *clientRest) DeleteApplicationEmoji(applicationID snowflake.ID, emojiID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteApplicationEmojiCalls = append(_dat.DeleteApplicationEmojiCalls, _clientRest_DeleteApplicationEmoji_Call{applicationID, emojiID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteApplicationEmojiMocks) > 0 {
		_fn = _dat.DeleteApplicationEmojiMocks[0]
		if len(_dat.DeleteApplicationEmojiMocks) > 1 {
			_dat.DeleteApplicationEmojiMocks = _dat.DeleteApplicationEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteApplicationEmoji }
	_dat.mutex.Unlock()
	return _fn(applicationID, emojiID, opts...)
}

func (_recv *clientRest) _DeleteApplicationEmoji_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteApplicationEmojiMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteApplicationEmojiMocks) < 2 {
		_dat.DeleteApplicationEmojiMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteApplicationEmojiMocks = _dat.DeleteApplicationEmojiMocks[:len(_dat.DeleteApplicationEmojiMocks)-1]
		_dat.DeleteApplicationEmojiMocks = append(_dat.DeleteApplicationEmojiMocks, fn)
		_dat.DeleteApplicationEmojiMocks = append(_dat.DeleteApplicationEmojiMocks, fn)
	}
}

func (_recv *clientRest) _DeleteApplicationEmoji_Stub() {
	_recv._DeleteApplicationEmoji_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteApplicationEmoji_Return(r0 error) {
	_recv._DeleteApplicationEmoji_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteApplicationEmoji_Calls() []_clientRest_DeleteApplicationEmoji_Call {
	if _recv == nil {
		panic("clientRest.DeleteApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteApplicationEmojiCalls
}

func (_recv *clientRest) DeleteAutoModerationRule(guildID snowflake.ID, ruleID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteAutoModerationRuleCalls = append(_dat.DeleteAutoModerationRuleCalls, _clientRest_DeleteAutoModerationRule_Call{guildID, ruleID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteAutoModerationRuleMocks) > 0 {
		_fn = _dat.DeleteAutoModerationRuleMocks[0]
		if len(_dat.DeleteAutoModerationRuleMocks) > 1 {
			_dat.DeleteAutoModerationRuleMocks = _dat.DeleteAutoModerationRuleMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteAutoModerationRule }
	_dat.mutex.Unlock()
	return _fn(guildID, ruleID, opts...)
}

func (_recv *clientRest) _DeleteAutoModerationRule_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteAutoModerationRuleMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteAutoModerationRuleMocks) < 2 {
		_dat.DeleteAutoModerationRuleMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteAutoModerationRuleMocks = _dat.DeleteAutoModerationRuleMocks[:len(_dat.DeleteAutoModerationRuleMocks)-1]
		_dat.DeleteAutoModerationRuleMocks = append(_dat.DeleteAutoModerationRuleMocks, fn)
		_dat.DeleteAutoModerationRuleMocks = append(_dat.DeleteAutoModerationRuleMocks, fn)
	}
}

func (_recv *clientRest) _DeleteAutoModerationRule_Stub() {
	_recv._DeleteAutoModerationRule_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteAutoModerationRule_Return(r0 error) {
	_recv._DeleteAutoModerationRule_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteAutoModerationRule_Calls() []_clientRest_DeleteAutoModerationRule_Call {
	if _recv == nil {
		panic("clientRest.DeleteAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteAutoModerationRuleCalls
}

func (_recv *clientRest) DeleteBan(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteBanCalls = append(_dat.DeleteBanCalls, _clientRest_DeleteBan_Call{guildID, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteBanMocks) > 0 {
		_fn = _dat.DeleteBanMocks[0]
		if len(_dat.DeleteBanMocks) > 1 {
			_dat.DeleteBanMocks = _dat.DeleteBanMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteBan }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, opts...)
}

func (_recv *clientRest) _DeleteBan_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteBanMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteBanMocks) < 2 {
		_dat.DeleteBanMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteBanMocks = _dat.DeleteBanMocks[:len(_dat.DeleteBanMocks)-1]
		_dat.DeleteBanMocks = append(_dat.DeleteBanMocks, fn)
		_dat.DeleteBanMocks = append(_dat.DeleteBanMocks, fn)
	}
}

func (_recv *clientRest) _DeleteBan_Stub() {
	_recv._DeleteBan_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteBan_Return(r0 error) {
	_recv._DeleteBan_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteBan_Calls() []_clientRest_DeleteBan_Call {
	if _recv == nil {
		panic("clientRest.DeleteBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteBanCalls
}

func (_recv *clientRest) DeleteChannel(channelID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteChannelCalls = append(_dat.DeleteChannelCalls, _clientRest_DeleteChannel_Call{channelID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteChannelMocks) > 0 {
		_fn = _dat.DeleteChannelMocks[0]
		if len(_dat.DeleteChannelMocks) > 1 {
			_dat.DeleteChannelMocks = _dat.DeleteChannelMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteChannel }
	_dat.mutex.Unlock()
	return _fn(channelID, opts...)
}

func (_recv *clientRest) _DeleteChannel_Do(fn func(snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteChannelMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteChannelMocks) < 2 {
		_dat.DeleteChannelMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteChannelMocks = _dat.DeleteChannelMocks[:len(_dat.DeleteChannelMocks)-1]
		_dat.DeleteChannelMocks = append(_dat.DeleteChannelMocks, fn)
		_dat.DeleteChannelMocks = append(_dat.DeleteChannelMocks, fn)
	}
}

func (_recv *clientRest) _DeleteChannel_Stub() {
	_recv._DeleteChannel_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteChannel_Return(r0 error) {
	_recv._DeleteChannel_Do(func(snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteChannel_Calls() []_clientRest_DeleteChannel_Call {
	if _recv == nil {
		panic("clientRest.DeleteChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteChannelCalls
}

func (_recv *clientRest) DeleteEmoji(guildID snowflake.ID, emojiID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteEmojiCalls = append(_dat.DeleteEmojiCalls, _clientRest_DeleteEmoji_Call{guildID, emojiID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteEmojiMocks) > 0 {
		_fn = _dat.DeleteEmojiMocks[0]
		if len(_dat.DeleteEmojiMocks) > 1 {
			_dat.DeleteEmojiMocks = _dat.DeleteEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteEmoji }
	_dat.mutex.Unlock()
	return _fn(guildID, emojiID, opts...)
}

func (_recv *clientRest) _DeleteEmoji_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteEmojiMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteEmojiMocks) < 2 {
		_dat.DeleteEmojiMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteEmojiMocks = _dat.DeleteEmojiMocks[:len(_dat.DeleteEmojiMocks)-1]
		_dat.DeleteEmojiMocks = append(_dat.DeleteEmojiMocks, fn)
		_dat.DeleteEmojiMocks = append(_dat.DeleteEmojiMocks, fn)
	}
}

func (_recv *clientRest) _DeleteEmoji_Stub() {
	_recv._DeleteEmoji_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteEmoji_Return(r0 error) {
	_recv._DeleteEmoji_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteEmoji_Calls() []_clientRest_DeleteEmoji_Call {
	if _recv == nil {
		panic("clientRest.DeleteEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteEmojiCalls
}

func (_recv *clientRest) DeleteFollowupMessage(applicationID snowflake.ID, interactionToken string, messageID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteFollowupMessageCalls = append(_dat.DeleteFollowupMessageCalls, _clientRest_DeleteFollowupMessage_Call{applicationID, interactionToken, messageID, opts})
	var _fn func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteFollowupMessageMocks) > 0 {
		_fn = _dat.DeleteFollowupMessageMocks[0]
		if len(_dat.DeleteFollowupMessageMocks) > 1 {
			_dat.DeleteFollowupMessageMocks = _dat.DeleteFollowupMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteFollowupMessage }
	_dat.mutex.Unlock()
	return _fn(applicationID, interactionToken, messageID, opts...)
}

func (_recv *clientRest) _DeleteFollowupMessage_Do(fn func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteFollowupMessageMocks = []func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteFollowupMessageMocks) < 2 {
		_dat.DeleteFollowupMessageMocks = []func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteFollowupMessageMocks = _dat.DeleteFollowupMessageMocks[:len(_dat.DeleteFollowupMessageMocks)-1]
		_dat.DeleteFollowupMessageMocks = append(_dat.DeleteFollowupMessageMocks, fn)
		_dat.DeleteFollowupMessageMocks = append(_dat.DeleteFollowupMessageMocks, fn)
	}
}

func (_recv *clientRest) _DeleteFollowupMessage_Stub() {
	_recv._DeleteFollowupMessage_Do(func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteFollowupMessage_Return(r0 error) {
	_recv._DeleteFollowupMessage_Do(func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteFollowupMessage_Calls() []_clientRest_DeleteFollowupMessage_Call {
	if _recv == nil {
		panic("clientRest.DeleteFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteFollowupMessageCalls
}

func (_recv *clientRest) DeleteGlobalCommand(applicationID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteGlobalCommandCalls = append(_dat.DeleteGlobalCommandCalls, _clientRest_DeleteGlobalCommand_Call{applicationID, commandID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteGlobalCommandMocks) > 0 {
		_fn = _dat.DeleteGlobalCommandMocks[0]
		if len(_dat.DeleteGlobalCommandMocks) > 1 {
			_dat.DeleteGlobalCommandMocks = _dat.DeleteGlobalCommandMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteGlobalCommand }
	_dat.mutex.Unlock()
	return _fn(applicationID, commandID, opts...)
}

func (_recv *clientRest) _DeleteGlobalCommand_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteGlobalCommandMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteGlobalCommandMocks) < 2 {
		_dat.DeleteGlobalCommandMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteGlobalCommandMocks = _dat.DeleteGlobalCommandMocks[:len(_dat.DeleteGlobalCommandMocks)-1]
		_dat.DeleteGlobalCommandMocks = append(_dat.DeleteGlobalCommandMocks, fn)
		_dat.DeleteGlobalCommandMocks = append(_dat.DeleteGlobalCommandMocks, fn)
	}
}

func (_recv *clientRest) _DeleteGlobalCommand_Stub() {
	_recv._DeleteGlobalCommand_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGlobalCommand_Return(r0 error) {
	_recv._DeleteGlobalCommand_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGlobalCommand_Calls() []_clientRest_DeleteGlobalCommand_Call {
	if _recv == nil {
		panic("clientRest.DeleteGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteGlobalCommandCalls
}

func (_recv *clientRest) DeleteGuild(guildID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteGuildCalls = append(_dat.DeleteGuildCalls, _clientRest_DeleteGuild_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteGuildMocks) > 0 {
		_fn = _dat.DeleteGuildMocks[0]
		if len(_dat.DeleteGuildMocks) > 1 {
			_dat.DeleteGuildMocks = _dat.DeleteGuildMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteGuild }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _DeleteGuild_Do(fn func(snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteGuildMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteGuildMocks) < 2 {
		_dat.DeleteGuildMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteGuildMocks = _dat.DeleteGuildMocks[:len(_dat.DeleteGuildMocks)-1]
		_dat.DeleteGuildMocks = append(_dat.DeleteGuildMocks, fn)
		_dat.DeleteGuildMocks = append(_dat.DeleteGuildMocks, fn)
	}
}

func (_recv *clientRest) _DeleteGuild_Stub() {
	_recv._DeleteGuild_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGuild_Return(r0 error) {
	_recv._DeleteGuild_Do(func(snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGuild_Calls() []_clientRest_DeleteGuild_Call {
	if _recv == nil {
		panic("clientRest.DeleteGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteGuildCalls
}

func (_recv *clientRest) DeleteGuildCommand(applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteGuildCommandCalls = append(_dat.DeleteGuildCommandCalls, _clientRest_DeleteGuildCommand_Call{applicationID, guildID, commandID, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteGuildCommandMocks) > 0 {
		_fn = _dat.DeleteGuildCommandMocks[0]
		if len(_dat.DeleteGuildCommandMocks) > 1 {
			_dat.DeleteGuildCommandMocks = _dat.DeleteGuildCommandMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteGuildCommand }
	_dat.mutex.Unlock()
	return _fn(applicationID, guildID, commandID, opts...)
}

func (_recv *clientRest) _DeleteGuildCommand_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteGuildCommandMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteGuildCommandMocks) < 2 {
		_dat.DeleteGuildCommandMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteGuildCommandMocks = _dat.DeleteGuildCommandMocks[:len(_dat.DeleteGuildCommandMocks)-1]
		_dat.DeleteGuildCommandMocks = append(_dat.DeleteGuildCommandMocks, fn)
		_dat.DeleteGuildCommandMocks = append(_dat.DeleteGuildCommandMocks, fn)
	}
}

func (_recv *clientRest) _DeleteGuildCommand_Stub() {
	_recv._DeleteGuildCommand_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGuildCommand_Return(r0 error) {
	_recv._DeleteGuildCommand_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGuildCommand_Calls() []_clientRest_DeleteGuildCommand_Call {
	if _recv == nil {
		panic("clientRest.DeleteGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteGuildCommandCalls
}

func (_recv *clientRest) DeleteGuildScheduledEvent(guildID snowflake.ID, guildScheduledEventID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteGuildScheduledEventCalls = append(_dat.DeleteGuildScheduledEventCalls, _clientRest_DeleteGuildScheduledEvent_Call{guildID, guildScheduledEventID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteGuildScheduledEventMocks) > 0 {
		_fn = _dat.DeleteGuildScheduledEventMocks[0]
		if len(_dat.DeleteGuildScheduledEventMocks) > 1 {
			_dat.DeleteGuildScheduledEventMocks = _dat.DeleteGuildScheduledEventMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteGuildScheduledEvent }
	_dat.mutex.Unlock()
	return _fn(guildID, guildScheduledEventID, opts...)
}

func (_recv *clientRest) _DeleteGuildScheduledEvent_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteGuildScheduledEventMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteGuildScheduledEventMocks) < 2 {
		_dat.DeleteGuildScheduledEventMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteGuildScheduledEventMocks = _dat.DeleteGuildScheduledEventMocks[:len(_dat.DeleteGuildScheduledEventMocks)-1]
		_dat.DeleteGuildScheduledEventMocks = append(_dat.DeleteGuildScheduledEventMocks, fn)
		_dat.DeleteGuildScheduledEventMocks = append(_dat.DeleteGuildScheduledEventMocks, fn)
	}
}

func (_recv *clientRest) _DeleteGuildScheduledEvent_Stub() {
	_recv._DeleteGuildScheduledEvent_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGuildScheduledEvent_Return(r0 error) {
	_recv._DeleteGuildScheduledEvent_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGuildScheduledEvent_Calls() []_clientRest_DeleteGuildScheduledEvent_Call {
	if _recv == nil {
		panic("clientRest.DeleteGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteGuildScheduledEventCalls
}

func (_recv *clientRest) DeleteGuildSoundboardSound(guildID snowflake.ID, soundID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteGuildSoundboardSoundCalls = append(_dat.DeleteGuildSoundboardSoundCalls, _clientRest_DeleteGuildSoundboardSound_Call{guildID, soundID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteGuildSoundboardSoundMocks) > 0 {
		_fn = _dat.DeleteGuildSoundboardSoundMocks[0]
		if len(_dat.DeleteGuildSoundboardSoundMocks) > 1 {
			_dat.DeleteGuildSoundboardSoundMocks = _dat.DeleteGuildSoundboardSoundMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteGuildSoundboardSound }
	_dat.mutex.Unlock()
	return _fn(guildID, soundID, opts...)
}

func (_recv *clientRest) _DeleteGuildSoundboardSound_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteGuildSoundboardSoundMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteGuildSoundboardSoundMocks) < 2 {
		_dat.DeleteGuildSoundboardSoundMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteGuildSoundboardSoundMocks = _dat.DeleteGuildSoundboardSoundMocks[:len(_dat.DeleteGuildSoundboardSoundMocks)-1]
		_dat.DeleteGuildSoundboardSoundMocks = append(_dat.DeleteGuildSoundboardSoundMocks, fn)
		_dat.DeleteGuildSoundboardSoundMocks = append(_dat.DeleteGuildSoundboardSoundMocks, fn)
	}
}

func (_recv *clientRest) _DeleteGuildSoundboardSound_Stub() {
	_recv._DeleteGuildSoundboardSound_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGuildSoundboardSound_Return(r0 error) {
	_recv._DeleteGuildSoundboardSound_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteGuildSoundboardSound_Calls() []_clientRest_DeleteGuildSoundboardSound_Call {
	if _recv == nil {
		panic("clientRest.DeleteGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteGuildSoundboardSoundCalls
}

func (_recv *clientRest) DeleteGuildTemplate(guildID snowflake.ID, templateCode string, opts ...rest.RequestOpt) (*discord.GuildTemplate, error) {
	if _recv == nil {
		panic("clientRest.DeleteGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteGuildTemplateCalls = append(_dat.DeleteGuildTemplateCalls, _clientRest_DeleteGuildTemplate_Call{guildID, templateCode, opts})
	var _fn func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error)
	if len(_dat.DeleteGuildTemplateMocks) > 0 {
		_fn = _dat.DeleteGuildTemplateMocks[0]
		if len(_dat.DeleteGuildTemplateMocks) > 1 {
			_dat.DeleteGuildTemplateMocks = _dat.DeleteGuildTemplateMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteGuildTemplate }
	_dat.mutex.Unlock()
	return _fn(guildID, templateCode, opts...)
}

func (_recv *clientRest) _DeleteGuildTemplate_Do(fn func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error)) {
	if _recv == nil {
		panic("clientRest.DeleteGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteGuildTemplateMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error){}
	} else if len(_dat.DeleteGuildTemplateMocks) < 2 {
		_dat.DeleteGuildTemplateMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error){fn, fn}
	} else {
		_dat.DeleteGuildTemplateMocks = _dat.DeleteGuildTemplateMocks[:len(_dat.DeleteGuildTemplateMocks)-1]
		_dat.DeleteGuildTemplateMocks = append(_dat.DeleteGuildTemplateMocks, fn)
		_dat.DeleteGuildTemplateMocks = append(_dat.DeleteGuildTemplateMocks, fn)
	}
}

func (_recv *clientRest) _DeleteGuildTemplate_Stub() {
	_recv._DeleteGuildTemplate_Do(func(snowflake.ID, string, ...rest.RequestOpt) (r0 *discord.GuildTemplate, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _DeleteGuildTemplate_Return(r0 *discord.GuildTemplate, r1 error) {
	_recv._DeleteGuildTemplate_Do(func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _DeleteGuildTemplate_Calls() []_clientRest_DeleteGuildTemplate_Call {
	if _recv == nil {
		panic("clientRest.DeleteGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteGuildTemplateCalls
}

func (_recv *clientRest) DeleteIntegration(guildID snowflake.ID, integrationID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteIntegration: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteIntegrationCalls = append(_dat.DeleteIntegrationCalls, _clientRest_DeleteIntegration_Call{guildID, integrationID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteIntegrationMocks) > 0 {
		_fn = _dat.DeleteIntegrationMocks[0]
		if len(_dat.DeleteIntegrationMocks) > 1 {
			_dat.DeleteIntegrationMocks = _dat.DeleteIntegrationMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteIntegration }
	_dat.mutex.Unlock()
	return _fn(guildID, integrationID, opts...)
}

func (_recv *clientRest) _DeleteIntegration_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteIntegration: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteIntegrationMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteIntegrationMocks) < 2 {
		_dat.DeleteIntegrationMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteIntegrationMocks = _dat.DeleteIntegrationMocks[:len(_dat.DeleteIntegrationMocks)-1]
		_dat.DeleteIntegrationMocks = append(_dat.DeleteIntegrationMocks, fn)
		_dat.DeleteIntegrationMocks = append(_dat.DeleteIntegrationMocks, fn)
	}
}

func (_recv *clientRest) _DeleteIntegration_Stub() {
	_recv._DeleteIntegration_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteIntegration_Return(r0 error) {
	_recv._DeleteIntegration_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteIntegration_Calls() []_clientRest_DeleteIntegration_Call {
	if _recv == nil {
		panic("clientRest.DeleteIntegration: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteIntegrationCalls
}

func (_recv *clientRest) DeleteInteractionResponse(applicationID snowflake.ID, interactionToken string, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteInteractionResponseCalls = append(_dat.DeleteInteractionResponseCalls, _clientRest_DeleteInteractionResponse_Call{applicationID, interactionToken, opts})
	var _fn func(snowflake.ID, string, ...rest.RequestOpt) (error)
	if len(_dat.DeleteInteractionResponseMocks) > 0 {
		_fn = _dat.DeleteInteractionResponseMocks[0]
		if len(_dat.DeleteInteractionResponseMocks) > 1 {
			_dat.DeleteInteractionResponseMocks = _dat.DeleteInteractionResponseMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteInteractionResponse }
	_dat.mutex.Unlock()
	return _fn(applicationID, interactionToken, opts...)
}

func (_recv *clientRest) _DeleteInteractionResponse_Do(fn func(snowflake.ID, string, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteInteractionResponseMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteInteractionResponseMocks) < 2 {
		_dat.DeleteInteractionResponseMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteInteractionResponseMocks = _dat.DeleteInteractionResponseMocks[:len(_dat.DeleteInteractionResponseMocks)-1]
		_dat.DeleteInteractionResponseMocks = append(_dat.DeleteInteractionResponseMocks, fn)
		_dat.DeleteInteractionResponseMocks = append(_dat.DeleteInteractionResponseMocks, fn)
	}
}

func (_recv *clientRest) _DeleteInteractionResponse_Stub() {
	_recv._DeleteInteractionResponse_Do(func(snowflake.ID, string, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteInteractionResponse_Return(r0 error) {
	_recv._DeleteInteractionResponse_Do(func(snowflake.ID, string, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteInteractionResponse_Calls() []_clientRest_DeleteInteractionResponse_Call {
	if _recv == nil {
		panic("clientRest.DeleteInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteInteractionResponseCalls
}

func (_recv *clientRest) DeleteInvite(code string, opts ...rest.RequestOpt) (*discord.Invite, error) {
	if _recv == nil {
		panic("clientRest.DeleteInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteInviteCalls = append(_dat.DeleteInviteCalls, _clientRest_DeleteInvite_Call{code, opts})
	var _fn func(string, ...rest.RequestOpt) (*discord.Invite, error)
	if len(_dat.DeleteInviteMocks) > 0 {
		_fn = _dat.DeleteInviteMocks[0]
		if len(_dat.DeleteInviteMocks) > 1 {
			_dat.DeleteInviteMocks = _dat.DeleteInviteMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteInvite }
	_dat.mutex.Unlock()
	return _fn(code, opts...)
}

func (_recv *clientRest) _DeleteInvite_Do(fn func(string, ...rest.RequestOpt) (*discord.Invite, error)) {
	if _recv == nil {
		panic("clientRest.DeleteInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteInviteMocks = []func(string, ...rest.RequestOpt) (*discord.Invite, error){}
	} else if len(_dat.DeleteInviteMocks) < 2 {
		_dat.DeleteInviteMocks = []func(string, ...rest.RequestOpt) (*discord.Invite, error){fn, fn}
	} else {
		_dat.DeleteInviteMocks = _dat.DeleteInviteMocks[:len(_dat.DeleteInviteMocks)-1]
		_dat.DeleteInviteMocks = append(_dat.DeleteInviteMocks, fn)
		_dat.DeleteInviteMocks = append(_dat.DeleteInviteMocks, fn)
	}
}

func (_recv *clientRest) _DeleteInvite_Stub() {
	_recv._DeleteInvite_Do(func(string, ...rest.RequestOpt) (r0 *discord.Invite, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _DeleteInvite_Return(r0 *discord.Invite, r1 error) {
	_recv._DeleteInvite_Do(func(string, ...rest.RequestOpt) (*discord.Invite, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _DeleteInvite_Calls() []_clientRest_DeleteInvite_Call {
	if _recv == nil {
		panic("clientRest.DeleteInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteInviteCalls
}

func (_recv *clientRest) DeleteMessage(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteMessageCalls = append(_dat.DeleteMessageCalls, _clientRest_DeleteMessage_Call{channelID, messageID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteMessageMocks) > 0 {
		_fn = _dat.DeleteMessageMocks[0]
		if len(_dat.DeleteMessageMocks) > 1 {
			_dat.DeleteMessageMocks = _dat.DeleteMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteMessage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, opts...)
}

func (_recv *clientRest) _DeleteMessage_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteMessageMocks) < 2 {
		_dat.DeleteMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteMessageMocks = _dat.DeleteMessageMocks[:len(_dat.DeleteMessageMocks)-1]
		_dat.DeleteMessageMocks = append(_dat.DeleteMessageMocks, fn)
		_dat.DeleteMessageMocks = append(_dat.DeleteMessageMocks, fn)
	}
}

func (_recv *clientRest) _DeleteMessage_Stub() {
	_recv._DeleteMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteMessage_Return(r0 error) {
	_recv._DeleteMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteMessage_Calls() []_clientRest_DeleteMessage_Call {
	if _recv == nil {
		panic("clientRest.DeleteMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteMessageCalls
}

func (_recv *clientRest) DeletePermissionOverwrite(channelID snowflake.ID, overwriteID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeletePermissionOverwrite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeletePermissionOverwriteCalls = append(_dat.DeletePermissionOverwriteCalls, _clientRest_DeletePermissionOverwrite_Call{channelID, overwriteID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeletePermissionOverwriteMocks) > 0 {
		_fn = _dat.DeletePermissionOverwriteMocks[0]
		if len(_dat.DeletePermissionOverwriteMocks) > 1 {
			_dat.DeletePermissionOverwriteMocks = _dat.DeletePermissionOverwriteMocks[1:]
		}
	} else { _fn = _recv.Rest.DeletePermissionOverwrite }
	_dat.mutex.Unlock()
	return _fn(channelID, overwriteID, opts...)
}

func (_recv *clientRest) _DeletePermissionOverwrite_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeletePermissionOverwrite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeletePermissionOverwriteMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeletePermissionOverwriteMocks) < 2 {
		_dat.DeletePermissionOverwriteMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeletePermissionOverwriteMocks = _dat.DeletePermissionOverwriteMocks[:len(_dat.DeletePermissionOverwriteMocks)-1]
		_dat.DeletePermissionOverwriteMocks = append(_dat.DeletePermissionOverwriteMocks, fn)
		_dat.DeletePermissionOverwriteMocks = append(_dat.DeletePermissionOverwriteMocks, fn)
	}
}

func (_recv *clientRest) _DeletePermissionOverwrite_Stub() {
	_recv._DeletePermissionOverwrite_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeletePermissionOverwrite_Return(r0 error) {
	_recv._DeletePermissionOverwrite_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeletePermissionOverwrite_Calls() []_clientRest_DeletePermissionOverwrite_Call {
	if _recv == nil {
		panic("clientRest.DeletePermissionOverwrite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeletePermissionOverwriteCalls
}

func (_recv *clientRest) DeleteRole(guildID snowflake.ID, roleID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteRoleCalls = append(_dat.DeleteRoleCalls, _clientRest_DeleteRole_Call{guildID, roleID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteRoleMocks) > 0 {
		_fn = _dat.DeleteRoleMocks[0]
		if len(_dat.DeleteRoleMocks) > 1 {
			_dat.DeleteRoleMocks = _dat.DeleteRoleMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteRole }
	_dat.mutex.Unlock()
	return _fn(guildID, roleID, opts...)
}

func (_recv *clientRest) _DeleteRole_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteRoleMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteRoleMocks) < 2 {
		_dat.DeleteRoleMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteRoleMocks = _dat.DeleteRoleMocks[:len(_dat.DeleteRoleMocks)-1]
		_dat.DeleteRoleMocks = append(_dat.DeleteRoleMocks, fn)
		_dat.DeleteRoleMocks = append(_dat.DeleteRoleMocks, fn)
	}
}

func (_recv *clientRest) _DeleteRole_Stub() {
	_recv._DeleteRole_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteRole_Return(r0 error) {
	_recv._DeleteRole_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteRole_Calls() []_clientRest_DeleteRole_Call {
	if _recv == nil {
		panic("clientRest.DeleteRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteRoleCalls
}

func (_recv *clientRest) DeleteStageInstance(channelID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteStageInstanceCalls = append(_dat.DeleteStageInstanceCalls, _clientRest_DeleteStageInstance_Call{channelID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteStageInstanceMocks) > 0 {
		_fn = _dat.DeleteStageInstanceMocks[0]
		if len(_dat.DeleteStageInstanceMocks) > 1 {
			_dat.DeleteStageInstanceMocks = _dat.DeleteStageInstanceMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteStageInstance }
	_dat.mutex.Unlock()
	return _fn(channelID, opts...)
}

func (_recv *clientRest) _DeleteStageInstance_Do(fn func(snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteStageInstanceMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteStageInstanceMocks) < 2 {
		_dat.DeleteStageInstanceMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteStageInstanceMocks = _dat.DeleteStageInstanceMocks[:len(_dat.DeleteStageInstanceMocks)-1]
		_dat.DeleteStageInstanceMocks = append(_dat.DeleteStageInstanceMocks, fn)
		_dat.DeleteStageInstanceMocks = append(_dat.DeleteStageInstanceMocks, fn)
	}
}

func (_recv *clientRest) _DeleteStageInstance_Stub() {
	_recv._DeleteStageInstance_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteStageInstance_Return(r0 error) {
	_recv._DeleteStageInstance_Do(func(snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteStageInstance_Calls() []_clientRest_DeleteStageInstance_Call {
	if _recv == nil {
		panic("clientRest.DeleteStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteStageInstanceCalls
}

func (_recv *clientRest) DeleteSticker(guildID snowflake.ID, stickerID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteStickerCalls = append(_dat.DeleteStickerCalls, _clientRest_DeleteSticker_Call{guildID, stickerID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteStickerMocks) > 0 {
		_fn = _dat.DeleteStickerMocks[0]
		if len(_dat.DeleteStickerMocks) > 1 {
			_dat.DeleteStickerMocks = _dat.DeleteStickerMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteSticker }
	_dat.mutex.Unlock()
	return _fn(guildID, stickerID, opts...)
}

func (_recv *clientRest) _DeleteSticker_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteStickerMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteStickerMocks) < 2 {
		_dat.DeleteStickerMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteStickerMocks = _dat.DeleteStickerMocks[:len(_dat.DeleteStickerMocks)-1]
		_dat.DeleteStickerMocks = append(_dat.DeleteStickerMocks, fn)
		_dat.DeleteStickerMocks = append(_dat.DeleteStickerMocks, fn)
	}
}

func (_recv *clientRest) _DeleteSticker_Stub() {
	_recv._DeleteSticker_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteSticker_Return(r0 error) {
	_recv._DeleteSticker_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteSticker_Calls() []_clientRest_DeleteSticker_Call {
	if _recv == nil {
		panic("clientRest.DeleteSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteStickerCalls
}

func (_recv *clientRest) DeleteTestEntitlement(applicationID snowflake.ID, entitlementID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteTestEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteTestEntitlementCalls = append(_dat.DeleteTestEntitlementCalls, _clientRest_DeleteTestEntitlement_Call{applicationID, entitlementID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteTestEntitlementMocks) > 0 {
		_fn = _dat.DeleteTestEntitlementMocks[0]
		if len(_dat.DeleteTestEntitlementMocks) > 1 {
			_dat.DeleteTestEntitlementMocks = _dat.DeleteTestEntitlementMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteTestEntitlement }
	_dat.mutex.Unlock()
	return _fn(applicationID, entitlementID, opts...)
}

func (_recv *clientRest) _DeleteTestEntitlement_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteTestEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteTestEntitlementMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteTestEntitlementMocks) < 2 {
		_dat.DeleteTestEntitlementMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteTestEntitlementMocks = _dat.DeleteTestEntitlementMocks[:len(_dat.DeleteTestEntitlementMocks)-1]
		_dat.DeleteTestEntitlementMocks = append(_dat.DeleteTestEntitlementMocks, fn)
		_dat.DeleteTestEntitlementMocks = append(_dat.DeleteTestEntitlementMocks, fn)
	}
}

func (_recv *clientRest) _DeleteTestEntitlement_Stub() {
	_recv._DeleteTestEntitlement_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteTestEntitlement_Return(r0 error) {
	_recv._DeleteTestEntitlement_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteTestEntitlement_Calls() []_clientRest_DeleteTestEntitlement_Call {
	if _recv == nil {
		panic("clientRest.DeleteTestEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteTestEntitlementCalls
}

func (_recv *clientRest) DeleteWebhook(webhookID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteWebhookCalls = append(_dat.DeleteWebhookCalls, _clientRest_DeleteWebhook_Call{webhookID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteWebhookMocks) > 0 {
		_fn = _dat.DeleteWebhookMocks[0]
		if len(_dat.DeleteWebhookMocks) > 1 {
			_dat.DeleteWebhookMocks = _dat.DeleteWebhookMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteWebhook }
	_dat.mutex.Unlock()
	return _fn(webhookID, opts...)
}

func (_recv *clientRest) _DeleteWebhook_Do(fn func(snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteWebhookMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteWebhookMocks) < 2 {
		_dat.DeleteWebhookMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteWebhookMocks = _dat.DeleteWebhookMocks[:len(_dat.DeleteWebhookMocks)-1]
		_dat.DeleteWebhookMocks = append(_dat.DeleteWebhookMocks, fn)
		_dat.DeleteWebhookMocks = append(_dat.DeleteWebhookMocks, fn)
	}
}

func (_recv *clientRest) _DeleteWebhook_Stub() {
	_recv._DeleteWebhook_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteWebhook_Return(r0 error) {
	_recv._DeleteWebhook_Do(func(snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteWebhook_Calls() []_clientRest_DeleteWebhook_Call {
	if _recv == nil {
		panic("clientRest.DeleteWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteWebhookCalls
}

func (_recv *clientRest) DeleteWebhookMessage(webhookID snowflake.ID, webhookToken string, messageID snowflake.ID, threadID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteWebhookMessageCalls = append(_dat.DeleteWebhookMessageCalls, _clientRest_DeleteWebhookMessage_Call{webhookID, webhookToken, messageID, threadID, opts})
	var _fn func(snowflake.ID, string, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.DeleteWebhookMessageMocks) > 0 {
		_fn = _dat.DeleteWebhookMessageMocks[0]
		if len(_dat.DeleteWebhookMessageMocks) > 1 {
			_dat.DeleteWebhookMessageMocks = _dat.DeleteWebhookMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteWebhookMessage }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookToken, messageID, threadID, opts...)
}

func (_recv *clientRest) _DeleteWebhookMessage_Do(fn func(snowflake.ID, string, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteWebhookMessageMocks = []func(snowflake.ID, string, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteWebhookMessageMocks) < 2 {
		_dat.DeleteWebhookMessageMocks = []func(snowflake.ID, string, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteWebhookMessageMocks = _dat.DeleteWebhookMessageMocks[:len(_dat.DeleteWebhookMessageMocks)-1]
		_dat.DeleteWebhookMessageMocks = append(_dat.DeleteWebhookMessageMocks, fn)
		_dat.DeleteWebhookMessageMocks = append(_dat.DeleteWebhookMessageMocks, fn)
	}
}

func (_recv *clientRest) _DeleteWebhookMessage_Stub() {
	_recv._DeleteWebhookMessage_Do(func(snowflake.ID, string, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteWebhookMessage_Return(r0 error) {
	_recv._DeleteWebhookMessage_Do(func(snowflake.ID, string, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteWebhookMessage_Calls() []_clientRest_DeleteWebhookMessage_Call {
	if _recv == nil {
		panic("clientRest.DeleteWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteWebhookMessageCalls
}

func (_recv *clientRest) DeleteWebhookWithToken(webhookID snowflake.ID, webhookToken string, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.DeleteWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DeleteWebhookWithTokenCalls = append(_dat.DeleteWebhookWithTokenCalls, _clientRest_DeleteWebhookWithToken_Call{webhookID, webhookToken, opts})
	var _fn func(snowflake.ID, string, ...rest.RequestOpt) (error)
	if len(_dat.DeleteWebhookWithTokenMocks) > 0 {
		_fn = _dat.DeleteWebhookWithTokenMocks[0]
		if len(_dat.DeleteWebhookWithTokenMocks) > 1 {
			_dat.DeleteWebhookWithTokenMocks = _dat.DeleteWebhookWithTokenMocks[1:]
		}
	} else { _fn = _recv.Rest.DeleteWebhookWithToken }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookToken, opts...)
}

func (_recv *clientRest) _DeleteWebhookWithToken_Do(fn func(snowflake.ID, string, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.DeleteWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DeleteWebhookWithTokenMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (error){}
	} else if len(_dat.DeleteWebhookWithTokenMocks) < 2 {
		_dat.DeleteWebhookWithTokenMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DeleteWebhookWithTokenMocks = _dat.DeleteWebhookWithTokenMocks[:len(_dat.DeleteWebhookWithTokenMocks)-1]
		_dat.DeleteWebhookWithTokenMocks = append(_dat.DeleteWebhookWithTokenMocks, fn)
		_dat.DeleteWebhookWithTokenMocks = append(_dat.DeleteWebhookWithTokenMocks, fn)
	}
}

func (_recv *clientRest) _DeleteWebhookWithToken_Stub() {
	_recv._DeleteWebhookWithToken_Do(func(snowflake.ID, string, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteWebhookWithToken_Return(r0 error) {
	_recv._DeleteWebhookWithToken_Do(func(snowflake.ID, string, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _DeleteWebhookWithToken_Calls() []_clientRest_DeleteWebhookWithToken_Call {
	if _recv == nil {
		panic("clientRest.DeleteWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DeleteWebhookWithTokenCalls
}

func (_recv *clientRest) Do(endpoint *rest.CompiledEndpoint, rqBody any, rsBody any, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.Do: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.DoCalls = append(_dat.DoCalls, _clientRest_Do_Call{endpoint, rqBody, rsBody, opts})
	var _fn func(*rest.CompiledEndpoint, any, any, ...rest.RequestOpt) (error)
	if len(_dat.DoMocks) > 0 {
		_fn = _dat.DoMocks[0]
		if len(_dat.DoMocks) > 1 {
			_dat.DoMocks = _dat.DoMocks[1:]
		}
	} else { _fn = _recv.Rest.Do }
	_dat.mutex.Unlock()
	return _fn(endpoint, rqBody, rsBody, opts...)
}

func (_recv *clientRest) _Do_Do(fn func(*rest.CompiledEndpoint, any, any, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.Do: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.DoMocks = []func(*rest.CompiledEndpoint, any, any, ...rest.RequestOpt) (error){}
	} else if len(_dat.DoMocks) < 2 {
		_dat.DoMocks = []func(*rest.CompiledEndpoint, any, any, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.DoMocks = _dat.DoMocks[:len(_dat.DoMocks)-1]
		_dat.DoMocks = append(_dat.DoMocks, fn)
		_dat.DoMocks = append(_dat.DoMocks, fn)
	}
}

func (_recv *clientRest) _Do_Stub() {
	_recv._Do_Do(func(*rest.CompiledEndpoint, any, any, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _Do_Return(r0 error) {
	_recv._Do_Do(func(*rest.CompiledEndpoint, any, any, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _Do_Calls() []_clientRest_Do_Call {
	if _recv == nil {
		panic("clientRest.Do: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.DoCalls
}

func (_recv *clientRest) ExpirePoll(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.ExpirePoll: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.ExpirePollCalls = append(_dat.ExpirePollCalls, _clientRest_ExpirePoll_Call{channelID, messageID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.ExpirePollMocks) > 0 {
		_fn = _dat.ExpirePollMocks[0]
		if len(_dat.ExpirePollMocks) > 1 {
			_dat.ExpirePollMocks = _dat.ExpirePollMocks[1:]
		}
	} else { _fn = _recv.Rest.ExpirePoll }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, opts...)
}

func (_recv *clientRest) _ExpirePoll_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.ExpirePoll: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.ExpirePollMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.ExpirePollMocks) < 2 {
		_dat.ExpirePollMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.ExpirePollMocks = _dat.ExpirePollMocks[:len(_dat.ExpirePollMocks)-1]
		_dat.ExpirePollMocks = append(_dat.ExpirePollMocks, fn)
		_dat.ExpirePollMocks = append(_dat.ExpirePollMocks, fn)
	}
}

func (_recv *clientRest) _ExpirePoll_Stub() {
	_recv._ExpirePoll_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _ExpirePoll_Return(r0 *discord.Message, r1 error) {
	_recv._ExpirePoll_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _ExpirePoll_Calls() []_clientRest_ExpirePoll_Call {
	if _recv == nil {
		panic("clientRest.ExpirePoll: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.ExpirePollCalls
}

func (_recv *clientRest) Follow(channelID snowflake.ID, targetChannelID snowflake.ID, opts ...rest.RequestOpt) (*discord.FollowedChannel, error) {
	if _recv == nil {
		panic("clientRest.Follow: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.FollowCalls = append(_dat.FollowCalls, _clientRest_Follow_Call{channelID, targetChannelID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.FollowedChannel, error)
	if len(_dat.FollowMocks) > 0 {
		_fn = _dat.FollowMocks[0]
		if len(_dat.FollowMocks) > 1 {
			_dat.FollowMocks = _dat.FollowMocks[1:]
		}
	} else { _fn = _recv.Rest.Follow }
	_dat.mutex.Unlock()
	return _fn(channelID, targetChannelID, opts...)
}

func (_recv *clientRest) _Follow_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.FollowedChannel, error)) {
	if _recv == nil {
		panic("clientRest.Follow: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.FollowMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.FollowedChannel, error){}
	} else if len(_dat.FollowMocks) < 2 {
		_dat.FollowMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.FollowedChannel, error){fn, fn}
	} else {
		_dat.FollowMocks = _dat.FollowMocks[:len(_dat.FollowMocks)-1]
		_dat.FollowMocks = append(_dat.FollowMocks, fn)
		_dat.FollowMocks = append(_dat.FollowMocks, fn)
	}
}

func (_recv *clientRest) _Follow_Stub() {
	_recv._Follow_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.FollowedChannel, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _Follow_Return(r0 *discord.FollowedChannel, r1 error) {
	_recv._Follow_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.FollowedChannel, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _Follow_Calls() []_clientRest_Follow_Call {
	if _recv == nil {
		panic("clientRest.Follow: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.FollowCalls
}

func (_recv *clientRest) GetAccessToken(clientID snowflake.ID, clientSecret string, code string, redirectURI string, opts ...rest.RequestOpt) (*discord.AccessTokenResponse, error) {
	if _recv == nil {
		panic("clientRest.GetAccessToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetAccessTokenCalls = append(_dat.GetAccessTokenCalls, _clientRest_GetAccessToken_Call{clientID, clientSecret, code, redirectURI, opts})
	var _fn func(snowflake.ID, string, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error)
	if len(_dat.GetAccessTokenMocks) > 0 {
		_fn = _dat.GetAccessTokenMocks[0]
		if len(_dat.GetAccessTokenMocks) > 1 {
			_dat.GetAccessTokenMocks = _dat.GetAccessTokenMocks[1:]
		}
	} else { _fn = _recv.Rest.GetAccessToken }
	_dat.mutex.Unlock()
	return _fn(clientID, clientSecret, code, redirectURI, opts...)
}

func (_recv *clientRest) _GetAccessToken_Do(fn func(snowflake.ID, string, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error)) {
	if _recv == nil {
		panic("clientRest.GetAccessToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetAccessTokenMocks = []func(snowflake.ID, string, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error){}
	} else if len(_dat.GetAccessTokenMocks) < 2 {
		_dat.GetAccessTokenMocks = []func(snowflake.ID, string, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error){fn, fn}
	} else {
		_dat.GetAccessTokenMocks = _dat.GetAccessTokenMocks[:len(_dat.GetAccessTokenMocks)-1]
		_dat.GetAccessTokenMocks = append(_dat.GetAccessTokenMocks, fn)
		_dat.GetAccessTokenMocks = append(_dat.GetAccessTokenMocks, fn)
	}
}

func (_recv *clientRest) _GetAccessToken_Stub() {
	_recv._GetAccessToken_Do(func(snowflake.ID, string, string, string, ...rest.RequestOpt) (r0 *discord.AccessTokenResponse, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAccessToken_Return(r0 *discord.AccessTokenResponse, r1 error) {
	_recv._GetAccessToken_Do(func(snowflake.ID, string, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAccessToken_Calls() []_clientRest_GetAccessToken_Call {
	if _recv == nil {
		panic("clientRest.GetAccessToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetAccessTokenCalls
}

func (_recv *clientRest) GetActiveGuildThreads(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildActiveThreads, error) {
	if _recv == nil {
		panic("clientRest.GetActiveGuildThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetActiveGuildThreadsCalls = append(_dat.GetActiveGuildThreadsCalls, _clientRest_GetActiveGuildThreads_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildActiveThreads, error)
	if len(_dat.GetActiveGuildThreadsMocks) > 0 {
		_fn = _dat.GetActiveGuildThreadsMocks[0]
		if len(_dat.GetActiveGuildThreadsMocks) > 1 {
			_dat.GetActiveGuildThreadsMocks = _dat.GetActiveGuildThreadsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetActiveGuildThreads }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetActiveGuildThreads_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildActiveThreads, error)) {
	if _recv == nil {
		panic("clientRest.GetActiveGuildThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetActiveGuildThreadsMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildActiveThreads, error){}
	} else if len(_dat.GetActiveGuildThreadsMocks) < 2 {
		_dat.GetActiveGuildThreadsMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildActiveThreads, error){fn, fn}
	} else {
		_dat.GetActiveGuildThreadsMocks = _dat.GetActiveGuildThreadsMocks[:len(_dat.GetActiveGuildThreadsMocks)-1]
		_dat.GetActiveGuildThreadsMocks = append(_dat.GetActiveGuildThreadsMocks, fn)
		_dat.GetActiveGuildThreadsMocks = append(_dat.GetActiveGuildThreadsMocks, fn)
	}
}

func (_recv *clientRest) _GetActiveGuildThreads_Stub() {
	_recv._GetActiveGuildThreads_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.GuildActiveThreads, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetActiveGuildThreads_Return(r0 *discord.GuildActiveThreads, r1 error) {
	_recv._GetActiveGuildThreads_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildActiveThreads, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetActiveGuildThreads_Calls() []_clientRest_GetActiveGuildThreads_Call {
	if _recv == nil {
		panic("clientRest.GetActiveGuildThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetActiveGuildThreadsCalls
}

func (_recv *clientRest) GetActivityInstance(applicationID snowflake.ID, instanceID string, opts ...rest.RequestOpt) (*discord.ActivityInstance, error) {
	if _recv == nil {
		panic("clientRest.GetActivityInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetActivityInstanceCalls = append(_dat.GetActivityInstanceCalls, _clientRest_GetActivityInstance_Call{applicationID, instanceID, opts})
	var _fn func(snowflake.ID, string, ...rest.RequestOpt) (*discord.ActivityInstance, error)
	if len(_dat.GetActivityInstanceMocks) > 0 {
		_fn = _dat.GetActivityInstanceMocks[0]
		if len(_dat.GetActivityInstanceMocks) > 1 {
			_dat.GetActivityInstanceMocks = _dat.GetActivityInstanceMocks[1:]
		}
	} else { _fn = _recv.Rest.GetActivityInstance }
	_dat.mutex.Unlock()
	return _fn(applicationID, instanceID, opts...)
}

func (_recv *clientRest) _GetActivityInstance_Do(fn func(snowflake.ID, string, ...rest.RequestOpt) (*discord.ActivityInstance, error)) {
	if _recv == nil {
		panic("clientRest.GetActivityInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetActivityInstanceMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*discord.ActivityInstance, error){}
	} else if len(_dat.GetActivityInstanceMocks) < 2 {
		_dat.GetActivityInstanceMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*discord.ActivityInstance, error){fn, fn}
	} else {
		_dat.GetActivityInstanceMocks = _dat.GetActivityInstanceMocks[:len(_dat.GetActivityInstanceMocks)-1]
		_dat.GetActivityInstanceMocks = append(_dat.GetActivityInstanceMocks, fn)
		_dat.GetActivityInstanceMocks = append(_dat.GetActivityInstanceMocks, fn)
	}
}

func (_recv *clientRest) _GetActivityInstance_Stub() {
	_recv._GetActivityInstance_Do(func(snowflake.ID, string, ...rest.RequestOpt) (r0 *discord.ActivityInstance, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetActivityInstance_Return(r0 *discord.ActivityInstance, r1 error) {
	_recv._GetActivityInstance_Do(func(snowflake.ID, string, ...rest.RequestOpt) (*discord.ActivityInstance, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetActivityInstance_Calls() []_clientRest_GetActivityInstance_Call {
	if _recv == nil {
		panic("clientRest.GetActivityInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetActivityInstanceCalls
}

func (_recv *clientRest) GetAllWebhooks(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Webhook, error) {
	if _recv == nil {
		panic("clientRest.GetAllWebhooks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetAllWebhooksCalls = append(_dat.GetAllWebhooksCalls, _clientRest_GetAllWebhooks_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error)
	if len(_dat.GetAllWebhooksMocks) > 0 {
		_fn = _dat.GetAllWebhooksMocks[0]
		if len(_dat.GetAllWebhooksMocks) > 1 {
			_dat.GetAllWebhooksMocks = _dat.GetAllWebhooksMocks[1:]
		}
	} else { _fn = _recv.Rest.GetAllWebhooks }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetAllWebhooks_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error)) {
	if _recv == nil {
		panic("clientRest.GetAllWebhooks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetAllWebhooksMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error){}
	} else if len(_dat.GetAllWebhooksMocks) < 2 {
		_dat.GetAllWebhooksMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error){fn, fn}
	} else {
		_dat.GetAllWebhooksMocks = _dat.GetAllWebhooksMocks[:len(_dat.GetAllWebhooksMocks)-1]
		_dat.GetAllWebhooksMocks = append(_dat.GetAllWebhooksMocks, fn)
		_dat.GetAllWebhooksMocks = append(_dat.GetAllWebhooksMocks, fn)
	}
}

func (_recv *clientRest) _GetAllWebhooks_Stub() {
	_recv._GetAllWebhooks_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.Webhook, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAllWebhooks_Return(r0 []discord.Webhook, r1 error) {
	_recv._GetAllWebhooks_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAllWebhooks_Calls() []_clientRest_GetAllWebhooks_Call {
	if _recv == nil {
		panic("clientRest.GetAllWebhooks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetAllWebhooksCalls
}

func (_recv *clientRest) GetApplicationEmoji(applicationID snowflake.ID, emojiID snowflake.ID, opts ...rest.RequestOpt) (*discord.Emoji, error) {
	if _recv == nil {
		panic("clientRest.GetApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetApplicationEmojiCalls = append(_dat.GetApplicationEmojiCalls, _clientRest_GetApplicationEmoji_Call{applicationID, emojiID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error)
	if len(_dat.GetApplicationEmojiMocks) > 0 {
		_fn = _dat.GetApplicationEmojiMocks[0]
		if len(_dat.GetApplicationEmojiMocks) > 1 {
			_dat.GetApplicationEmojiMocks = _dat.GetApplicationEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.GetApplicationEmoji }
	_dat.mutex.Unlock()
	return _fn(applicationID, emojiID, opts...)
}

func (_recv *clientRest) _GetApplicationEmoji_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error)) {
	if _recv == nil {
		panic("clientRest.GetApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetApplicationEmojiMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error){}
	} else if len(_dat.GetApplicationEmojiMocks) < 2 {
		_dat.GetApplicationEmojiMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error){fn, fn}
	} else {
		_dat.GetApplicationEmojiMocks = _dat.GetApplicationEmojiMocks[:len(_dat.GetApplicationEmojiMocks)-1]
		_dat.GetApplicationEmojiMocks = append(_dat.GetApplicationEmojiMocks, fn)
		_dat.GetApplicationEmojiMocks = append(_dat.GetApplicationEmojiMocks, fn)
	}
}

func (_recv *clientRest) _GetApplicationEmoji_Stub() {
	_recv._GetApplicationEmoji_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Emoji, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetApplicationEmoji_Return(r0 *discord.Emoji, r1 error) {
	_recv._GetApplicationEmoji_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetApplicationEmoji_Calls() []_clientRest_GetApplicationEmoji_Call {
	if _recv == nil {
		panic("clientRest.GetApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetApplicationEmojiCalls
}

func (_recv *clientRest) GetApplicationEmojis(applicationID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Emoji, error) {
	if _recv == nil {
		panic("clientRest.GetApplicationEmojis: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetApplicationEmojisCalls = append(_dat.GetApplicationEmojisCalls, _clientRest_GetApplicationEmojis_Call{applicationID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error)
	if len(_dat.GetApplicationEmojisMocks) > 0 {
		_fn = _dat.GetApplicationEmojisMocks[0]
		if len(_dat.GetApplicationEmojisMocks) > 1 {
			_dat.GetApplicationEmojisMocks = _dat.GetApplicationEmojisMocks[1:]
		}
	} else { _fn = _recv.Rest.GetApplicationEmojis }
	_dat.mutex.Unlock()
	return _fn(applicationID, opts...)
}

func (_recv *clientRest) _GetApplicationEmojis_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error)) {
	if _recv == nil {
		panic("clientRest.GetApplicationEmojis: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetApplicationEmojisMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error){}
	} else if len(_dat.GetApplicationEmojisMocks) < 2 {
		_dat.GetApplicationEmojisMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error){fn, fn}
	} else {
		_dat.GetApplicationEmojisMocks = _dat.GetApplicationEmojisMocks[:len(_dat.GetApplicationEmojisMocks)-1]
		_dat.GetApplicationEmojisMocks = append(_dat.GetApplicationEmojisMocks, fn)
		_dat.GetApplicationEmojisMocks = append(_dat.GetApplicationEmojisMocks, fn)
	}
}

func (_recv *clientRest) _GetApplicationEmojis_Stub() {
	_recv._GetApplicationEmojis_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.Emoji, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetApplicationEmojis_Return(r0 []discord.Emoji, r1 error) {
	_recv._GetApplicationEmojis_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetApplicationEmojis_Calls() []_clientRest_GetApplicationEmojis_Call {
	if _recv == nil {
		panic("clientRest.GetApplicationEmojis: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetApplicationEmojisCalls
}

func (_recv *clientRest) GetApplicationRoleConnectionMetadata(applicationID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error) {
	if _recv == nil {
		panic("clientRest.GetApplicationRoleConnectionMetadata: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetApplicationRoleConnectionMetadataCalls = append(_dat.GetApplicationRoleConnectionMetadataCalls, _clientRest_GetApplicationRoleConnectionMetadata_Call{applicationID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error)
	if len(_dat.GetApplicationRoleConnectionMetadataMocks) > 0 {
		_fn = _dat.GetApplicationRoleConnectionMetadataMocks[0]
		if len(_dat.GetApplicationRoleConnectionMetadataMocks) > 1 {
			_dat.GetApplicationRoleConnectionMetadataMocks = _dat.GetApplicationRoleConnectionMetadataMocks[1:]
		}
	} else { _fn = _recv.Rest.GetApplicationRoleConnectionMetadata }
	_dat.mutex.Unlock()
	return _fn(applicationID, opts...)
}

func (_recv *clientRest) _GetApplicationRoleConnectionMetadata_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error)) {
	if _recv == nil {
		panic("clientRest.GetApplicationRoleConnectionMetadata: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetApplicationRoleConnectionMetadataMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error){}
	} else if len(_dat.GetApplicationRoleConnectionMetadataMocks) < 2 {
		_dat.GetApplicationRoleConnectionMetadataMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error){fn, fn}
	} else {
		_dat.GetApplicationRoleConnectionMetadataMocks = _dat.GetApplicationRoleConnectionMetadataMocks[:len(_dat.GetApplicationRoleConnectionMetadataMocks)-1]
		_dat.GetApplicationRoleConnectionMetadataMocks = append(_dat.GetApplicationRoleConnectionMetadataMocks, fn)
		_dat.GetApplicationRoleConnectionMetadataMocks = append(_dat.GetApplicationRoleConnectionMetadataMocks, fn)
	}
}

func (_recv *clientRest) _GetApplicationRoleConnectionMetadata_Stub() {
	_recv._GetApplicationRoleConnectionMetadata_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.ApplicationRoleConnectionMetadata, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetApplicationRoleConnectionMetadata_Return(r0 []discord.ApplicationRoleConnectionMetadata, r1 error) {
	_recv._GetApplicationRoleConnectionMetadata_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetApplicationRoleConnectionMetadata_Calls() []_clientRest_GetApplicationRoleConnectionMetadata_Call {
	if _recv == nil {
		panic("clientRest.GetApplicationRoleConnectionMetadata: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetApplicationRoleConnectionMetadataCalls
}

func (_recv *clientRest) GetAuditLog(guildID snowflake.ID, userID snowflake.ID, actionType discord.AuditLogEvent, before snowflake.ID, after snowflake.ID, limit int, opts ...rest.RequestOpt) (*discord.AuditLog, error) {
	if _recv == nil {
		panic("clientRest.GetAuditLog: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetAuditLogCalls = append(_dat.GetAuditLogCalls, _clientRest_GetAuditLog_Call{guildID, userID, actionType, before, after, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (*discord.AuditLog, error)
	if len(_dat.GetAuditLogMocks) > 0 {
		_fn = _dat.GetAuditLogMocks[0]
		if len(_dat.GetAuditLogMocks) > 1 {
			_dat.GetAuditLogMocks = _dat.GetAuditLogMocks[1:]
		}
	} else { _fn = _recv.Rest.GetAuditLog }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, actionType, before, after, limit, opts...)
}

func (_recv *clientRest) _GetAuditLog_Do(fn func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (*discord.AuditLog, error)) {
	if _recv == nil {
		panic("clientRest.GetAuditLog: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetAuditLogMocks = []func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (*discord.AuditLog, error){}
	} else if len(_dat.GetAuditLogMocks) < 2 {
		_dat.GetAuditLogMocks = []func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (*discord.AuditLog, error){fn, fn}
	} else {
		_dat.GetAuditLogMocks = _dat.GetAuditLogMocks[:len(_dat.GetAuditLogMocks)-1]
		_dat.GetAuditLogMocks = append(_dat.GetAuditLogMocks, fn)
		_dat.GetAuditLogMocks = append(_dat.GetAuditLogMocks, fn)
	}
}

func (_recv *clientRest) _GetAuditLog_Stub() {
	_recv._GetAuditLog_Do(func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (r0 *discord.AuditLog, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAuditLog_Return(r0 *discord.AuditLog, r1 error) {
	_recv._GetAuditLog_Do(func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (*discord.AuditLog, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAuditLog_Calls() []_clientRest_GetAuditLog_Call {
	if _recv == nil {
		panic("clientRest.GetAuditLog: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetAuditLogCalls
}

func (_recv *clientRest) GetAuditLogPage(guildID snowflake.ID, userID snowflake.ID, actionType discord.AuditLogEvent, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.AuditLogPage {
	if _recv == nil {
		panic("clientRest.GetAuditLogPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetAuditLogPageCalls = append(_dat.GetAuditLogPageCalls, _clientRest_GetAuditLogPage_Call{guildID, userID, actionType, startID, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, int, ...rest.RequestOpt) (rest.AuditLogPage)
	if len(_dat.GetAuditLogPageMocks) > 0 {
		_fn = _dat.GetAuditLogPageMocks[0]
		if len(_dat.GetAuditLogPageMocks) > 1 {
			_dat.GetAuditLogPageMocks = _dat.GetAuditLogPageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetAuditLogPage }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, actionType, startID, limit, opts...)
}

func (_recv *clientRest) _GetAuditLogPage_Do(fn func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, int, ...rest.RequestOpt) (rest.AuditLogPage)) {
	if _recv == nil {
		panic("clientRest.GetAuditLogPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetAuditLogPageMocks = []func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, int, ...rest.RequestOpt) (rest.AuditLogPage){}
	} else if len(_dat.GetAuditLogPageMocks) < 2 {
		_dat.GetAuditLogPageMocks = []func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, int, ...rest.RequestOpt) (rest.AuditLogPage){fn, fn}
	} else {
		_dat.GetAuditLogPageMocks = _dat.GetAuditLogPageMocks[:len(_dat.GetAuditLogPageMocks)-1]
		_dat.GetAuditLogPageMocks = append(_dat.GetAuditLogPageMocks, fn)
		_dat.GetAuditLogPageMocks = append(_dat.GetAuditLogPageMocks, fn)
	}
}

func (_recv *clientRest) _GetAuditLogPage_Stub() {
	_recv._GetAuditLogPage_Do(func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, int, ...rest.RequestOpt) (r0 rest.AuditLogPage) {
		return r0
	})
}

func (_recv *clientRest) _GetAuditLogPage_Return(r0 rest.AuditLogPage) {
	_recv._GetAuditLogPage_Do(func(snowflake.ID, snowflake.ID, discord.AuditLogEvent, snowflake.ID, int, ...rest.RequestOpt) (rest.AuditLogPage) {
		return r0
	})
}

func (_recv *clientRest) _GetAuditLogPage_Calls() []_clientRest_GetAuditLogPage_Call {
	if _recv == nil {
		panic("clientRest.GetAuditLogPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetAuditLogPageCalls
}

func (_recv *clientRest) GetAutoModerationRule(guildID snowflake.ID, ruleID snowflake.ID, opts ...rest.RequestOpt) (*discord.AutoModerationRule, error) {
	if _recv == nil {
		panic("clientRest.GetAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetAutoModerationRuleCalls = append(_dat.GetAutoModerationRuleCalls, _clientRest_GetAutoModerationRule_Call{guildID, ruleID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.AutoModerationRule, error)
	if len(_dat.GetAutoModerationRuleMocks) > 0 {
		_fn = _dat.GetAutoModerationRuleMocks[0]
		if len(_dat.GetAutoModerationRuleMocks) > 1 {
			_dat.GetAutoModerationRuleMocks = _dat.GetAutoModerationRuleMocks[1:]
		}
	} else { _fn = _recv.Rest.GetAutoModerationRule }
	_dat.mutex.Unlock()
	return _fn(guildID, ruleID, opts...)
}

func (_recv *clientRest) _GetAutoModerationRule_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.AutoModerationRule, error)) {
	if _recv == nil {
		panic("clientRest.GetAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetAutoModerationRuleMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.AutoModerationRule, error){}
	} else if len(_dat.GetAutoModerationRuleMocks) < 2 {
		_dat.GetAutoModerationRuleMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.AutoModerationRule, error){fn, fn}
	} else {
		_dat.GetAutoModerationRuleMocks = _dat.GetAutoModerationRuleMocks[:len(_dat.GetAutoModerationRuleMocks)-1]
		_dat.GetAutoModerationRuleMocks = append(_dat.GetAutoModerationRuleMocks, fn)
		_dat.GetAutoModerationRuleMocks = append(_dat.GetAutoModerationRuleMocks, fn)
	}
}

func (_recv *clientRest) _GetAutoModerationRule_Stub() {
	_recv._GetAutoModerationRule_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.AutoModerationRule, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAutoModerationRule_Return(r0 *discord.AutoModerationRule, r1 error) {
	_recv._GetAutoModerationRule_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.AutoModerationRule, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAutoModerationRule_Calls() []_clientRest_GetAutoModerationRule_Call {
	if _recv == nil {
		panic("clientRest.GetAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetAutoModerationRuleCalls
}

func (_recv *clientRest) GetAutoModerationRules(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.AutoModerationRule, error) {
	if _recv == nil {
		panic("clientRest.GetAutoModerationRules: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetAutoModerationRulesCalls = append(_dat.GetAutoModerationRulesCalls, _clientRest_GetAutoModerationRules_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.AutoModerationRule, error)
	if len(_dat.GetAutoModerationRulesMocks) > 0 {
		_fn = _dat.GetAutoModerationRulesMocks[0]
		if len(_dat.GetAutoModerationRulesMocks) > 1 {
			_dat.GetAutoModerationRulesMocks = _dat.GetAutoModerationRulesMocks[1:]
		}
	} else { _fn = _recv.Rest.GetAutoModerationRules }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetAutoModerationRules_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.AutoModerationRule, error)) {
	if _recv == nil {
		panic("clientRest.GetAutoModerationRules: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetAutoModerationRulesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.AutoModerationRule, error){}
	} else if len(_dat.GetAutoModerationRulesMocks) < 2 {
		_dat.GetAutoModerationRulesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.AutoModerationRule, error){fn, fn}
	} else {
		_dat.GetAutoModerationRulesMocks = _dat.GetAutoModerationRulesMocks[:len(_dat.GetAutoModerationRulesMocks)-1]
		_dat.GetAutoModerationRulesMocks = append(_dat.GetAutoModerationRulesMocks, fn)
		_dat.GetAutoModerationRulesMocks = append(_dat.GetAutoModerationRulesMocks, fn)
	}
}

func (_recv *clientRest) _GetAutoModerationRules_Stub() {
	_recv._GetAutoModerationRules_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.AutoModerationRule, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAutoModerationRules_Return(r0 []discord.AutoModerationRule, r1 error) {
	_recv._GetAutoModerationRules_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.AutoModerationRule, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetAutoModerationRules_Calls() []_clientRest_GetAutoModerationRules_Call {
	if _recv == nil {
		panic("clientRest.GetAutoModerationRules: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetAutoModerationRulesCalls
}

func (_recv *clientRest) GetBan(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) (*discord.Ban, error) {
	if _recv == nil {
		panic("clientRest.GetBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetBanCalls = append(_dat.GetBanCalls, _clientRest_GetBan_Call{guildID, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Ban, error)
	if len(_dat.GetBanMocks) > 0 {
		_fn = _dat.GetBanMocks[0]
		if len(_dat.GetBanMocks) > 1 {
			_dat.GetBanMocks = _dat.GetBanMocks[1:]
		}
	} else { _fn = _recv.Rest.GetBan }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, opts...)
}

func (_recv *clientRest) _GetBan_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Ban, error)) {
	if _recv == nil {
		panic("clientRest.GetBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetBanMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Ban, error){}
	} else if len(_dat.GetBanMocks) < 2 {
		_dat.GetBanMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Ban, error){fn, fn}
	} else {
		_dat.GetBanMocks = _dat.GetBanMocks[:len(_dat.GetBanMocks)-1]
		_dat.GetBanMocks = append(_dat.GetBanMocks, fn)
		_dat.GetBanMocks = append(_dat.GetBanMocks, fn)
	}
}

func (_recv *clientRest) _GetBan_Stub() {
	_recv._GetBan_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Ban, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetBan_Return(r0 *discord.Ban, r1 error) {
	_recv._GetBan_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Ban, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetBan_Calls() []_clientRest_GetBan_Call {
	if _recv == nil {
		panic("clientRest.GetBan: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetBanCalls
}

func (_recv *clientRest) GetBans(guildID snowflake.ID, before snowflake.ID, after snowflake.ID, limit int, opts ...rest.RequestOpt) ([]discord.Ban, error) {
	if _recv == nil {
		panic("clientRest.GetBans: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetBansCalls = append(_dat.GetBansCalls, _clientRest_GetBans_Call{guildID, before, after, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Ban, error)
	if len(_dat.GetBansMocks) > 0 {
		_fn = _dat.GetBansMocks[0]
		if len(_dat.GetBansMocks) > 1 {
			_dat.GetBansMocks = _dat.GetBansMocks[1:]
		}
	} else { _fn = _recv.Rest.GetBans }
	_dat.mutex.Unlock()
	return _fn(guildID, before, after, limit, opts...)
}

func (_recv *clientRest) _GetBans_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Ban, error)) {
	if _recv == nil {
		panic("clientRest.GetBans: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetBansMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Ban, error){}
	} else if len(_dat.GetBansMocks) < 2 {
		_dat.GetBansMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Ban, error){fn, fn}
	} else {
		_dat.GetBansMocks = _dat.GetBansMocks[:len(_dat.GetBansMocks)-1]
		_dat.GetBansMocks = append(_dat.GetBansMocks, fn)
		_dat.GetBansMocks = append(_dat.GetBansMocks, fn)
	}
}

func (_recv *clientRest) _GetBans_Stub() {
	_recv._GetBans_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (r0 []discord.Ban, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetBans_Return(r0 []discord.Ban, r1 error) {
	_recv._GetBans_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Ban, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetBans_Calls() []_clientRest_GetBans_Call {
	if _recv == nil {
		panic("clientRest.GetBans: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetBansCalls
}

func (_recv *clientRest) GetBansPage(guildID snowflake.ID, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.Page[discord.Ban] {
	if _recv == nil {
		panic("clientRest.GetBansPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetBansPageCalls = append(_dat.GetBansPageCalls, _clientRest_GetBansPage_Call{guildID, startID, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Ban])
	if len(_dat.GetBansPageMocks) > 0 {
		_fn = _dat.GetBansPageMocks[0]
		if len(_dat.GetBansPageMocks) > 1 {
			_dat.GetBansPageMocks = _dat.GetBansPageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetBansPage }
	_dat.mutex.Unlock()
	return _fn(guildID, startID, limit, opts...)
}

func (_recv *clientRest) _GetBansPage_Do(fn func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Ban])) {
	if _recv == nil {
		panic("clientRest.GetBansPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetBansPageMocks = []func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Ban]){}
	} else if len(_dat.GetBansPageMocks) < 2 {
		_dat.GetBansPageMocks = []func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Ban]){fn, fn}
	} else {
		_dat.GetBansPageMocks = _dat.GetBansPageMocks[:len(_dat.GetBansPageMocks)-1]
		_dat.GetBansPageMocks = append(_dat.GetBansPageMocks, fn)
		_dat.GetBansPageMocks = append(_dat.GetBansPageMocks, fn)
	}
}

func (_recv *clientRest) _GetBansPage_Stub() {
	_recv._GetBansPage_Do(func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (r0 rest.Page[discord.Ban]) {
		return r0
	})
}

func (_recv *clientRest) _GetBansPage_Return(r0 rest.Page[discord.Ban]) {
	_recv._GetBansPage_Do(func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Ban]) {
		return r0
	})
}

func (_recv *clientRest) _GetBansPage_Calls() []_clientRest_GetBansPage_Call {
	if _recv == nil {
		panic("clientRest.GetBansPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetBansPageCalls
}

func (_recv *clientRest) GetBotApplicationInfo(opts ...rest.RequestOpt) (*discord.Application, error) {
	if _recv == nil {
		panic("clientRest.GetBotApplicationInfo: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetBotApplicationInfoCalls = append(_dat.GetBotApplicationInfoCalls, _clientRest_GetBotApplicationInfo_Call{opts})
	var _fn func(...rest.RequestOpt) (*discord.Application, error)
	if len(_dat.GetBotApplicationInfoMocks) > 0 {
		_fn = _dat.GetBotApplicationInfoMocks[0]
		if len(_dat.GetBotApplicationInfoMocks) > 1 {
			_dat.GetBotApplicationInfoMocks = _dat.GetBotApplicationInfoMocks[1:]
		}
	} else { _fn = _recv.Rest.GetBotApplicationInfo }
	_dat.mutex.Unlock()
	return _fn(opts...)
}

func (_recv *clientRest) _GetBotApplicationInfo_Do(fn func(...rest.RequestOpt) (*discord.Application, error)) {
	if _recv == nil {
		panic("clientRest.GetBotApplicationInfo: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetBotApplicationInfoMocks = []func(...rest.RequestOpt) (*discord.Application, error){}
	} else if len(_dat.GetBotApplicationInfoMocks) < 2 {
		_dat.GetBotApplicationInfoMocks = []func(...rest.RequestOpt) (*discord.Application, error){fn, fn}
	} else {
		_dat.GetBotApplicationInfoMocks = _dat.GetBotApplicationInfoMocks[:len(_dat.GetBotApplicationInfoMocks)-1]
		_dat.GetBotApplicationInfoMocks = append(_dat.GetBotApplicationInfoMocks, fn)
		_dat.GetBotApplicationInfoMocks = append(_dat.GetBotApplicationInfoMocks, fn)
	}
}

func (_recv *clientRest) _GetBotApplicationInfo_Stub() {
	_recv._GetBotApplicationInfo_Do(func(...rest.RequestOpt) (r0 *discord.Application, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetBotApplicationInfo_Return(r0 *discord.Application, r1 error) {
	_recv._GetBotApplicationInfo_Do(func(...rest.RequestOpt) (*discord.Application, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetBotApplicationInfo_Calls() []_clientRest_GetBotApplicationInfo_Call {
	if _recv == nil {
		panic("clientRest.GetBotApplicationInfo: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetBotApplicationInfoCalls
}

func (_recv *clientRest) GetChannel(channelID snowflake.ID, opts ...rest.RequestOpt) (discord.Channel, error) {
	if _recv == nil {
		panic("clientRest.GetChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetChannelCalls = append(_dat.GetChannelCalls, _clientRest_GetChannel_Call{channelID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (discord.Channel, error)
	if len(_dat.GetChannelMocks) > 0 {
		_fn = _dat.GetChannelMocks[0]
		if len(_dat.GetChannelMocks) > 1 {
			_dat.GetChannelMocks = _dat.GetChannelMocks[1:]
		}
	} else { _fn = _recv.Rest.GetChannel }
	_dat.mutex.Unlock()
	return _fn(channelID, opts...)
}

func (_recv *clientRest) _GetChannel_Do(fn func(snowflake.ID, ...rest.RequestOpt) (discord.Channel, error)) {
	if _recv == nil {
		panic("clientRest.GetChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetChannelMocks = []func(snowflake.ID, ...rest.RequestOpt) (discord.Channel, error){}
	} else if len(_dat.GetChannelMocks) < 2 {
		_dat.GetChannelMocks = []func(snowflake.ID, ...rest.RequestOpt) (discord.Channel, error){fn, fn}
	} else {
		_dat.GetChannelMocks = _dat.GetChannelMocks[:len(_dat.GetChannelMocks)-1]
		_dat.GetChannelMocks = append(_dat.GetChannelMocks, fn)
		_dat.GetChannelMocks = append(_dat.GetChannelMocks, fn)
	}
}

func (_recv *clientRest) _GetChannel_Stub() {
	_recv._GetChannel_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 discord.Channel, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetChannel_Return(r0 discord.Channel, r1 error) {
	_recv._GetChannel_Do(func(snowflake.ID, ...rest.RequestOpt) (discord.Channel, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetChannel_Calls() []_clientRest_GetChannel_Call {
	if _recv == nil {
		panic("clientRest.GetChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetChannelCalls
}

func (_recv *clientRest) GetChannelInvites(channelID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ExtendedInvite, error) {
	if _recv == nil {
		panic("clientRest.GetChannelInvites: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetChannelInvitesCalls = append(_dat.GetChannelInvitesCalls, _clientRest_GetChannelInvites_Call{channelID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error)
	if len(_dat.GetChannelInvitesMocks) > 0 {
		_fn = _dat.GetChannelInvitesMocks[0]
		if len(_dat.GetChannelInvitesMocks) > 1 {
			_dat.GetChannelInvitesMocks = _dat.GetChannelInvitesMocks[1:]
		}
	} else { _fn = _recv.Rest.GetChannelInvites }
	_dat.mutex.Unlock()
	return _fn(channelID, opts...)
}

func (_recv *clientRest) _GetChannelInvites_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error)) {
	if _recv == nil {
		panic("clientRest.GetChannelInvites: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetChannelInvitesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error){}
	} else if len(_dat.GetChannelInvitesMocks) < 2 {
		_dat.GetChannelInvitesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error){fn, fn}
	} else {
		_dat.GetChannelInvitesMocks = _dat.GetChannelInvitesMocks[:len(_dat.GetChannelInvitesMocks)-1]
		_dat.GetChannelInvitesMocks = append(_dat.GetChannelInvitesMocks, fn)
		_dat.GetChannelInvitesMocks = append(_dat.GetChannelInvitesMocks, fn)
	}
}

func (_recv *clientRest) _GetChannelInvites_Stub() {
	_recv._GetChannelInvites_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.ExtendedInvite, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetChannelInvites_Return(r0 []discord.ExtendedInvite, r1 error) {
	_recv._GetChannelInvites_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetChannelInvites_Calls() []_clientRest_GetChannelInvites_Call {
	if _recv == nil {
		panic("clientRest.GetChannelInvites: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetChannelInvitesCalls
}

func (_recv *clientRest) GetCurrentApplication(opts ...rest.RequestOpt) (*discord.Application, error) {
	if _recv == nil {
		panic("clientRest.GetCurrentApplication: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentApplicationCalls = append(_dat.GetCurrentApplicationCalls, _clientRest_GetCurrentApplication_Call{opts})
	var _fn func(...rest.RequestOpt) (*discord.Application, error)
	if len(_dat.GetCurrentApplicationMocks) > 0 {
		_fn = _dat.GetCurrentApplicationMocks[0]
		if len(_dat.GetCurrentApplicationMocks) > 1 {
			_dat.GetCurrentApplicationMocks = _dat.GetCurrentApplicationMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentApplication }
	_dat.mutex.Unlock()
	return _fn(opts...)
}

func (_recv *clientRest) _GetCurrentApplication_Do(fn func(...rest.RequestOpt) (*discord.Application, error)) {
	if _recv == nil {
		panic("clientRest.GetCurrentApplication: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentApplicationMocks = []func(...rest.RequestOpt) (*discord.Application, error){}
	} else if len(_dat.GetCurrentApplicationMocks) < 2 {
		_dat.GetCurrentApplicationMocks = []func(...rest.RequestOpt) (*discord.Application, error){fn, fn}
	} else {
		_dat.GetCurrentApplicationMocks = _dat.GetCurrentApplicationMocks[:len(_dat.GetCurrentApplicationMocks)-1]
		_dat.GetCurrentApplicationMocks = append(_dat.GetCurrentApplicationMocks, fn)
		_dat.GetCurrentApplicationMocks = append(_dat.GetCurrentApplicationMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentApplication_Stub() {
	_recv._GetCurrentApplication_Do(func(...rest.RequestOpt) (r0 *discord.Application, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentApplication_Return(r0 *discord.Application, r1 error) {
	_recv._GetCurrentApplication_Do(func(...rest.RequestOpt) (*discord.Application, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentApplication_Calls() []_clientRest_GetCurrentApplication_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentApplication: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentApplicationCalls
}

func (_recv *clientRest) GetCurrentAuthorizationInfo(bearerToken string, opts ...rest.RequestOpt) (*discord.AuthorizationInformation, error) {
	if _recv == nil {
		panic("clientRest.GetCurrentAuthorizationInfo: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentAuthorizationInfoCalls = append(_dat.GetCurrentAuthorizationInfoCalls, _clientRest_GetCurrentAuthorizationInfo_Call{bearerToken, opts})
	var _fn func(string, ...rest.RequestOpt) (*discord.AuthorizationInformation, error)
	if len(_dat.GetCurrentAuthorizationInfoMocks) > 0 {
		_fn = _dat.GetCurrentAuthorizationInfoMocks[0]
		if len(_dat.GetCurrentAuthorizationInfoMocks) > 1 {
			_dat.GetCurrentAuthorizationInfoMocks = _dat.GetCurrentAuthorizationInfoMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentAuthorizationInfo }
	_dat.mutex.Unlock()
	return _fn(bearerToken, opts...)
}

func (_recv *clientRest) _GetCurrentAuthorizationInfo_Do(fn func(string, ...rest.RequestOpt) (*discord.AuthorizationInformation, error)) {
	if _recv == nil {
		panic("clientRest.GetCurrentAuthorizationInfo: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentAuthorizationInfoMocks = []func(string, ...rest.RequestOpt) (*discord.AuthorizationInformation, error){}
	} else if len(_dat.GetCurrentAuthorizationInfoMocks) < 2 {
		_dat.GetCurrentAuthorizationInfoMocks = []func(string, ...rest.RequestOpt) (*discord.AuthorizationInformation, error){fn, fn}
	} else {
		_dat.GetCurrentAuthorizationInfoMocks = _dat.GetCurrentAuthorizationInfoMocks[:len(_dat.GetCurrentAuthorizationInfoMocks)-1]
		_dat.GetCurrentAuthorizationInfoMocks = append(_dat.GetCurrentAuthorizationInfoMocks, fn)
		_dat.GetCurrentAuthorizationInfoMocks = append(_dat.GetCurrentAuthorizationInfoMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentAuthorizationInfo_Stub() {
	_recv._GetCurrentAuthorizationInfo_Do(func(string, ...rest.RequestOpt) (r0 *discord.AuthorizationInformation, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentAuthorizationInfo_Return(r0 *discord.AuthorizationInformation, r1 error) {
	_recv._GetCurrentAuthorizationInfo_Do(func(string, ...rest.RequestOpt) (*discord.AuthorizationInformation, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentAuthorizationInfo_Calls() []_clientRest_GetCurrentAuthorizationInfo_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentAuthorizationInfo: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentAuthorizationInfoCalls
}

func (_recv *clientRest) GetCurrentMember(bearerToken string, guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.Member, error) {
	if _recv == nil {
		panic("clientRest.GetCurrentMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentMemberCalls = append(_dat.GetCurrentMemberCalls, _clientRest_GetCurrentMember_Call{bearerToken, guildID, opts})
	var _fn func(string, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error)
	if len(_dat.GetCurrentMemberMocks) > 0 {
		_fn = _dat.GetCurrentMemberMocks[0]
		if len(_dat.GetCurrentMemberMocks) > 1 {
			_dat.GetCurrentMemberMocks = _dat.GetCurrentMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentMember }
	_dat.mutex.Unlock()
	return _fn(bearerToken, guildID, opts...)
}

func (_recv *clientRest) _GetCurrentMember_Do(fn func(string, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error)) {
	if _recv == nil {
		panic("clientRest.GetCurrentMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentMemberMocks = []func(string, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error){}
	} else if len(_dat.GetCurrentMemberMocks) < 2 {
		_dat.GetCurrentMemberMocks = []func(string, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error){fn, fn}
	} else {
		_dat.GetCurrentMemberMocks = _dat.GetCurrentMemberMocks[:len(_dat.GetCurrentMemberMocks)-1]
		_dat.GetCurrentMemberMocks = append(_dat.GetCurrentMemberMocks, fn)
		_dat.GetCurrentMemberMocks = append(_dat.GetCurrentMemberMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentMember_Stub() {
	_recv._GetCurrentMember_Do(func(string, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Member, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentMember_Return(r0 *discord.Member, r1 error) {
	_recv._GetCurrentMember_Do(func(string, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentMember_Calls() []_clientRest_GetCurrentMember_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentMemberCalls
}

func (_recv *clientRest) GetCurrentUser(bearerToken string, opts ...rest.RequestOpt) (*discord.OAuth2User, error) {
	if _recv == nil {
		panic("clientRest.GetCurrentUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentUserCalls = append(_dat.GetCurrentUserCalls, _clientRest_GetCurrentUser_Call{bearerToken, opts})
	var _fn func(string, ...rest.RequestOpt) (*discord.OAuth2User, error)
	if len(_dat.GetCurrentUserMocks) > 0 {
		_fn = _dat.GetCurrentUserMocks[0]
		if len(_dat.GetCurrentUserMocks) > 1 {
			_dat.GetCurrentUserMocks = _dat.GetCurrentUserMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentUser }
	_dat.mutex.Unlock()
	return _fn(bearerToken, opts...)
}

func (_recv *clientRest) _GetCurrentUser_Do(fn func(string, ...rest.RequestOpt) (*discord.OAuth2User, error)) {
	if _recv == nil {
		panic("clientRest.GetCurrentUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentUserMocks = []func(string, ...rest.RequestOpt) (*discord.OAuth2User, error){}
	} else if len(_dat.GetCurrentUserMocks) < 2 {
		_dat.GetCurrentUserMocks = []func(string, ...rest.RequestOpt) (*discord.OAuth2User, error){fn, fn}
	} else {
		_dat.GetCurrentUserMocks = _dat.GetCurrentUserMocks[:len(_dat.GetCurrentUserMocks)-1]
		_dat.GetCurrentUserMocks = append(_dat.GetCurrentUserMocks, fn)
		_dat.GetCurrentUserMocks = append(_dat.GetCurrentUserMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentUser_Stub() {
	_recv._GetCurrentUser_Do(func(string, ...rest.RequestOpt) (r0 *discord.OAuth2User, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUser_Return(r0 *discord.OAuth2User, r1 error) {
	_recv._GetCurrentUser_Do(func(string, ...rest.RequestOpt) (*discord.OAuth2User, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUser_Calls() []_clientRest_GetCurrentUser_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentUserCalls
}

func (_recv *clientRest) GetCurrentUserApplicationRoleConnection(bearerToken string, applicationID snowflake.ID, opts ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserApplicationRoleConnection: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentUserApplicationRoleConnectionCalls = append(_dat.GetCurrentUserApplicationRoleConnectionCalls, _clientRest_GetCurrentUserApplicationRoleConnection_Call{bearerToken, applicationID, opts})
	var _fn func(string, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error)
	if len(_dat.GetCurrentUserApplicationRoleConnectionMocks) > 0 {
		_fn = _dat.GetCurrentUserApplicationRoleConnectionMocks[0]
		if len(_dat.GetCurrentUserApplicationRoleConnectionMocks) > 1 {
			_dat.GetCurrentUserApplicationRoleConnectionMocks = _dat.GetCurrentUserApplicationRoleConnectionMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentUserApplicationRoleConnection }
	_dat.mutex.Unlock()
	return _fn(bearerToken, applicationID, opts...)
}

func (_recv *clientRest) _GetCurrentUserApplicationRoleConnection_Do(fn func(string, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error)) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserApplicationRoleConnection: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentUserApplicationRoleConnectionMocks = []func(string, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error){}
	} else if len(_dat.GetCurrentUserApplicationRoleConnectionMocks) < 2 {
		_dat.GetCurrentUserApplicationRoleConnectionMocks = []func(string, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error){fn, fn}
	} else {
		_dat.GetCurrentUserApplicationRoleConnectionMocks = _dat.GetCurrentUserApplicationRoleConnectionMocks[:len(_dat.GetCurrentUserApplicationRoleConnectionMocks)-1]
		_dat.GetCurrentUserApplicationRoleConnectionMocks = append(_dat.GetCurrentUserApplicationRoleConnectionMocks, fn)
		_dat.GetCurrentUserApplicationRoleConnectionMocks = append(_dat.GetCurrentUserApplicationRoleConnectionMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentUserApplicationRoleConnection_Stub() {
	_recv._GetCurrentUserApplicationRoleConnection_Do(func(string, snowflake.ID, ...rest.RequestOpt) (r0 *discord.ApplicationRoleConnection, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUserApplicationRoleConnection_Return(r0 *discord.ApplicationRoleConnection, r1 error) {
	_recv._GetCurrentUserApplicationRoleConnection_Do(func(string, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUserApplicationRoleConnection_Calls() []_clientRest_GetCurrentUserApplicationRoleConnection_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentUserApplicationRoleConnection: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentUserApplicationRoleConnectionCalls
}

func (_recv *clientRest) GetCurrentUserConnections(bearerToken string, opts ...rest.RequestOpt) ([]discord.Connection, error) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserConnections: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentUserConnectionsCalls = append(_dat.GetCurrentUserConnectionsCalls, _clientRest_GetCurrentUserConnections_Call{bearerToken, opts})
	var _fn func(string, ...rest.RequestOpt) ([]discord.Connection, error)
	if len(_dat.GetCurrentUserConnectionsMocks) > 0 {
		_fn = _dat.GetCurrentUserConnectionsMocks[0]
		if len(_dat.GetCurrentUserConnectionsMocks) > 1 {
			_dat.GetCurrentUserConnectionsMocks = _dat.GetCurrentUserConnectionsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentUserConnections }
	_dat.mutex.Unlock()
	return _fn(bearerToken, opts...)
}

func (_recv *clientRest) _GetCurrentUserConnections_Do(fn func(string, ...rest.RequestOpt) ([]discord.Connection, error)) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserConnections: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentUserConnectionsMocks = []func(string, ...rest.RequestOpt) ([]discord.Connection, error){}
	} else if len(_dat.GetCurrentUserConnectionsMocks) < 2 {
		_dat.GetCurrentUserConnectionsMocks = []func(string, ...rest.RequestOpt) ([]discord.Connection, error){fn, fn}
	} else {
		_dat.GetCurrentUserConnectionsMocks = _dat.GetCurrentUserConnectionsMocks[:len(_dat.GetCurrentUserConnectionsMocks)-1]
		_dat.GetCurrentUserConnectionsMocks = append(_dat.GetCurrentUserConnectionsMocks, fn)
		_dat.GetCurrentUserConnectionsMocks = append(_dat.GetCurrentUserConnectionsMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentUserConnections_Stub() {
	_recv._GetCurrentUserConnections_Do(func(string, ...rest.RequestOpt) (r0 []discord.Connection, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUserConnections_Return(r0 []discord.Connection, r1 error) {
	_recv._GetCurrentUserConnections_Do(func(string, ...rest.RequestOpt) ([]discord.Connection, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUserConnections_Calls() []_clientRest_GetCurrentUserConnections_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentUserConnections: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentUserConnectionsCalls
}

func (_recv *clientRest) GetCurrentUserGuilds(bearerToken string, before snowflake.ID, after snowflake.ID, limit int, withCounts bool, opts ...rest.RequestOpt) ([]discord.OAuth2Guild, error) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserGuilds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentUserGuildsCalls = append(_dat.GetCurrentUserGuildsCalls, _clientRest_GetCurrentUserGuilds_Call{bearerToken, before, after, limit, withCounts, opts})
	var _fn func(string, snowflake.ID, snowflake.ID, int, bool, ...rest.RequestOpt) ([]discord.OAuth2Guild, error)
	if len(_dat.GetCurrentUserGuildsMocks) > 0 {
		_fn = _dat.GetCurrentUserGuildsMocks[0]
		if len(_dat.GetCurrentUserGuildsMocks) > 1 {
			_dat.GetCurrentUserGuildsMocks = _dat.GetCurrentUserGuildsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentUserGuilds }
	_dat.mutex.Unlock()
	return _fn(bearerToken, before, after, limit, withCounts, opts...)
}

func (_recv *clientRest) _GetCurrentUserGuilds_Do(fn func(string, snowflake.ID, snowflake.ID, int, bool, ...rest.RequestOpt) ([]discord.OAuth2Guild, error)) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserGuilds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentUserGuildsMocks = []func(string, snowflake.ID, snowflake.ID, int, bool, ...rest.RequestOpt) ([]discord.OAuth2Guild, error){}
	} else if len(_dat.GetCurrentUserGuildsMocks) < 2 {
		_dat.GetCurrentUserGuildsMocks = []func(string, snowflake.ID, snowflake.ID, int, bool, ...rest.RequestOpt) ([]discord.OAuth2Guild, error){fn, fn}
	} else {
		_dat.GetCurrentUserGuildsMocks = _dat.GetCurrentUserGuildsMocks[:len(_dat.GetCurrentUserGuildsMocks)-1]
		_dat.GetCurrentUserGuildsMocks = append(_dat.GetCurrentUserGuildsMocks, fn)
		_dat.GetCurrentUserGuildsMocks = append(_dat.GetCurrentUserGuildsMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentUserGuilds_Stub() {
	_recv._GetCurrentUserGuilds_Do(func(string, snowflake.ID, snowflake.ID, int, bool, ...rest.RequestOpt) (r0 []discord.OAuth2Guild, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUserGuilds_Return(r0 []discord.OAuth2Guild, r1 error) {
	_recv._GetCurrentUserGuilds_Do(func(string, snowflake.ID, snowflake.ID, int, bool, ...rest.RequestOpt) ([]discord.OAuth2Guild, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUserGuilds_Calls() []_clientRest_GetCurrentUserGuilds_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentUserGuilds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentUserGuildsCalls
}

func (_recv *clientRest) GetCurrentUserGuildsPage(bearerToken string, startID snowflake.ID, limit int, withCounts bool, opts ...rest.RequestOpt) rest.Page[discord.OAuth2Guild] {
	if _recv == nil {
		panic("clientRest.GetCurrentUserGuildsPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentUserGuildsPageCalls = append(_dat.GetCurrentUserGuildsPageCalls, _clientRest_GetCurrentUserGuildsPage_Call{bearerToken, startID, limit, withCounts, opts})
	var _fn func(string, snowflake.ID, int, bool, ...rest.RequestOpt) (rest.Page[discord.OAuth2Guild])
	if len(_dat.GetCurrentUserGuildsPageMocks) > 0 {
		_fn = _dat.GetCurrentUserGuildsPageMocks[0]
		if len(_dat.GetCurrentUserGuildsPageMocks) > 1 {
			_dat.GetCurrentUserGuildsPageMocks = _dat.GetCurrentUserGuildsPageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentUserGuildsPage }
	_dat.mutex.Unlock()
	return _fn(bearerToken, startID, limit, withCounts, opts...)
}

func (_recv *clientRest) _GetCurrentUserGuildsPage_Do(fn func(string, snowflake.ID, int, bool, ...rest.RequestOpt) (rest.Page[discord.OAuth2Guild])) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserGuildsPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentUserGuildsPageMocks = []func(string, snowflake.ID, int, bool, ...rest.RequestOpt) (rest.Page[discord.OAuth2Guild]){}
	} else if len(_dat.GetCurrentUserGuildsPageMocks) < 2 {
		_dat.GetCurrentUserGuildsPageMocks = []func(string, snowflake.ID, int, bool, ...rest.RequestOpt) (rest.Page[discord.OAuth2Guild]){fn, fn}
	} else {
		_dat.GetCurrentUserGuildsPageMocks = _dat.GetCurrentUserGuildsPageMocks[:len(_dat.GetCurrentUserGuildsPageMocks)-1]
		_dat.GetCurrentUserGuildsPageMocks = append(_dat.GetCurrentUserGuildsPageMocks, fn)
		_dat.GetCurrentUserGuildsPageMocks = append(_dat.GetCurrentUserGuildsPageMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentUserGuildsPage_Stub() {
	_recv._GetCurrentUserGuildsPage_Do(func(string, snowflake.ID, int, bool, ...rest.RequestOpt) (r0 rest.Page[discord.OAuth2Guild]) {
		return r0
	})
}

func (_recv *clientRest) _GetCurrentUserGuildsPage_Return(r0 rest.Page[discord.OAuth2Guild]) {
	_recv._GetCurrentUserGuildsPage_Do(func(string, snowflake.ID, int, bool, ...rest.RequestOpt) (rest.Page[discord.OAuth2Guild]) {
		return r0
	})
}

func (_recv *clientRest) _GetCurrentUserGuildsPage_Calls() []_clientRest_GetCurrentUserGuildsPage_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentUserGuildsPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentUserGuildsPageCalls
}

func (_recv *clientRest) GetCurrentUserVoiceState(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.VoiceState, error) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetCurrentUserVoiceStateCalls = append(_dat.GetCurrentUserVoiceStateCalls, _clientRest_GetCurrentUserVoiceState_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error)
	if len(_dat.GetCurrentUserVoiceStateMocks) > 0 {
		_fn = _dat.GetCurrentUserVoiceStateMocks[0]
		if len(_dat.GetCurrentUserVoiceStateMocks) > 1 {
			_dat.GetCurrentUserVoiceStateMocks = _dat.GetCurrentUserVoiceStateMocks[1:]
		}
	} else { _fn = _recv.Rest.GetCurrentUserVoiceState }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetCurrentUserVoiceState_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error)) {
	if _recv == nil {
		panic("clientRest.GetCurrentUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetCurrentUserVoiceStateMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error){}
	} else if len(_dat.GetCurrentUserVoiceStateMocks) < 2 {
		_dat.GetCurrentUserVoiceStateMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error){fn, fn}
	} else {
		_dat.GetCurrentUserVoiceStateMocks = _dat.GetCurrentUserVoiceStateMocks[:len(_dat.GetCurrentUserVoiceStateMocks)-1]
		_dat.GetCurrentUserVoiceStateMocks = append(_dat.GetCurrentUserVoiceStateMocks, fn)
		_dat.GetCurrentUserVoiceStateMocks = append(_dat.GetCurrentUserVoiceStateMocks, fn)
	}
}

func (_recv *clientRest) _GetCurrentUserVoiceState_Stub() {
	_recv._GetCurrentUserVoiceState_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.VoiceState, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUserVoiceState_Return(r0 *discord.VoiceState, r1 error) {
	_recv._GetCurrentUserVoiceState_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetCurrentUserVoiceState_Calls() []_clientRest_GetCurrentUserVoiceState_Call {
	if _recv == nil {
		panic("clientRest.GetCurrentUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetCurrentUserVoiceStateCalls
}

func (_recv *clientRest) GetEmoji(guildID snowflake.ID, emojiID snowflake.ID, opts ...rest.RequestOpt) (*discord.Emoji, error) {
	if _recv == nil {
		panic("clientRest.GetEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetEmojiCalls = append(_dat.GetEmojiCalls, _clientRest_GetEmoji_Call{guildID, emojiID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error)
	if len(_dat.GetEmojiMocks) > 0 {
		_fn = _dat.GetEmojiMocks[0]
		if len(_dat.GetEmojiMocks) > 1 {
			_dat.GetEmojiMocks = _dat.GetEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.GetEmoji }
	_dat.mutex.Unlock()
	return _fn(guildID, emojiID, opts...)
}

func (_recv *clientRest) _GetEmoji_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error)) {
	if _recv == nil {
		panic("clientRest.GetEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetEmojiMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error){}
	} else if len(_dat.GetEmojiMocks) < 2 {
		_dat.GetEmojiMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error){fn, fn}
	} else {
		_dat.GetEmojiMocks = _dat.GetEmojiMocks[:len(_dat.GetEmojiMocks)-1]
		_dat.GetEmojiMocks = append(_dat.GetEmojiMocks, fn)
		_dat.GetEmojiMocks = append(_dat.GetEmojiMocks, fn)
	}
}

func (_recv *clientRest) _GetEmoji_Stub() {
	_recv._GetEmoji_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Emoji, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetEmoji_Return(r0 *discord.Emoji, r1 error) {
	_recv._GetEmoji_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Emoji, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetEmoji_Calls() []_clientRest_GetEmoji_Call {
	if _recv == nil {
		panic("clientRest.GetEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetEmojiCalls
}

func (_recv *clientRest) GetEmojis(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Emoji, error) {
	if _recv == nil {
		panic("clientRest.GetEmojis: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetEmojisCalls = append(_dat.GetEmojisCalls, _clientRest_GetEmojis_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error)
	if len(_dat.GetEmojisMocks) > 0 {
		_fn = _dat.GetEmojisMocks[0]
		if len(_dat.GetEmojisMocks) > 1 {
			_dat.GetEmojisMocks = _dat.GetEmojisMocks[1:]
		}
	} else { _fn = _recv.Rest.GetEmojis }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetEmojis_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error)) {
	if _recv == nil {
		panic("clientRest.GetEmojis: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetEmojisMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error){}
	} else if len(_dat.GetEmojisMocks) < 2 {
		_dat.GetEmojisMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error){fn, fn}
	} else {
		_dat.GetEmojisMocks = _dat.GetEmojisMocks[:len(_dat.GetEmojisMocks)-1]
		_dat.GetEmojisMocks = append(_dat.GetEmojisMocks, fn)
		_dat.GetEmojisMocks = append(_dat.GetEmojisMocks, fn)
	}
}

func (_recv *clientRest) _GetEmojis_Stub() {
	_recv._GetEmojis_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.Emoji, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetEmojis_Return(r0 []discord.Emoji, r1 error) {
	_recv._GetEmojis_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.Emoji, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetEmojis_Calls() []_clientRest_GetEmojis_Call {
	if _recv == nil {
		panic("clientRest.GetEmojis: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetEmojisCalls
}

func (_recv *clientRest) GetEntitlement(applicationID snowflake.ID, entitlementID snowflake.ID, opts ...rest.RequestOpt) (*discord.Entitlement, error) {
	if _recv == nil {
		panic("clientRest.GetEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetEntitlementCalls = append(_dat.GetEntitlementCalls, _clientRest_GetEntitlement_Call{applicationID, entitlementID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Entitlement, error)
	if len(_dat.GetEntitlementMocks) > 0 {
		_fn = _dat.GetEntitlementMocks[0]
		if len(_dat.GetEntitlementMocks) > 1 {
			_dat.GetEntitlementMocks = _dat.GetEntitlementMocks[1:]
		}
	} else { _fn = _recv.Rest.GetEntitlement }
	_dat.mutex.Unlock()
	return _fn(applicationID, entitlementID, opts...)
}

func (_recv *clientRest) _GetEntitlement_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Entitlement, error)) {
	if _recv == nil {
		panic("clientRest.GetEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetEntitlementMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Entitlement, error){}
	} else if len(_dat.GetEntitlementMocks) < 2 {
		_dat.GetEntitlementMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Entitlement, error){fn, fn}
	} else {
		_dat.GetEntitlementMocks = _dat.GetEntitlementMocks[:len(_dat.GetEntitlementMocks)-1]
		_dat.GetEntitlementMocks = append(_dat.GetEntitlementMocks, fn)
		_dat.GetEntitlementMocks = append(_dat.GetEntitlementMocks, fn)
	}
}

func (_recv *clientRest) _GetEntitlement_Stub() {
	_recv._GetEntitlement_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Entitlement, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetEntitlement_Return(r0 *discord.Entitlement, r1 error) {
	_recv._GetEntitlement_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Entitlement, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetEntitlement_Calls() []_clientRest_GetEntitlement_Call {
	if _recv == nil {
		panic("clientRest.GetEntitlement: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetEntitlementCalls
}

func (_recv *clientRest) GetEntitlements(applicationID snowflake.ID, params rest.GetEntitlementsParams, opts ...rest.RequestOpt) ([]discord.Entitlement, error) {
	if _recv == nil {
		panic("clientRest.GetEntitlements: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetEntitlementsCalls = append(_dat.GetEntitlementsCalls, _clientRest_GetEntitlements_Call{applicationID, params, opts})
	var _fn func(snowflake.ID, rest.GetEntitlementsParams, ...rest.RequestOpt) ([]discord.Entitlement, error)
	if len(_dat.GetEntitlementsMocks) > 0 {
		_fn = _dat.GetEntitlementsMocks[0]
		if len(_dat.GetEntitlementsMocks) > 1 {
			_dat.GetEntitlementsMocks = _dat.GetEntitlementsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetEntitlements }
	_dat.mutex.Unlock()
	return _fn(applicationID, params, opts...)
}

func (_recv *clientRest) _GetEntitlements_Do(fn func(snowflake.ID, rest.GetEntitlementsParams, ...rest.RequestOpt) ([]discord.Entitlement, error)) {
	if _recv == nil {
		panic("clientRest.GetEntitlements: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetEntitlementsMocks = []func(snowflake.ID, rest.GetEntitlementsParams, ...rest.RequestOpt) ([]discord.Entitlement, error){}
	} else if len(_dat.GetEntitlementsMocks) < 2 {
		_dat.GetEntitlementsMocks = []func(snowflake.ID, rest.GetEntitlementsParams, ...rest.RequestOpt) ([]discord.Entitlement, error){fn, fn}
	} else {
		_dat.GetEntitlementsMocks = _dat.GetEntitlementsMocks[:len(_dat.GetEntitlementsMocks)-1]
		_dat.GetEntitlementsMocks = append(_dat.GetEntitlementsMocks, fn)
		_dat.GetEntitlementsMocks = append(_dat.GetEntitlementsMocks, fn)
	}
}

func (_recv *clientRest) _GetEntitlements_Stub() {
	_recv._GetEntitlements_Do(func(snowflake.ID, rest.GetEntitlementsParams, ...rest.RequestOpt) (r0 []discord.Entitlement, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetEntitlements_Return(r0 []discord.Entitlement, r1 error) {
	_recv._GetEntitlements_Do(func(snowflake.ID, rest.GetEntitlementsParams, ...rest.RequestOpt) ([]discord.Entitlement, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetEntitlements_Calls() []_clientRest_GetEntitlements_Call {
	if _recv == nil {
		panic("clientRest.GetEntitlements: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetEntitlementsCalls
}

func (_recv *clientRest) GetFollowupMessage(applicationID snowflake.ID, interactionToken string, messageID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.GetFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetFollowupMessageCalls = append(_dat.GetFollowupMessageCalls, _clientRest_GetFollowupMessage_Call{applicationID, interactionToken, messageID, opts})
	var _fn func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.GetFollowupMessageMocks) > 0 {
		_fn = _dat.GetFollowupMessageMocks[0]
		if len(_dat.GetFollowupMessageMocks) > 1 {
			_dat.GetFollowupMessageMocks = _dat.GetFollowupMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetFollowupMessage }
	_dat.mutex.Unlock()
	return _fn(applicationID, interactionToken, messageID, opts...)
}

func (_recv *clientRest) _GetFollowupMessage_Do(fn func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.GetFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetFollowupMessageMocks = []func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.GetFollowupMessageMocks) < 2 {
		_dat.GetFollowupMessageMocks = []func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.GetFollowupMessageMocks = _dat.GetFollowupMessageMocks[:len(_dat.GetFollowupMessageMocks)-1]
		_dat.GetFollowupMessageMocks = append(_dat.GetFollowupMessageMocks, fn)
		_dat.GetFollowupMessageMocks = append(_dat.GetFollowupMessageMocks, fn)
	}
}

func (_recv *clientRest) _GetFollowupMessage_Stub() {
	_recv._GetFollowupMessage_Do(func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetFollowupMessage_Return(r0 *discord.Message, r1 error) {
	_recv._GetFollowupMessage_Do(func(snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetFollowupMessage_Calls() []_clientRest_GetFollowupMessage_Call {
	if _recv == nil {
		panic("clientRest.GetFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetFollowupMessageCalls
}

func (_recv *clientRest) GetGateway(opts ...rest.RequestOpt) (*discord.Gateway, error) {
	if _recv == nil {
		panic("clientRest.GetGateway: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGatewayCalls = append(_dat.GetGatewayCalls, _clientRest_GetGateway_Call{opts})
	var _fn func(...rest.RequestOpt) (*discord.Gateway, error)
	if len(_dat.GetGatewayMocks) > 0 {
		_fn = _dat.GetGatewayMocks[0]
		if len(_dat.GetGatewayMocks) > 1 {
			_dat.GetGatewayMocks = _dat.GetGatewayMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGateway }
	_dat.mutex.Unlock()
	return _fn(opts...)
}

func (_recv *clientRest) _GetGateway_Do(fn func(...rest.RequestOpt) (*discord.Gateway, error)) {
	if _recv == nil {
		panic("clientRest.GetGateway: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGatewayMocks = []func(...rest.RequestOpt) (*discord.Gateway, error){}
	} else if len(_dat.GetGatewayMocks) < 2 {
		_dat.GetGatewayMocks = []func(...rest.RequestOpt) (*discord.Gateway, error){fn, fn}
	} else {
		_dat.GetGatewayMocks = _dat.GetGatewayMocks[:len(_dat.GetGatewayMocks)-1]
		_dat.GetGatewayMocks = append(_dat.GetGatewayMocks, fn)
		_dat.GetGatewayMocks = append(_dat.GetGatewayMocks, fn)
	}
}

func (_recv *clientRest) _GetGateway_Stub() {
	_recv._GetGateway_Do(func(...rest.RequestOpt) (r0 *discord.Gateway, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGateway_Return(r0 *discord.Gateway, r1 error) {
	_recv._GetGateway_Do(func(...rest.RequestOpt) (*discord.Gateway, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGateway_Calls() []_clientRest_GetGateway_Call {
	if _recv == nil {
		panic("clientRest.GetGateway: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGatewayCalls
}

func (_recv *clientRest) GetGatewayBot(opts ...rest.RequestOpt) (*discord.GatewayBot, error) {
	if _recv == nil {
		panic("clientRest.GetGatewayBot: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGatewayBotCalls = append(_dat.GetGatewayBotCalls, _clientRest_GetGatewayBot_Call{opts})
	var _fn func(...rest.RequestOpt) (*discord.GatewayBot, error)
	if len(_dat.GetGatewayBotMocks) > 0 {
		_fn = _dat.GetGatewayBotMocks[0]
		if len(_dat.GetGatewayBotMocks) > 1 {
			_dat.GetGatewayBotMocks = _dat.GetGatewayBotMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGatewayBot }
	_dat.mutex.Unlock()
	return _fn(opts...)
}

func (_recv *clientRest) _GetGatewayBot_Do(fn func(...rest.RequestOpt) (*discord.GatewayBot, error)) {
	if _recv == nil {
		panic("clientRest.GetGatewayBot: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGatewayBotMocks = []func(...rest.RequestOpt) (*discord.GatewayBot, error){}
	} else if len(_dat.GetGatewayBotMocks) < 2 {
		_dat.GetGatewayBotMocks = []func(...rest.RequestOpt) (*discord.GatewayBot, error){fn, fn}
	} else {
		_dat.GetGatewayBotMocks = _dat.GetGatewayBotMocks[:len(_dat.GetGatewayBotMocks)-1]
		_dat.GetGatewayBotMocks = append(_dat.GetGatewayBotMocks, fn)
		_dat.GetGatewayBotMocks = append(_dat.GetGatewayBotMocks, fn)
	}
}

func (_recv *clientRest) _GetGatewayBot_Stub() {
	_recv._GetGatewayBot_Do(func(...rest.RequestOpt) (r0 *discord.GatewayBot, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGatewayBot_Return(r0 *discord.GatewayBot, r1 error) {
	_recv._GetGatewayBot_Do(func(...rest.RequestOpt) (*discord.GatewayBot, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGatewayBot_Calls() []_clientRest_GetGatewayBot_Call {
	if _recv == nil {
		panic("clientRest.GetGatewayBot: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGatewayBotCalls
}

func (_recv *clientRest) GetGlobalCommand(applicationID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) (discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.GetGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGlobalCommandCalls = append(_dat.GetGlobalCommandCalls, _clientRest_GetGlobalCommand_Call{applicationID, commandID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error)
	if len(_dat.GetGlobalCommandMocks) > 0 {
		_fn = _dat.GetGlobalCommandMocks[0]
		if len(_dat.GetGlobalCommandMocks) > 1 {
			_dat.GetGlobalCommandMocks = _dat.GetGlobalCommandMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGlobalCommand }
	_dat.mutex.Unlock()
	return _fn(applicationID, commandID, opts...)
}

func (_recv *clientRest) _GetGlobalCommand_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.GetGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGlobalCommandMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error){}
	} else if len(_dat.GetGlobalCommandMocks) < 2 {
		_dat.GetGlobalCommandMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.GetGlobalCommandMocks = _dat.GetGlobalCommandMocks[:len(_dat.GetGlobalCommandMocks)-1]
		_dat.GetGlobalCommandMocks = append(_dat.GetGlobalCommandMocks, fn)
		_dat.GetGlobalCommandMocks = append(_dat.GetGlobalCommandMocks, fn)
	}
}

func (_recv *clientRest) _GetGlobalCommand_Stub() {
	_recv._GetGlobalCommand_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGlobalCommand_Return(r0 discord.ApplicationCommand, r1 error) {
	_recv._GetGlobalCommand_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGlobalCommand_Calls() []_clientRest_GetGlobalCommand_Call {
	if _recv == nil {
		panic("clientRest.GetGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGlobalCommandCalls
}

func (_recv *clientRest) GetGlobalCommands(applicationID snowflake.ID, withLocalizations bool, opts ...rest.RequestOpt) ([]discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.GetGlobalCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGlobalCommandsCalls = append(_dat.GetGlobalCommandsCalls, _clientRest_GetGlobalCommands_Call{applicationID, withLocalizations, opts})
	var _fn func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error)
	if len(_dat.GetGlobalCommandsMocks) > 0 {
		_fn = _dat.GetGlobalCommandsMocks[0]
		if len(_dat.GetGlobalCommandsMocks) > 1 {
			_dat.GetGlobalCommandsMocks = _dat.GetGlobalCommandsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGlobalCommands }
	_dat.mutex.Unlock()
	return _fn(applicationID, withLocalizations, opts...)
}

func (_recv *clientRest) _GetGlobalCommands_Do(fn func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.GetGlobalCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGlobalCommandsMocks = []func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error){}
	} else if len(_dat.GetGlobalCommandsMocks) < 2 {
		_dat.GetGlobalCommandsMocks = []func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.GetGlobalCommandsMocks = _dat.GetGlobalCommandsMocks[:len(_dat.GetGlobalCommandsMocks)-1]
		_dat.GetGlobalCommandsMocks = append(_dat.GetGlobalCommandsMocks, fn)
		_dat.GetGlobalCommandsMocks = append(_dat.GetGlobalCommandsMocks, fn)
	}
}

func (_recv *clientRest) _GetGlobalCommands_Stub() {
	_recv._GetGlobalCommands_Do(func(snowflake.ID, bool, ...rest.RequestOpt) (r0 []discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGlobalCommands_Return(r0 []discord.ApplicationCommand, r1 error) {
	_recv._GetGlobalCommands_Do(func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGlobalCommands_Calls() []_clientRest_GetGlobalCommands_Call {
	if _recv == nil {
		panic("clientRest.GetGlobalCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGlobalCommandsCalls
}

func (_recv *clientRest) GetGuild(guildID snowflake.ID, withCounts bool, opts ...rest.RequestOpt) (*discord.RestGuild, error) {
	if _recv == nil {
		panic("clientRest.GetGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildCalls = append(_dat.GetGuildCalls, _clientRest_GetGuild_Call{guildID, withCounts, opts})
	var _fn func(snowflake.ID, bool, ...rest.RequestOpt) (*discord.RestGuild, error)
	if len(_dat.GetGuildMocks) > 0 {
		_fn = _dat.GetGuildMocks[0]
		if len(_dat.GetGuildMocks) > 1 {
			_dat.GetGuildMocks = _dat.GetGuildMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuild }
	_dat.mutex.Unlock()
	return _fn(guildID, withCounts, opts...)
}

func (_recv *clientRest) _GetGuild_Do(fn func(snowflake.ID, bool, ...rest.RequestOpt) (*discord.RestGuild, error)) {
	if _recv == nil {
		panic("clientRest.GetGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildMocks = []func(snowflake.ID, bool, ...rest.RequestOpt) (*discord.RestGuild, error){}
	} else if len(_dat.GetGuildMocks) < 2 {
		_dat.GetGuildMocks = []func(snowflake.ID, bool, ...rest.RequestOpt) (*discord.RestGuild, error){fn, fn}
	} else {
		_dat.GetGuildMocks = _dat.GetGuildMocks[:len(_dat.GetGuildMocks)-1]
		_dat.GetGuildMocks = append(_dat.GetGuildMocks, fn)
		_dat.GetGuildMocks = append(_dat.GetGuildMocks, fn)
	}
}

func (_recv *clientRest) _GetGuild_Stub() {
	_recv._GetGuild_Do(func(snowflake.ID, bool, ...rest.RequestOpt) (r0 *discord.RestGuild, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuild_Return(r0 *discord.RestGuild, r1 error) {
	_recv._GetGuild_Do(func(snowflake.ID, bool, ...rest.RequestOpt) (*discord.RestGuild, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuild_Calls() []_clientRest_GetGuild_Call {
	if _recv == nil {
		panic("clientRest.GetGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildCalls
}

func (_recv *clientRest) GetGuildChannels(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.GuildChannel, error) {
	if _recv == nil {
		panic("clientRest.GetGuildChannels: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildChannelsCalls = append(_dat.GetGuildChannelsCalls, _clientRest_GetGuildChannels_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildChannel, error)
	if len(_dat.GetGuildChannelsMocks) > 0 {
		_fn = _dat.GetGuildChannelsMocks[0]
		if len(_dat.GetGuildChannelsMocks) > 1 {
			_dat.GetGuildChannelsMocks = _dat.GetGuildChannelsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildChannels }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildChannels_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildChannel, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildChannels: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildChannelsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildChannel, error){}
	} else if len(_dat.GetGuildChannelsMocks) < 2 {
		_dat.GetGuildChannelsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildChannel, error){fn, fn}
	} else {
		_dat.GetGuildChannelsMocks = _dat.GetGuildChannelsMocks[:len(_dat.GetGuildChannelsMocks)-1]
		_dat.GetGuildChannelsMocks = append(_dat.GetGuildChannelsMocks, fn)
		_dat.GetGuildChannelsMocks = append(_dat.GetGuildChannelsMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildChannels_Stub() {
	_recv._GetGuildChannels_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.GuildChannel, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildChannels_Return(r0 []discord.GuildChannel, r1 error) {
	_recv._GetGuildChannels_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildChannel, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildChannels_Calls() []_clientRest_GetGuildChannels_Call {
	if _recv == nil {
		panic("clientRest.GetGuildChannels: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildChannelsCalls
}

func (_recv *clientRest) GetGuildCommand(applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) (discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.GetGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildCommandCalls = append(_dat.GetGuildCommandCalls, _clientRest_GetGuildCommand_Call{applicationID, guildID, commandID, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error)
	if len(_dat.GetGuildCommandMocks) > 0 {
		_fn = _dat.GetGuildCommandMocks[0]
		if len(_dat.GetGuildCommandMocks) > 1 {
			_dat.GetGuildCommandMocks = _dat.GetGuildCommandMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildCommand }
	_dat.mutex.Unlock()
	return _fn(applicationID, guildID, commandID, opts...)
}

func (_recv *clientRest) _GetGuildCommand_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildCommandMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error){}
	} else if len(_dat.GetGuildCommandMocks) < 2 {
		_dat.GetGuildCommandMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.GetGuildCommandMocks = _dat.GetGuildCommandMocks[:len(_dat.GetGuildCommandMocks)-1]
		_dat.GetGuildCommandMocks = append(_dat.GetGuildCommandMocks, fn)
		_dat.GetGuildCommandMocks = append(_dat.GetGuildCommandMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildCommand_Stub() {
	_recv._GetGuildCommand_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildCommand_Return(r0 discord.ApplicationCommand, r1 error) {
	_recv._GetGuildCommand_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildCommand_Calls() []_clientRest_GetGuildCommand_Call {
	if _recv == nil {
		panic("clientRest.GetGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildCommandCalls
}

func (_recv *clientRest) GetGuildCommandPermissions(applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, opts ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error) {
	if _recv == nil {
		panic("clientRest.GetGuildCommandPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildCommandPermissionsCalls = append(_dat.GetGuildCommandPermissionsCalls, _clientRest_GetGuildCommandPermissions_Call{applicationID, guildID, commandID, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error)
	if len(_dat.GetGuildCommandPermissionsMocks) > 0 {
		_fn = _dat.GetGuildCommandPermissionsMocks[0]
		if len(_dat.GetGuildCommandPermissionsMocks) > 1 {
			_dat.GetGuildCommandPermissionsMocks = _dat.GetGuildCommandPermissionsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildCommandPermissions }
	_dat.mutex.Unlock()
	return _fn(applicationID, guildID, commandID, opts...)
}

func (_recv *clientRest) _GetGuildCommandPermissions_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildCommandPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildCommandPermissionsMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error){}
	} else if len(_dat.GetGuildCommandPermissionsMocks) < 2 {
		_dat.GetGuildCommandPermissionsMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error){fn, fn}
	} else {
		_dat.GetGuildCommandPermissionsMocks = _dat.GetGuildCommandPermissionsMocks[:len(_dat.GetGuildCommandPermissionsMocks)-1]
		_dat.GetGuildCommandPermissionsMocks = append(_dat.GetGuildCommandPermissionsMocks, fn)
		_dat.GetGuildCommandPermissionsMocks = append(_dat.GetGuildCommandPermissionsMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildCommandPermissions_Stub() {
	_recv._GetGuildCommandPermissions_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.ApplicationCommandPermissions, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildCommandPermissions_Return(r0 *discord.ApplicationCommandPermissions, r1 error) {
	_recv._GetGuildCommandPermissions_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildCommandPermissions_Calls() []_clientRest_GetGuildCommandPermissions_Call {
	if _recv == nil {
		panic("clientRest.GetGuildCommandPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildCommandPermissionsCalls
}

func (_recv *clientRest) GetGuildCommands(applicationID snowflake.ID, guildID snowflake.ID, withLocalizations bool, opts ...rest.RequestOpt) ([]discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.GetGuildCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildCommandsCalls = append(_dat.GetGuildCommandsCalls, _clientRest_GetGuildCommands_Call{applicationID, guildID, withLocalizations, opts})
	var _fn func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error)
	if len(_dat.GetGuildCommandsMocks) > 0 {
		_fn = _dat.GetGuildCommandsMocks[0]
		if len(_dat.GetGuildCommandsMocks) > 1 {
			_dat.GetGuildCommandsMocks = _dat.GetGuildCommandsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildCommands }
	_dat.mutex.Unlock()
	return _fn(applicationID, guildID, withLocalizations, opts...)
}

func (_recv *clientRest) _GetGuildCommands_Do(fn func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildCommandsMocks = []func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error){}
	} else if len(_dat.GetGuildCommandsMocks) < 2 {
		_dat.GetGuildCommandsMocks = []func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.GetGuildCommandsMocks = _dat.GetGuildCommandsMocks[:len(_dat.GetGuildCommandsMocks)-1]
		_dat.GetGuildCommandsMocks = append(_dat.GetGuildCommandsMocks, fn)
		_dat.GetGuildCommandsMocks = append(_dat.GetGuildCommandsMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildCommands_Stub() {
	_recv._GetGuildCommands_Do(func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (r0 []discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildCommands_Return(r0 []discord.ApplicationCommand, r1 error) {
	_recv._GetGuildCommands_Do(func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) ([]discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildCommands_Calls() []_clientRest_GetGuildCommands_Call {
	if _recv == nil {
		panic("clientRest.GetGuildCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildCommandsCalls
}

func (_recv *clientRest) GetGuildCommandsPermissions(applicationID snowflake.ID, guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ApplicationCommandPermissions, error) {
	if _recv == nil {
		panic("clientRest.GetGuildCommandsPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildCommandsPermissionsCalls = append(_dat.GetGuildCommandsPermissionsCalls, _clientRest_GetGuildCommandsPermissions_Call{applicationID, guildID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationCommandPermissions, error)
	if len(_dat.GetGuildCommandsPermissionsMocks) > 0 {
		_fn = _dat.GetGuildCommandsPermissionsMocks[0]
		if len(_dat.GetGuildCommandsPermissionsMocks) > 1 {
			_dat.GetGuildCommandsPermissionsMocks = _dat.GetGuildCommandsPermissionsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildCommandsPermissions }
	_dat.mutex.Unlock()
	return _fn(applicationID, guildID, opts...)
}

func (_recv *clientRest) _GetGuildCommandsPermissions_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationCommandPermissions, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildCommandsPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildCommandsPermissionsMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationCommandPermissions, error){}
	} else if len(_dat.GetGuildCommandsPermissionsMocks) < 2 {
		_dat.GetGuildCommandsPermissionsMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationCommandPermissions, error){fn, fn}
	} else {
		_dat.GetGuildCommandsPermissionsMocks = _dat.GetGuildCommandsPermissionsMocks[:len(_dat.GetGuildCommandsPermissionsMocks)-1]
		_dat.GetGuildCommandsPermissionsMocks = append(_dat.GetGuildCommandsPermissionsMocks, fn)
		_dat.GetGuildCommandsPermissionsMocks = append(_dat.GetGuildCommandsPermissionsMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildCommandsPermissions_Stub() {
	_recv._GetGuildCommandsPermissions_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 []discord.ApplicationCommandPermissions, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildCommandsPermissions_Return(r0 []discord.ApplicationCommandPermissions, r1 error) {
	_recv._GetGuildCommandsPermissions_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) ([]discord.ApplicationCommandPermissions, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildCommandsPermissions_Calls() []_clientRest_GetGuildCommandsPermissions_Call {
	if _recv == nil {
		panic("clientRest.GetGuildCommandsPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildCommandsPermissionsCalls
}

func (_recv *clientRest) GetGuildInvites(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ExtendedInvite, error) {
	if _recv == nil {
		panic("clientRest.GetGuildInvites: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildInvitesCalls = append(_dat.GetGuildInvitesCalls, _clientRest_GetGuildInvites_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error)
	if len(_dat.GetGuildInvitesMocks) > 0 {
		_fn = _dat.GetGuildInvitesMocks[0]
		if len(_dat.GetGuildInvitesMocks) > 1 {
			_dat.GetGuildInvitesMocks = _dat.GetGuildInvitesMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildInvites }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildInvites_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildInvites: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildInvitesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error){}
	} else if len(_dat.GetGuildInvitesMocks) < 2 {
		_dat.GetGuildInvitesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error){fn, fn}
	} else {
		_dat.GetGuildInvitesMocks = _dat.GetGuildInvitesMocks[:len(_dat.GetGuildInvitesMocks)-1]
		_dat.GetGuildInvitesMocks = append(_dat.GetGuildInvitesMocks, fn)
		_dat.GetGuildInvitesMocks = append(_dat.GetGuildInvitesMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildInvites_Stub() {
	_recv._GetGuildInvites_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.ExtendedInvite, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildInvites_Return(r0 []discord.ExtendedInvite, r1 error) {
	_recv._GetGuildInvites_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.ExtendedInvite, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildInvites_Calls() []_clientRest_GetGuildInvites_Call {
	if _recv == nil {
		panic("clientRest.GetGuildInvites: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildInvitesCalls
}

func (_recv *clientRest) GetGuildOnboarding(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildOnboarding, error) {
	if _recv == nil {
		panic("clientRest.GetGuildOnboarding: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildOnboardingCalls = append(_dat.GetGuildOnboardingCalls, _clientRest_GetGuildOnboarding_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildOnboarding, error)
	if len(_dat.GetGuildOnboardingMocks) > 0 {
		_fn = _dat.GetGuildOnboardingMocks[0]
		if len(_dat.GetGuildOnboardingMocks) > 1 {
			_dat.GetGuildOnboardingMocks = _dat.GetGuildOnboardingMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildOnboarding }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildOnboarding_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildOnboarding, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildOnboarding: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildOnboardingMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildOnboarding, error){}
	} else if len(_dat.GetGuildOnboardingMocks) < 2 {
		_dat.GetGuildOnboardingMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildOnboarding, error){fn, fn}
	} else {
		_dat.GetGuildOnboardingMocks = _dat.GetGuildOnboardingMocks[:len(_dat.GetGuildOnboardingMocks)-1]
		_dat.GetGuildOnboardingMocks = append(_dat.GetGuildOnboardingMocks, fn)
		_dat.GetGuildOnboardingMocks = append(_dat.GetGuildOnboardingMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildOnboarding_Stub() {
	_recv._GetGuildOnboarding_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.GuildOnboarding, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildOnboarding_Return(r0 *discord.GuildOnboarding, r1 error) {
	_recv._GetGuildOnboarding_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildOnboarding, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildOnboarding_Calls() []_clientRest_GetGuildOnboarding_Call {
	if _recv == nil {
		panic("clientRest.GetGuildOnboarding: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildOnboardingCalls
}

func (_recv *clientRest) GetGuildPreview(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildPreview, error) {
	if _recv == nil {
		panic("clientRest.GetGuildPreview: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildPreviewCalls = append(_dat.GetGuildPreviewCalls, _clientRest_GetGuildPreview_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildPreview, error)
	if len(_dat.GetGuildPreviewMocks) > 0 {
		_fn = _dat.GetGuildPreviewMocks[0]
		if len(_dat.GetGuildPreviewMocks) > 1 {
			_dat.GetGuildPreviewMocks = _dat.GetGuildPreviewMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildPreview }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildPreview_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildPreview, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildPreview: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildPreviewMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildPreview, error){}
	} else if len(_dat.GetGuildPreviewMocks) < 2 {
		_dat.GetGuildPreviewMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildPreview, error){fn, fn}
	} else {
		_dat.GetGuildPreviewMocks = _dat.GetGuildPreviewMocks[:len(_dat.GetGuildPreviewMocks)-1]
		_dat.GetGuildPreviewMocks = append(_dat.GetGuildPreviewMocks, fn)
		_dat.GetGuildPreviewMocks = append(_dat.GetGuildPreviewMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildPreview_Stub() {
	_recv._GetGuildPreview_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.GuildPreview, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildPreview_Return(r0 *discord.GuildPreview, r1 error) {
	_recv._GetGuildPreview_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildPreview, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildPreview_Calls() []_clientRest_GetGuildPreview_Call {
	if _recv == nil {
		panic("clientRest.GetGuildPreview: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildPreviewCalls
}

func (_recv *clientRest) GetGuildPruneCount(guildID snowflake.ID, days int, includeRoles []snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildPruneResult, error) {
	if _recv == nil {
		panic("clientRest.GetGuildPruneCount: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildPruneCountCalls = append(_dat.GetGuildPruneCountCalls, _clientRest_GetGuildPruneCount_Call{guildID, days, includeRoles, opts})
	var _fn func(snowflake.ID, int, []snowflake.ID, ...rest.RequestOpt) (*discord.GuildPruneResult, error)
	if len(_dat.GetGuildPruneCountMocks) > 0 {
		_fn = _dat.GetGuildPruneCountMocks[0]
		if len(_dat.GetGuildPruneCountMocks) > 1 {
			_dat.GetGuildPruneCountMocks = _dat.GetGuildPruneCountMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildPruneCount }
	_dat.mutex.Unlock()
	return _fn(guildID, days, includeRoles, opts...)
}

func (_recv *clientRest) _GetGuildPruneCount_Do(fn func(snowflake.ID, int, []snowflake.ID, ...rest.RequestOpt) (*discord.GuildPruneResult, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildPruneCount: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildPruneCountMocks = []func(snowflake.ID, int, []snowflake.ID, ...rest.RequestOpt) (*discord.GuildPruneResult, error){}
	} else if len(_dat.GetGuildPruneCountMocks) < 2 {
		_dat.GetGuildPruneCountMocks = []func(snowflake.ID, int, []snowflake.ID, ...rest.RequestOpt) (*discord.GuildPruneResult, error){fn, fn}
	} else {
		_dat.GetGuildPruneCountMocks = _dat.GetGuildPruneCountMocks[:len(_dat.GetGuildPruneCountMocks)-1]
		_dat.GetGuildPruneCountMocks = append(_dat.GetGuildPruneCountMocks, fn)
		_dat.GetGuildPruneCountMocks = append(_dat.GetGuildPruneCountMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildPruneCount_Stub() {
	_recv._GetGuildPruneCount_Do(func(snowflake.ID, int, []snowflake.ID, ...rest.RequestOpt) (r0 *discord.GuildPruneResult, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildPruneCount_Return(r0 *discord.GuildPruneResult, r1 error) {
	_recv._GetGuildPruneCount_Do(func(snowflake.ID, int, []snowflake.ID, ...rest.RequestOpt) (*discord.GuildPruneResult, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildPruneCount_Calls() []_clientRest_GetGuildPruneCount_Call {
	if _recv == nil {
		panic("clientRest.GetGuildPruneCount: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildPruneCountCalls
}

func (_recv *clientRest) GetGuildScheduledEvent(guildID snowflake.ID, guildScheduledEventID snowflake.ID, withUserCounts bool, opts ...rest.RequestOpt) (*discord.GuildScheduledEvent, error) {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildScheduledEventCalls = append(_dat.GetGuildScheduledEventCalls, _clientRest_GetGuildScheduledEvent_Call{guildID, guildScheduledEventID, withUserCounts, opts})
	var _fn func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)
	if len(_dat.GetGuildScheduledEventMocks) > 0 {
		_fn = _dat.GetGuildScheduledEventMocks[0]
		if len(_dat.GetGuildScheduledEventMocks) > 1 {
			_dat.GetGuildScheduledEventMocks = _dat.GetGuildScheduledEventMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildScheduledEvent }
	_dat.mutex.Unlock()
	return _fn(guildID, guildScheduledEventID, withUserCounts, opts...)
}

func (_recv *clientRest) _GetGuildScheduledEvent_Do(fn func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildScheduledEventMocks = []func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error){}
	} else if len(_dat.GetGuildScheduledEventMocks) < 2 {
		_dat.GetGuildScheduledEventMocks = []func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error){fn, fn}
	} else {
		_dat.GetGuildScheduledEventMocks = _dat.GetGuildScheduledEventMocks[:len(_dat.GetGuildScheduledEventMocks)-1]
		_dat.GetGuildScheduledEventMocks = append(_dat.GetGuildScheduledEventMocks, fn)
		_dat.GetGuildScheduledEventMocks = append(_dat.GetGuildScheduledEventMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildScheduledEvent_Stub() {
	_recv._GetGuildScheduledEvent_Do(func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (r0 *discord.GuildScheduledEvent, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildScheduledEvent_Return(r0 *discord.GuildScheduledEvent, r1 error) {
	_recv._GetGuildScheduledEvent_Do(func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildScheduledEvent_Calls() []_clientRest_GetGuildScheduledEvent_Call {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildScheduledEventCalls
}

func (_recv *clientRest) GetGuildScheduledEventUsers(guildID snowflake.ID, guildScheduledEventID snowflake.ID, withMember bool, before snowflake.ID, after snowflake.ID, limit int, opts ...rest.RequestOpt) ([]discord.GuildScheduledEventUser, error) {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEventUsers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildScheduledEventUsersCalls = append(_dat.GetGuildScheduledEventUsersCalls, _clientRest_GetGuildScheduledEventUsers_Call{guildID, guildScheduledEventID, withMember, before, after, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, bool, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.GuildScheduledEventUser, error)
	if len(_dat.GetGuildScheduledEventUsersMocks) > 0 {
		_fn = _dat.GetGuildScheduledEventUsersMocks[0]
		if len(_dat.GetGuildScheduledEventUsersMocks) > 1 {
			_dat.GetGuildScheduledEventUsersMocks = _dat.GetGuildScheduledEventUsersMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildScheduledEventUsers }
	_dat.mutex.Unlock()
	return _fn(guildID, guildScheduledEventID, withMember, before, after, limit, opts...)
}

func (_recv *clientRest) _GetGuildScheduledEventUsers_Do(fn func(snowflake.ID, snowflake.ID, bool, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.GuildScheduledEventUser, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEventUsers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildScheduledEventUsersMocks = []func(snowflake.ID, snowflake.ID, bool, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.GuildScheduledEventUser, error){}
	} else if len(_dat.GetGuildScheduledEventUsersMocks) < 2 {
		_dat.GetGuildScheduledEventUsersMocks = []func(snowflake.ID, snowflake.ID, bool, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.GuildScheduledEventUser, error){fn, fn}
	} else {
		_dat.GetGuildScheduledEventUsersMocks = _dat.GetGuildScheduledEventUsersMocks[:len(_dat.GetGuildScheduledEventUsersMocks)-1]
		_dat.GetGuildScheduledEventUsersMocks = append(_dat.GetGuildScheduledEventUsersMocks, fn)
		_dat.GetGuildScheduledEventUsersMocks = append(_dat.GetGuildScheduledEventUsersMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildScheduledEventUsers_Stub() {
	_recv._GetGuildScheduledEventUsers_Do(func(snowflake.ID, snowflake.ID, bool, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (r0 []discord.GuildScheduledEventUser, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildScheduledEventUsers_Return(r0 []discord.GuildScheduledEventUser, r1 error) {
	_recv._GetGuildScheduledEventUsers_Do(func(snowflake.ID, snowflake.ID, bool, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.GuildScheduledEventUser, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildScheduledEventUsers_Calls() []_clientRest_GetGuildScheduledEventUsers_Call {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEventUsers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildScheduledEventUsersCalls
}

func (_recv *clientRest) GetGuildScheduledEventUsersPage(guildID snowflake.ID, guildScheduledEventID snowflake.ID, withMember bool, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.Page[discord.GuildScheduledEventUser] {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEventUsersPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildScheduledEventUsersPageCalls = append(_dat.GetGuildScheduledEventUsersPageCalls, _clientRest_GetGuildScheduledEventUsersPage_Call{guildID, guildScheduledEventID, withMember, startID, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, bool, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.GuildScheduledEventUser])
	if len(_dat.GetGuildScheduledEventUsersPageMocks) > 0 {
		_fn = _dat.GetGuildScheduledEventUsersPageMocks[0]
		if len(_dat.GetGuildScheduledEventUsersPageMocks) > 1 {
			_dat.GetGuildScheduledEventUsersPageMocks = _dat.GetGuildScheduledEventUsersPageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildScheduledEventUsersPage }
	_dat.mutex.Unlock()
	return _fn(guildID, guildScheduledEventID, withMember, startID, limit, opts...)
}

func (_recv *clientRest) _GetGuildScheduledEventUsersPage_Do(fn func(snowflake.ID, snowflake.ID, bool, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.GuildScheduledEventUser])) {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEventUsersPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildScheduledEventUsersPageMocks = []func(snowflake.ID, snowflake.ID, bool, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.GuildScheduledEventUser]){}
	} else if len(_dat.GetGuildScheduledEventUsersPageMocks) < 2 {
		_dat.GetGuildScheduledEventUsersPageMocks = []func(snowflake.ID, snowflake.ID, bool, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.GuildScheduledEventUser]){fn, fn}
	} else {
		_dat.GetGuildScheduledEventUsersPageMocks = _dat.GetGuildScheduledEventUsersPageMocks[:len(_dat.GetGuildScheduledEventUsersPageMocks)-1]
		_dat.GetGuildScheduledEventUsersPageMocks = append(_dat.GetGuildScheduledEventUsersPageMocks, fn)
		_dat.GetGuildScheduledEventUsersPageMocks = append(_dat.GetGuildScheduledEventUsersPageMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildScheduledEventUsersPage_Stub() {
	_recv._GetGuildScheduledEventUsersPage_Do(func(snowflake.ID, snowflake.ID, bool, snowflake.ID, int, ...rest.RequestOpt) (r0 rest.Page[discord.GuildScheduledEventUser]) {
		return r0
	})
}

func (_recv *clientRest) _GetGuildScheduledEventUsersPage_Return(r0 rest.Page[discord.GuildScheduledEventUser]) {
	_recv._GetGuildScheduledEventUsersPage_Do(func(snowflake.ID, snowflake.ID, bool, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.GuildScheduledEventUser]) {
		return r0
	})
}

func (_recv *clientRest) _GetGuildScheduledEventUsersPage_Calls() []_clientRest_GetGuildScheduledEventUsersPage_Call {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEventUsersPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildScheduledEventUsersPageCalls
}

func (_recv *clientRest) GetGuildScheduledEvents(guildID snowflake.ID, withUserCounts bool, opts ...rest.RequestOpt) ([]discord.GuildScheduledEvent, error) {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEvents: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildScheduledEventsCalls = append(_dat.GetGuildScheduledEventsCalls, _clientRest_GetGuildScheduledEvents_Call{guildID, withUserCounts, opts})
	var _fn func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.GuildScheduledEvent, error)
	if len(_dat.GetGuildScheduledEventsMocks) > 0 {
		_fn = _dat.GetGuildScheduledEventsMocks[0]
		if len(_dat.GetGuildScheduledEventsMocks) > 1 {
			_dat.GetGuildScheduledEventsMocks = _dat.GetGuildScheduledEventsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildScheduledEvents }
	_dat.mutex.Unlock()
	return _fn(guildID, withUserCounts, opts...)
}

func (_recv *clientRest) _GetGuildScheduledEvents_Do(fn func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.GuildScheduledEvent, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEvents: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildScheduledEventsMocks = []func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.GuildScheduledEvent, error){}
	} else if len(_dat.GetGuildScheduledEventsMocks) < 2 {
		_dat.GetGuildScheduledEventsMocks = []func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.GuildScheduledEvent, error){fn, fn}
	} else {
		_dat.GetGuildScheduledEventsMocks = _dat.GetGuildScheduledEventsMocks[:len(_dat.GetGuildScheduledEventsMocks)-1]
		_dat.GetGuildScheduledEventsMocks = append(_dat.GetGuildScheduledEventsMocks, fn)
		_dat.GetGuildScheduledEventsMocks = append(_dat.GetGuildScheduledEventsMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildScheduledEvents_Stub() {
	_recv._GetGuildScheduledEvents_Do(func(snowflake.ID, bool, ...rest.RequestOpt) (r0 []discord.GuildScheduledEvent, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildScheduledEvents_Return(r0 []discord.GuildScheduledEvent, r1 error) {
	_recv._GetGuildScheduledEvents_Do(func(snowflake.ID, bool, ...rest.RequestOpt) ([]discord.GuildScheduledEvent, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildScheduledEvents_Calls() []_clientRest_GetGuildScheduledEvents_Call {
	if _recv == nil {
		panic("clientRest.GetGuildScheduledEvents: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildScheduledEventsCalls
}

func (_recv *clientRest) GetGuildSoundboardSound(guildID snowflake.ID, soundID snowflake.ID, opts ...rest.RequestOpt) (*discord.SoundboardSound, error) {
	if _recv == nil {
		panic("clientRest.GetGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildSoundboardSoundCalls = append(_dat.GetGuildSoundboardSoundCalls, _clientRest_GetGuildSoundboardSound_Call{guildID, soundID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.SoundboardSound, error)
	if len(_dat.GetGuildSoundboardSoundMocks) > 0 {
		_fn = _dat.GetGuildSoundboardSoundMocks[0]
		if len(_dat.GetGuildSoundboardSoundMocks) > 1 {
			_dat.GetGuildSoundboardSoundMocks = _dat.GetGuildSoundboardSoundMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildSoundboardSound }
	_dat.mutex.Unlock()
	return _fn(guildID, soundID, opts...)
}

func (_recv *clientRest) _GetGuildSoundboardSound_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.SoundboardSound, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildSoundboardSoundMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.SoundboardSound, error){}
	} else if len(_dat.GetGuildSoundboardSoundMocks) < 2 {
		_dat.GetGuildSoundboardSoundMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.SoundboardSound, error){fn, fn}
	} else {
		_dat.GetGuildSoundboardSoundMocks = _dat.GetGuildSoundboardSoundMocks[:len(_dat.GetGuildSoundboardSoundMocks)-1]
		_dat.GetGuildSoundboardSoundMocks = append(_dat.GetGuildSoundboardSoundMocks, fn)
		_dat.GetGuildSoundboardSoundMocks = append(_dat.GetGuildSoundboardSoundMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildSoundboardSound_Stub() {
	_recv._GetGuildSoundboardSound_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.SoundboardSound, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildSoundboardSound_Return(r0 *discord.SoundboardSound, r1 error) {
	_recv._GetGuildSoundboardSound_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.SoundboardSound, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildSoundboardSound_Calls() []_clientRest_GetGuildSoundboardSound_Call {
	if _recv == nil {
		panic("clientRest.GetGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildSoundboardSoundCalls
}

func (_recv *clientRest) GetGuildSoundboardSounds(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.SoundboardSound, error) {
	if _recv == nil {
		panic("clientRest.GetGuildSoundboardSounds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildSoundboardSoundsCalls = append(_dat.GetGuildSoundboardSoundsCalls, _clientRest_GetGuildSoundboardSounds_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.SoundboardSound, error)
	if len(_dat.GetGuildSoundboardSoundsMocks) > 0 {
		_fn = _dat.GetGuildSoundboardSoundsMocks[0]
		if len(_dat.GetGuildSoundboardSoundsMocks) > 1 {
			_dat.GetGuildSoundboardSoundsMocks = _dat.GetGuildSoundboardSoundsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildSoundboardSounds }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildSoundboardSounds_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.SoundboardSound, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildSoundboardSounds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildSoundboardSoundsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.SoundboardSound, error){}
	} else if len(_dat.GetGuildSoundboardSoundsMocks) < 2 {
		_dat.GetGuildSoundboardSoundsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.SoundboardSound, error){fn, fn}
	} else {
		_dat.GetGuildSoundboardSoundsMocks = _dat.GetGuildSoundboardSoundsMocks[:len(_dat.GetGuildSoundboardSoundsMocks)-1]
		_dat.GetGuildSoundboardSoundsMocks = append(_dat.GetGuildSoundboardSoundsMocks, fn)
		_dat.GetGuildSoundboardSoundsMocks = append(_dat.GetGuildSoundboardSoundsMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildSoundboardSounds_Stub() {
	_recv._GetGuildSoundboardSounds_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.SoundboardSound, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildSoundboardSounds_Return(r0 []discord.SoundboardSound, r1 error) {
	_recv._GetGuildSoundboardSounds_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.SoundboardSound, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildSoundboardSounds_Calls() []_clientRest_GetGuildSoundboardSounds_Call {
	if _recv == nil {
		panic("clientRest.GetGuildSoundboardSounds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildSoundboardSoundsCalls
}

func (_recv *clientRest) GetGuildTemplate(templateCode string, opts ...rest.RequestOpt) (*discord.GuildTemplate, error) {
	if _recv == nil {
		panic("clientRest.GetGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildTemplateCalls = append(_dat.GetGuildTemplateCalls, _clientRest_GetGuildTemplate_Call{templateCode, opts})
	var _fn func(string, ...rest.RequestOpt) (*discord.GuildTemplate, error)
	if len(_dat.GetGuildTemplateMocks) > 0 {
		_fn = _dat.GetGuildTemplateMocks[0]
		if len(_dat.GetGuildTemplateMocks) > 1 {
			_dat.GetGuildTemplateMocks = _dat.GetGuildTemplateMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildTemplate }
	_dat.mutex.Unlock()
	return _fn(templateCode, opts...)
}

func (_recv *clientRest) _GetGuildTemplate_Do(fn func(string, ...rest.RequestOpt) (*discord.GuildTemplate, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildTemplateMocks = []func(string, ...rest.RequestOpt) (*discord.GuildTemplate, error){}
	} else if len(_dat.GetGuildTemplateMocks) < 2 {
		_dat.GetGuildTemplateMocks = []func(string, ...rest.RequestOpt) (*discord.GuildTemplate, error){fn, fn}
	} else {
		_dat.GetGuildTemplateMocks = _dat.GetGuildTemplateMocks[:len(_dat.GetGuildTemplateMocks)-1]
		_dat.GetGuildTemplateMocks = append(_dat.GetGuildTemplateMocks, fn)
		_dat.GetGuildTemplateMocks = append(_dat.GetGuildTemplateMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildTemplate_Stub() {
	_recv._GetGuildTemplate_Do(func(string, ...rest.RequestOpt) (r0 *discord.GuildTemplate, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildTemplate_Return(r0 *discord.GuildTemplate, r1 error) {
	_recv._GetGuildTemplate_Do(func(string, ...rest.RequestOpt) (*discord.GuildTemplate, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildTemplate_Calls() []_clientRest_GetGuildTemplate_Call {
	if _recv == nil {
		panic("clientRest.GetGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildTemplateCalls
}

func (_recv *clientRest) GetGuildTemplates(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.GuildTemplate, error) {
	if _recv == nil {
		panic("clientRest.GetGuildTemplates: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildTemplatesCalls = append(_dat.GetGuildTemplatesCalls, _clientRest_GetGuildTemplates_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildTemplate, error)
	if len(_dat.GetGuildTemplatesMocks) > 0 {
		_fn = _dat.GetGuildTemplatesMocks[0]
		if len(_dat.GetGuildTemplatesMocks) > 1 {
			_dat.GetGuildTemplatesMocks = _dat.GetGuildTemplatesMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildTemplates }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildTemplates_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildTemplate, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildTemplates: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildTemplatesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildTemplate, error){}
	} else if len(_dat.GetGuildTemplatesMocks) < 2 {
		_dat.GetGuildTemplatesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildTemplate, error){fn, fn}
	} else {
		_dat.GetGuildTemplatesMocks = _dat.GetGuildTemplatesMocks[:len(_dat.GetGuildTemplatesMocks)-1]
		_dat.GetGuildTemplatesMocks = append(_dat.GetGuildTemplatesMocks, fn)
		_dat.GetGuildTemplatesMocks = append(_dat.GetGuildTemplatesMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildTemplates_Stub() {
	_recv._GetGuildTemplates_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.GuildTemplate, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildTemplates_Return(r0 []discord.GuildTemplate, r1 error) {
	_recv._GetGuildTemplates_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.GuildTemplate, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildTemplates_Calls() []_clientRest_GetGuildTemplates_Call {
	if _recv == nil {
		panic("clientRest.GetGuildTemplates: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildTemplatesCalls
}

func (_recv *clientRest) GetGuildVanityURL(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.PartialInvite, error) {
	if _recv == nil {
		panic("clientRest.GetGuildVanityURL: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildVanityURLCalls = append(_dat.GetGuildVanityURLCalls, _clientRest_GetGuildVanityURL_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.PartialInvite, error)
	if len(_dat.GetGuildVanityURLMocks) > 0 {
		_fn = _dat.GetGuildVanityURLMocks[0]
		if len(_dat.GetGuildVanityURLMocks) > 1 {
			_dat.GetGuildVanityURLMocks = _dat.GetGuildVanityURLMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildVanityURL }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildVanityURL_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.PartialInvite, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildVanityURL: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildVanityURLMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.PartialInvite, error){}
	} else if len(_dat.GetGuildVanityURLMocks) < 2 {
		_dat.GetGuildVanityURLMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.PartialInvite, error){fn, fn}
	} else {
		_dat.GetGuildVanityURLMocks = _dat.GetGuildVanityURLMocks[:len(_dat.GetGuildVanityURLMocks)-1]
		_dat.GetGuildVanityURLMocks = append(_dat.GetGuildVanityURLMocks, fn)
		_dat.GetGuildVanityURLMocks = append(_dat.GetGuildVanityURLMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildVanityURL_Stub() {
	_recv._GetGuildVanityURL_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.PartialInvite, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildVanityURL_Return(r0 *discord.PartialInvite, r1 error) {
	_recv._GetGuildVanityURL_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.PartialInvite, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildVanityURL_Calls() []_clientRest_GetGuildVanityURL_Call {
	if _recv == nil {
		panic("clientRest.GetGuildVanityURL: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildVanityURLCalls
}

func (_recv *clientRest) GetGuildVoiceRegions(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.VoiceRegion, error) {
	if _recv == nil {
		panic("clientRest.GetGuildVoiceRegions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildVoiceRegionsCalls = append(_dat.GetGuildVoiceRegionsCalls, _clientRest_GetGuildVoiceRegions_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.VoiceRegion, error)
	if len(_dat.GetGuildVoiceRegionsMocks) > 0 {
		_fn = _dat.GetGuildVoiceRegionsMocks[0]
		if len(_dat.GetGuildVoiceRegionsMocks) > 1 {
			_dat.GetGuildVoiceRegionsMocks = _dat.GetGuildVoiceRegionsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildVoiceRegions }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildVoiceRegions_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.VoiceRegion, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildVoiceRegions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildVoiceRegionsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.VoiceRegion, error){}
	} else if len(_dat.GetGuildVoiceRegionsMocks) < 2 {
		_dat.GetGuildVoiceRegionsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.VoiceRegion, error){fn, fn}
	} else {
		_dat.GetGuildVoiceRegionsMocks = _dat.GetGuildVoiceRegionsMocks[:len(_dat.GetGuildVoiceRegionsMocks)-1]
		_dat.GetGuildVoiceRegionsMocks = append(_dat.GetGuildVoiceRegionsMocks, fn)
		_dat.GetGuildVoiceRegionsMocks = append(_dat.GetGuildVoiceRegionsMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildVoiceRegions_Stub() {
	_recv._GetGuildVoiceRegions_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.VoiceRegion, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildVoiceRegions_Return(r0 []discord.VoiceRegion, r1 error) {
	_recv._GetGuildVoiceRegions_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.VoiceRegion, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildVoiceRegions_Calls() []_clientRest_GetGuildVoiceRegions_Call {
	if _recv == nil {
		panic("clientRest.GetGuildVoiceRegions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildVoiceRegionsCalls
}

func (_recv *clientRest) GetGuildWelcomeScreen(guildID snowflake.ID, opts ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error) {
	if _recv == nil {
		panic("clientRest.GetGuildWelcomeScreen: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetGuildWelcomeScreenCalls = append(_dat.GetGuildWelcomeScreenCalls, _clientRest_GetGuildWelcomeScreen_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error)
	if len(_dat.GetGuildWelcomeScreenMocks) > 0 {
		_fn = _dat.GetGuildWelcomeScreenMocks[0]
		if len(_dat.GetGuildWelcomeScreenMocks) > 1 {
			_dat.GetGuildWelcomeScreenMocks = _dat.GetGuildWelcomeScreenMocks[1:]
		}
	} else { _fn = _recv.Rest.GetGuildWelcomeScreen }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetGuildWelcomeScreen_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error)) {
	if _recv == nil {
		panic("clientRest.GetGuildWelcomeScreen: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetGuildWelcomeScreenMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error){}
	} else if len(_dat.GetGuildWelcomeScreenMocks) < 2 {
		_dat.GetGuildWelcomeScreenMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error){fn, fn}
	} else {
		_dat.GetGuildWelcomeScreenMocks = _dat.GetGuildWelcomeScreenMocks[:len(_dat.GetGuildWelcomeScreenMocks)-1]
		_dat.GetGuildWelcomeScreenMocks = append(_dat.GetGuildWelcomeScreenMocks, fn)
		_dat.GetGuildWelcomeScreenMocks = append(_dat.GetGuildWelcomeScreenMocks, fn)
	}
}

func (_recv *clientRest) _GetGuildWelcomeScreen_Stub() {
	_recv._GetGuildWelcomeScreen_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.GuildWelcomeScreen, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildWelcomeScreen_Return(r0 *discord.GuildWelcomeScreen, r1 error) {
	_recv._GetGuildWelcomeScreen_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetGuildWelcomeScreen_Calls() []_clientRest_GetGuildWelcomeScreen_Call {
	if _recv == nil {
		panic("clientRest.GetGuildWelcomeScreen: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetGuildWelcomeScreenCalls
}

func (_recv *clientRest) GetIntegrations(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Integration, error) {
	if _recv == nil {
		panic("clientRest.GetIntegrations: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetIntegrationsCalls = append(_dat.GetIntegrationsCalls, _clientRest_GetIntegrations_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Integration, error)
	if len(_dat.GetIntegrationsMocks) > 0 {
		_fn = _dat.GetIntegrationsMocks[0]
		if len(_dat.GetIntegrationsMocks) > 1 {
			_dat.GetIntegrationsMocks = _dat.GetIntegrationsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetIntegrations }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetIntegrations_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Integration, error)) {
	if _recv == nil {
		panic("clientRest.GetIntegrations: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetIntegrationsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Integration, error){}
	} else if len(_dat.GetIntegrationsMocks) < 2 {
		_dat.GetIntegrationsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Integration, error){fn, fn}
	} else {
		_dat.GetIntegrationsMocks = _dat.GetIntegrationsMocks[:len(_dat.GetIntegrationsMocks)-1]
		_dat.GetIntegrationsMocks = append(_dat.GetIntegrationsMocks, fn)
		_dat.GetIntegrationsMocks = append(_dat.GetIntegrationsMocks, fn)
	}
}

func (_recv *clientRest) _GetIntegrations_Stub() {
	_recv._GetIntegrations_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.Integration, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetIntegrations_Return(r0 []discord.Integration, r1 error) {
	_recv._GetIntegrations_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.Integration, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetIntegrations_Calls() []_clientRest_GetIntegrations_Call {
	if _recv == nil {
		panic("clientRest.GetIntegrations: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetIntegrationsCalls
}

func (_recv *clientRest) GetInteractionResponse(applicationID snowflake.ID, interactionToken string, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.GetInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetInteractionResponseCalls = append(_dat.GetInteractionResponseCalls, _clientRest_GetInteractionResponse_Call{applicationID, interactionToken, opts})
	var _fn func(snowflake.ID, string, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.GetInteractionResponseMocks) > 0 {
		_fn = _dat.GetInteractionResponseMocks[0]
		if len(_dat.GetInteractionResponseMocks) > 1 {
			_dat.GetInteractionResponseMocks = _dat.GetInteractionResponseMocks[1:]
		}
	} else { _fn = _recv.Rest.GetInteractionResponse }
	_dat.mutex.Unlock()
	return _fn(applicationID, interactionToken, opts...)
}

func (_recv *clientRest) _GetInteractionResponse_Do(fn func(snowflake.ID, string, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.GetInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetInteractionResponseMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.GetInteractionResponseMocks) < 2 {
		_dat.GetInteractionResponseMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.GetInteractionResponseMocks = _dat.GetInteractionResponseMocks[:len(_dat.GetInteractionResponseMocks)-1]
		_dat.GetInteractionResponseMocks = append(_dat.GetInteractionResponseMocks, fn)
		_dat.GetInteractionResponseMocks = append(_dat.GetInteractionResponseMocks, fn)
	}
}

func (_recv *clientRest) _GetInteractionResponse_Stub() {
	_recv._GetInteractionResponse_Do(func(snowflake.ID, string, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetInteractionResponse_Return(r0 *discord.Message, r1 error) {
	_recv._GetInteractionResponse_Do(func(snowflake.ID, string, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetInteractionResponse_Calls() []_clientRest_GetInteractionResponse_Call {
	if _recv == nil {
		panic("clientRest.GetInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetInteractionResponseCalls
}

func (_recv *clientRest) GetInvite(code string, opts ...rest.RequestOpt) (*discord.Invite, error) {
	if _recv == nil {
		panic("clientRest.GetInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetInviteCalls = append(_dat.GetInviteCalls, _clientRest_GetInvite_Call{code, opts})
	var _fn func(string, ...rest.RequestOpt) (*discord.Invite, error)
	if len(_dat.GetInviteMocks) > 0 {
		_fn = _dat.GetInviteMocks[0]
		if len(_dat.GetInviteMocks) > 1 {
			_dat.GetInviteMocks = _dat.GetInviteMocks[1:]
		}
	} else { _fn = _recv.Rest.GetInvite }
	_dat.mutex.Unlock()
	return _fn(code, opts...)
}

func (_recv *clientRest) _GetInvite_Do(fn func(string, ...rest.RequestOpt) (*discord.Invite, error)) {
	if _recv == nil {
		panic("clientRest.GetInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetInviteMocks = []func(string, ...rest.RequestOpt) (*discord.Invite, error){}
	} else if len(_dat.GetInviteMocks) < 2 {
		_dat.GetInviteMocks = []func(string, ...rest.RequestOpt) (*discord.Invite, error){fn, fn}
	} else {
		_dat.GetInviteMocks = _dat.GetInviteMocks[:len(_dat.GetInviteMocks)-1]
		_dat.GetInviteMocks = append(_dat.GetInviteMocks, fn)
		_dat.GetInviteMocks = append(_dat.GetInviteMocks, fn)
	}
}

func (_recv *clientRest) _GetInvite_Stub() {
	_recv._GetInvite_Do(func(string, ...rest.RequestOpt) (r0 *discord.Invite, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetInvite_Return(r0 *discord.Invite, r1 error) {
	_recv._GetInvite_Do(func(string, ...rest.RequestOpt) (*discord.Invite, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetInvite_Calls() []_clientRest_GetInvite_Call {
	if _recv == nil {
		panic("clientRest.GetInvite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetInviteCalls
}

func (_recv *clientRest) GetJoinedPrivateArchivedThreads(channelID snowflake.ID, before time.Time, limit int, opts ...rest.RequestOpt) (*discord.GetThreads, error) {
	if _recv == nil {
		panic("clientRest.GetJoinedPrivateArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetJoinedPrivateArchivedThreadsCalls = append(_dat.GetJoinedPrivateArchivedThreadsCalls, _clientRest_GetJoinedPrivateArchivedThreads_Call{channelID, before, limit, opts})
	var _fn func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error)
	if len(_dat.GetJoinedPrivateArchivedThreadsMocks) > 0 {
		_fn = _dat.GetJoinedPrivateArchivedThreadsMocks[0]
		if len(_dat.GetJoinedPrivateArchivedThreadsMocks) > 1 {
			_dat.GetJoinedPrivateArchivedThreadsMocks = _dat.GetJoinedPrivateArchivedThreadsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetJoinedPrivateArchivedThreads }
	_dat.mutex.Unlock()
	return _fn(channelID, before, limit, opts...)
}

func (_recv *clientRest) _GetJoinedPrivateArchivedThreads_Do(fn func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error)) {
	if _recv == nil {
		panic("clientRest.GetJoinedPrivateArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetJoinedPrivateArchivedThreadsMocks = []func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error){}
	} else if len(_dat.GetJoinedPrivateArchivedThreadsMocks) < 2 {
		_dat.GetJoinedPrivateArchivedThreadsMocks = []func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error){fn, fn}
	} else {
		_dat.GetJoinedPrivateArchivedThreadsMocks = _dat.GetJoinedPrivateArchivedThreadsMocks[:len(_dat.GetJoinedPrivateArchivedThreadsMocks)-1]
		_dat.GetJoinedPrivateArchivedThreadsMocks = append(_dat.GetJoinedPrivateArchivedThreadsMocks, fn)
		_dat.GetJoinedPrivateArchivedThreadsMocks = append(_dat.GetJoinedPrivateArchivedThreadsMocks, fn)
	}
}

func (_recv *clientRest) _GetJoinedPrivateArchivedThreads_Stub() {
	_recv._GetJoinedPrivateArchivedThreads_Do(func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (threads *discord.GetThreads, err error) {
		return threads, err
	})
}

func (_recv *clientRest) _GetJoinedPrivateArchivedThreads_Return(threads *discord.GetThreads, err error) {
	_recv._GetJoinedPrivateArchivedThreads_Do(func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error) {
		return threads, err
	})
}

func (_recv *clientRest) _GetJoinedPrivateArchivedThreads_Calls() []_clientRest_GetJoinedPrivateArchivedThreads_Call {
	if _recv == nil {
		panic("clientRest.GetJoinedPrivateArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetJoinedPrivateArchivedThreadsCalls
}

func (_recv *clientRest) GetMember(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) (*discord.Member, error) {
	if _recv == nil {
		panic("clientRest.GetMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetMemberCalls = append(_dat.GetMemberCalls, _clientRest_GetMember_Call{guildID, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error)
	if len(_dat.GetMemberMocks) > 0 {
		_fn = _dat.GetMemberMocks[0]
		if len(_dat.GetMemberMocks) > 1 {
			_dat.GetMemberMocks = _dat.GetMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.GetMember }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, opts...)
}

func (_recv *clientRest) _GetMember_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error)) {
	if _recv == nil {
		panic("clientRest.GetMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetMemberMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error){}
	} else if len(_dat.GetMemberMocks) < 2 {
		_dat.GetMemberMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error){fn, fn}
	} else {
		_dat.GetMemberMocks = _dat.GetMemberMocks[:len(_dat.GetMemberMocks)-1]
		_dat.GetMemberMocks = append(_dat.GetMemberMocks, fn)
		_dat.GetMemberMocks = append(_dat.GetMemberMocks, fn)
	}
}

func (_recv *clientRest) _GetMember_Stub() {
	_recv._GetMember_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Member, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetMember_Return(r0 *discord.Member, r1 error) {
	_recv._GetMember_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Member, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetMember_Calls() []_clientRest_GetMember_Call {
	if _recv == nil {
		panic("clientRest.GetMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetMemberCalls
}

func (_recv *clientRest) GetMembers(guildID snowflake.ID, limit int, after snowflake.ID, opts ...rest.RequestOpt) ([]discord.Member, error) {
	if _recv == nil {
		panic("clientRest.GetMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetMembersCalls = append(_dat.GetMembersCalls, _clientRest_GetMembers_Call{guildID, limit, after, opts})
	var _fn func(snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Member, error)
	if len(_dat.GetMembersMocks) > 0 {
		_fn = _dat.GetMembersMocks[0]
		if len(_dat.GetMembersMocks) > 1 {
			_dat.GetMembersMocks = _dat.GetMembersMocks[1:]
		}
	} else { _fn = _recv.Rest.GetMembers }
	_dat.mutex.Unlock()
	return _fn(guildID, limit, after, opts...)
}

func (_recv *clientRest) _GetMembers_Do(fn func(snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Member, error)) {
	if _recv == nil {
		panic("clientRest.GetMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetMembersMocks = []func(snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Member, error){}
	} else if len(_dat.GetMembersMocks) < 2 {
		_dat.GetMembersMocks = []func(snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Member, error){fn, fn}
	} else {
		_dat.GetMembersMocks = _dat.GetMembersMocks[:len(_dat.GetMembersMocks)-1]
		_dat.GetMembersMocks = append(_dat.GetMembersMocks, fn)
		_dat.GetMembersMocks = append(_dat.GetMembersMocks, fn)
	}
}

func (_recv *clientRest) _GetMembers_Stub() {
	_recv._GetMembers_Do(func(snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) (r0 []discord.Member, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetMembers_Return(r0 []discord.Member, r1 error) {
	_recv._GetMembers_Do(func(snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Member, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetMembers_Calls() []_clientRest_GetMembers_Call {
	if _recv == nil {
		panic("clientRest.GetMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetMembersCalls
}

func (_recv *clientRest) GetMessage(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.GetMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetMessageCalls = append(_dat.GetMessageCalls, _clientRest_GetMessage_Call{channelID, messageID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.GetMessageMocks) > 0 {
		_fn = _dat.GetMessageMocks[0]
		if len(_dat.GetMessageMocks) > 1 {
			_dat.GetMessageMocks = _dat.GetMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetMessage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, opts...)
}

func (_recv *clientRest) _GetMessage_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.GetMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.GetMessageMocks) < 2 {
		_dat.GetMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.GetMessageMocks = _dat.GetMessageMocks[:len(_dat.GetMessageMocks)-1]
		_dat.GetMessageMocks = append(_dat.GetMessageMocks, fn)
		_dat.GetMessageMocks = append(_dat.GetMessageMocks, fn)
	}
}

func (_recv *clientRest) _GetMessage_Stub() {
	_recv._GetMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetMessage_Return(r0 *discord.Message, r1 error) {
	_recv._GetMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetMessage_Calls() []_clientRest_GetMessage_Call {
	if _recv == nil {
		panic("clientRest.GetMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetMessageCalls
}

func (_recv *clientRest) GetMessages(channelID snowflake.ID, around snowflake.ID, before snowflake.ID, after snowflake.ID, limit int, opts ...rest.RequestOpt) ([]discord.Message, error) {
	if _recv == nil {
		panic("clientRest.GetMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetMessagesCalls = append(_dat.GetMessagesCalls, _clientRest_GetMessages_Call{channelID, around, before, after, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Message, error)
	if len(_dat.GetMessagesMocks) > 0 {
		_fn = _dat.GetMessagesMocks[0]
		if len(_dat.GetMessagesMocks) > 1 {
			_dat.GetMessagesMocks = _dat.GetMessagesMocks[1:]
		}
	} else { _fn = _recv.Rest.GetMessages }
	_dat.mutex.Unlock()
	return _fn(channelID, around, before, after, limit, opts...)
}

func (_recv *clientRest) _GetMessages_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.GetMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetMessagesMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Message, error){}
	} else if len(_dat.GetMessagesMocks) < 2 {
		_dat.GetMessagesMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Message, error){fn, fn}
	} else {
		_dat.GetMessagesMocks = _dat.GetMessagesMocks[:len(_dat.GetMessagesMocks)-1]
		_dat.GetMessagesMocks = append(_dat.GetMessagesMocks, fn)
		_dat.GetMessagesMocks = append(_dat.GetMessagesMocks, fn)
	}
}

func (_recv *clientRest) _GetMessages_Stub() {
	_recv._GetMessages_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (r0 []discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetMessages_Return(r0 []discord.Message, r1 error) {
	_recv._GetMessages_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) ([]discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetMessages_Calls() []_clientRest_GetMessages_Call {
	if _recv == nil {
		panic("clientRest.GetMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetMessagesCalls
}

func (_recv *clientRest) GetMessagesPage(channelID snowflake.ID, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.Page[discord.Message] {
	if _recv == nil {
		panic("clientRest.GetMessagesPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetMessagesPageCalls = append(_dat.GetMessagesPageCalls, _clientRest_GetMessagesPage_Call{channelID, startID, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Message])
	if len(_dat.GetMessagesPageMocks) > 0 {
		_fn = _dat.GetMessagesPageMocks[0]
		if len(_dat.GetMessagesPageMocks) > 1 {
			_dat.GetMessagesPageMocks = _dat.GetMessagesPageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetMessagesPage }
	_dat.mutex.Unlock()
	return _fn(channelID, startID, limit, opts...)
}

func (_recv *clientRest) _GetMessagesPage_Do(fn func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Message])) {
	if _recv == nil {
		panic("clientRest.GetMessagesPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetMessagesPageMocks = []func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Message]){}
	} else if len(_dat.GetMessagesPageMocks) < 2 {
		_dat.GetMessagesPageMocks = []func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Message]){fn, fn}
	} else {
		_dat.GetMessagesPageMocks = _dat.GetMessagesPageMocks[:len(_dat.GetMessagesPageMocks)-1]
		_dat.GetMessagesPageMocks = append(_dat.GetMessagesPageMocks, fn)
		_dat.GetMessagesPageMocks = append(_dat.GetMessagesPageMocks, fn)
	}
}

func (_recv *clientRest) _GetMessagesPage_Stub() {
	_recv._GetMessagesPage_Do(func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (r0 rest.Page[discord.Message]) {
		return r0
	})
}

func (_recv *clientRest) _GetMessagesPage_Return(r0 rest.Page[discord.Message]) {
	_recv._GetMessagesPage_Do(func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Message]) {
		return r0
	})
}

func (_recv *clientRest) _GetMessagesPage_Calls() []_clientRest_GetMessagesPage_Call {
	if _recv == nil {
		panic("clientRest.GetMessagesPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetMessagesPageCalls
}

func (_recv *clientRest) GetNitroStickerPack(packID snowflake.ID, opts ...rest.RequestOpt) (*discord.StickerPack, error) {
	if _recv == nil {
		panic("clientRest.GetNitroStickerPack: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetNitroStickerPackCalls = append(_dat.GetNitroStickerPackCalls, _clientRest_GetNitroStickerPack_Call{packID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.StickerPack, error)
	if len(_dat.GetNitroStickerPackMocks) > 0 {
		_fn = _dat.GetNitroStickerPackMocks[0]
		if len(_dat.GetNitroStickerPackMocks) > 1 {
			_dat.GetNitroStickerPackMocks = _dat.GetNitroStickerPackMocks[1:]
		}
	} else { _fn = _recv.Rest.GetNitroStickerPack }
	_dat.mutex.Unlock()
	return _fn(packID, opts...)
}

func (_recv *clientRest) _GetNitroStickerPack_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.StickerPack, error)) {
	if _recv == nil {
		panic("clientRest.GetNitroStickerPack: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetNitroStickerPackMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.StickerPack, error){}
	} else if len(_dat.GetNitroStickerPackMocks) < 2 {
		_dat.GetNitroStickerPackMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.StickerPack, error){fn, fn}
	} else {
		_dat.GetNitroStickerPackMocks = _dat.GetNitroStickerPackMocks[:len(_dat.GetNitroStickerPackMocks)-1]
		_dat.GetNitroStickerPackMocks = append(_dat.GetNitroStickerPackMocks, fn)
		_dat.GetNitroStickerPackMocks = append(_dat.GetNitroStickerPackMocks, fn)
	}
}

func (_recv *clientRest) _GetNitroStickerPack_Stub() {
	_recv._GetNitroStickerPack_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.StickerPack, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetNitroStickerPack_Return(r0 *discord.StickerPack, r1 error) {
	_recv._GetNitroStickerPack_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.StickerPack, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetNitroStickerPack_Calls() []_clientRest_GetNitroStickerPack_Call {
	if _recv == nil {
		panic("clientRest.GetNitroStickerPack: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetNitroStickerPackCalls
}

func (_recv *clientRest) GetNitroStickerPacks(opts ...rest.RequestOpt) ([]discord.StickerPack, error) {
	if _recv == nil {
		panic("clientRest.GetNitroStickerPacks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetNitroStickerPacksCalls = append(_dat.GetNitroStickerPacksCalls, _clientRest_GetNitroStickerPacks_Call{opts})
	var _fn func(...rest.RequestOpt) ([]discord.StickerPack, error)
	if len(_dat.GetNitroStickerPacksMocks) > 0 {
		_fn = _dat.GetNitroStickerPacksMocks[0]
		if len(_dat.GetNitroStickerPacksMocks) > 1 {
			_dat.GetNitroStickerPacksMocks = _dat.GetNitroStickerPacksMocks[1:]
		}
	} else { _fn = _recv.Rest.GetNitroStickerPacks }
	_dat.mutex.Unlock()
	return _fn(opts...)
}

func (_recv *clientRest) _GetNitroStickerPacks_Do(fn func(...rest.RequestOpt) ([]discord.StickerPack, error)) {
	if _recv == nil {
		panic("clientRest.GetNitroStickerPacks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetNitroStickerPacksMocks = []func(...rest.RequestOpt) ([]discord.StickerPack, error){}
	} else if len(_dat.GetNitroStickerPacksMocks) < 2 {
		_dat.GetNitroStickerPacksMocks = []func(...rest.RequestOpt) ([]discord.StickerPack, error){fn, fn}
	} else {
		_dat.GetNitroStickerPacksMocks = _dat.GetNitroStickerPacksMocks[:len(_dat.GetNitroStickerPacksMocks)-1]
		_dat.GetNitroStickerPacksMocks = append(_dat.GetNitroStickerPacksMocks, fn)
		_dat.GetNitroStickerPacksMocks = append(_dat.GetNitroStickerPacksMocks, fn)
	}
}

func (_recv *clientRest) _GetNitroStickerPacks_Stub() {
	_recv._GetNitroStickerPacks_Do(func(...rest.RequestOpt) (r0 []discord.StickerPack, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetNitroStickerPacks_Return(r0 []discord.StickerPack, r1 error) {
	_recv._GetNitroStickerPacks_Do(func(...rest.RequestOpt) ([]discord.StickerPack, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetNitroStickerPacks_Calls() []_clientRest_GetNitroStickerPacks_Call {
	if _recv == nil {
		panic("clientRest.GetNitroStickerPacks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetNitroStickerPacksCalls
}

func (_recv *clientRest) GetPinnedMessages(channelID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Message, error) {
	if _recv == nil {
		panic("clientRest.GetPinnedMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetPinnedMessagesCalls = append(_dat.GetPinnedMessagesCalls, _clientRest_GetPinnedMessages_Call{channelID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Message, error)
	if len(_dat.GetPinnedMessagesMocks) > 0 {
		_fn = _dat.GetPinnedMessagesMocks[0]
		if len(_dat.GetPinnedMessagesMocks) > 1 {
			_dat.GetPinnedMessagesMocks = _dat.GetPinnedMessagesMocks[1:]
		}
	} else { _fn = _recv.Rest.GetPinnedMessages }
	_dat.mutex.Unlock()
	return _fn(channelID, opts...)
}

func (_recv *clientRest) _GetPinnedMessages_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.GetPinnedMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetPinnedMessagesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Message, error){}
	} else if len(_dat.GetPinnedMessagesMocks) < 2 {
		_dat.GetPinnedMessagesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Message, error){fn, fn}
	} else {
		_dat.GetPinnedMessagesMocks = _dat.GetPinnedMessagesMocks[:len(_dat.GetPinnedMessagesMocks)-1]
		_dat.GetPinnedMessagesMocks = append(_dat.GetPinnedMessagesMocks, fn)
		_dat.GetPinnedMessagesMocks = append(_dat.GetPinnedMessagesMocks, fn)
	}
}

func (_recv *clientRest) _GetPinnedMessages_Stub() {
	_recv._GetPinnedMessages_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetPinnedMessages_Return(r0 []discord.Message, r1 error) {
	_recv._GetPinnedMessages_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetPinnedMessages_Calls() []_clientRest_GetPinnedMessages_Call {
	if _recv == nil {
		panic("clientRest.GetPinnedMessages: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetPinnedMessagesCalls
}

func (_recv *clientRest) GetPollAnswerVotes(channelID snowflake.ID, messageID snowflake.ID, answerID int, after snowflake.ID, limit int, opts ...rest.RequestOpt) ([]discord.User, error) {
	if _recv == nil {
		panic("clientRest.GetPollAnswerVotes: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetPollAnswerVotesCalls = append(_dat.GetPollAnswerVotesCalls, _clientRest_GetPollAnswerVotes_Call{channelID, messageID, answerID, after, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) ([]discord.User, error)
	if len(_dat.GetPollAnswerVotesMocks) > 0 {
		_fn = _dat.GetPollAnswerVotesMocks[0]
		if len(_dat.GetPollAnswerVotesMocks) > 1 {
			_dat.GetPollAnswerVotesMocks = _dat.GetPollAnswerVotesMocks[1:]
		}
	} else { _fn = _recv.Rest.GetPollAnswerVotes }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, answerID, after, limit, opts...)
}

func (_recv *clientRest) _GetPollAnswerVotes_Do(fn func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) ([]discord.User, error)) {
	if _recv == nil {
		panic("clientRest.GetPollAnswerVotes: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetPollAnswerVotesMocks = []func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) ([]discord.User, error){}
	} else if len(_dat.GetPollAnswerVotesMocks) < 2 {
		_dat.GetPollAnswerVotesMocks = []func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) ([]discord.User, error){fn, fn}
	} else {
		_dat.GetPollAnswerVotesMocks = _dat.GetPollAnswerVotesMocks[:len(_dat.GetPollAnswerVotesMocks)-1]
		_dat.GetPollAnswerVotesMocks = append(_dat.GetPollAnswerVotesMocks, fn)
		_dat.GetPollAnswerVotesMocks = append(_dat.GetPollAnswerVotesMocks, fn)
	}
}

func (_recv *clientRest) _GetPollAnswerVotes_Stub() {
	_recv._GetPollAnswerVotes_Do(func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) (r0 []discord.User, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetPollAnswerVotes_Return(r0 []discord.User, r1 error) {
	_recv._GetPollAnswerVotes_Do(func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) ([]discord.User, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetPollAnswerVotes_Calls() []_clientRest_GetPollAnswerVotes_Call {
	if _recv == nil {
		panic("clientRest.GetPollAnswerVotes: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetPollAnswerVotesCalls
}

func (_recv *clientRest) GetPollAnswerVotesPage(channelID snowflake.ID, messageID snowflake.ID, answerID int, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.PollAnswerVotesPage {
	if _recv == nil {
		panic("clientRest.GetPollAnswerVotesPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetPollAnswerVotesPageCalls = append(_dat.GetPollAnswerVotesPageCalls, _clientRest_GetPollAnswerVotesPage_Call{channelID, messageID, answerID, startID, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) (rest.PollAnswerVotesPage)
	if len(_dat.GetPollAnswerVotesPageMocks) > 0 {
		_fn = _dat.GetPollAnswerVotesPageMocks[0]
		if len(_dat.GetPollAnswerVotesPageMocks) > 1 {
			_dat.GetPollAnswerVotesPageMocks = _dat.GetPollAnswerVotesPageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetPollAnswerVotesPage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, answerID, startID, limit, opts...)
}

func (_recv *clientRest) _GetPollAnswerVotesPage_Do(fn func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) (rest.PollAnswerVotesPage)) {
	if _recv == nil {
		panic("clientRest.GetPollAnswerVotesPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetPollAnswerVotesPageMocks = []func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) (rest.PollAnswerVotesPage){}
	} else if len(_dat.GetPollAnswerVotesPageMocks) < 2 {
		_dat.GetPollAnswerVotesPageMocks = []func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) (rest.PollAnswerVotesPage){fn, fn}
	} else {
		_dat.GetPollAnswerVotesPageMocks = _dat.GetPollAnswerVotesPageMocks[:len(_dat.GetPollAnswerVotesPageMocks)-1]
		_dat.GetPollAnswerVotesPageMocks = append(_dat.GetPollAnswerVotesPageMocks, fn)
		_dat.GetPollAnswerVotesPageMocks = append(_dat.GetPollAnswerVotesPageMocks, fn)
	}
}

func (_recv *clientRest) _GetPollAnswerVotesPage_Stub() {
	_recv._GetPollAnswerVotesPage_Do(func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) (r0 rest.PollAnswerVotesPage) {
		return r0
	})
}

func (_recv *clientRest) _GetPollAnswerVotesPage_Return(r0 rest.PollAnswerVotesPage) {
	_recv._GetPollAnswerVotesPage_Do(func(snowflake.ID, snowflake.ID, int, snowflake.ID, int, ...rest.RequestOpt) (rest.PollAnswerVotesPage) {
		return r0
	})
}

func (_recv *clientRest) _GetPollAnswerVotesPage_Calls() []_clientRest_GetPollAnswerVotesPage_Call {
	if _recv == nil {
		panic("clientRest.GetPollAnswerVotesPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetPollAnswerVotesPageCalls
}

func (_recv *clientRest) GetPrivateArchivedThreads(channelID snowflake.ID, before time.Time, limit int, opts ...rest.RequestOpt) (*discord.GetThreads, error) {
	if _recv == nil {
		panic("clientRest.GetPrivateArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetPrivateArchivedThreadsCalls = append(_dat.GetPrivateArchivedThreadsCalls, _clientRest_GetPrivateArchivedThreads_Call{channelID, before, limit, opts})
	var _fn func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error)
	if len(_dat.GetPrivateArchivedThreadsMocks) > 0 {
		_fn = _dat.GetPrivateArchivedThreadsMocks[0]
		if len(_dat.GetPrivateArchivedThreadsMocks) > 1 {
			_dat.GetPrivateArchivedThreadsMocks = _dat.GetPrivateArchivedThreadsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetPrivateArchivedThreads }
	_dat.mutex.Unlock()
	return _fn(channelID, before, limit, opts...)
}

func (_recv *clientRest) _GetPrivateArchivedThreads_Do(fn func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error)) {
	if _recv == nil {
		panic("clientRest.GetPrivateArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetPrivateArchivedThreadsMocks = []func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error){}
	} else if len(_dat.GetPrivateArchivedThreadsMocks) < 2 {
		_dat.GetPrivateArchivedThreadsMocks = []func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error){fn, fn}
	} else {
		_dat.GetPrivateArchivedThreadsMocks = _dat.GetPrivateArchivedThreadsMocks[:len(_dat.GetPrivateArchivedThreadsMocks)-1]
		_dat.GetPrivateArchivedThreadsMocks = append(_dat.GetPrivateArchivedThreadsMocks, fn)
		_dat.GetPrivateArchivedThreadsMocks = append(_dat.GetPrivateArchivedThreadsMocks, fn)
	}
}

func (_recv *clientRest) _GetPrivateArchivedThreads_Stub() {
	_recv._GetPrivateArchivedThreads_Do(func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (threads *discord.GetThreads, err error) {
		return threads, err
	})
}

func (_recv *clientRest) _GetPrivateArchivedThreads_Return(threads *discord.GetThreads, err error) {
	_recv._GetPrivateArchivedThreads_Do(func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error) {
		return threads, err
	})
}

func (_recv *clientRest) _GetPrivateArchivedThreads_Calls() []_clientRest_GetPrivateArchivedThreads_Call {
	if _recv == nil {
		panic("clientRest.GetPrivateArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetPrivateArchivedThreadsCalls
}

func (_recv *clientRest) GetPublicArchivedThreads(channelID snowflake.ID, before time.Time, limit int, opts ...rest.RequestOpt) (*discord.GetThreads, error) {
	if _recv == nil {
		panic("clientRest.GetPublicArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetPublicArchivedThreadsCalls = append(_dat.GetPublicArchivedThreadsCalls, _clientRest_GetPublicArchivedThreads_Call{channelID, before, limit, opts})
	var _fn func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error)
	if len(_dat.GetPublicArchivedThreadsMocks) > 0 {
		_fn = _dat.GetPublicArchivedThreadsMocks[0]
		if len(_dat.GetPublicArchivedThreadsMocks) > 1 {
			_dat.GetPublicArchivedThreadsMocks = _dat.GetPublicArchivedThreadsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetPublicArchivedThreads }
	_dat.mutex.Unlock()
	return _fn(channelID, before, limit, opts...)
}

func (_recv *clientRest) _GetPublicArchivedThreads_Do(fn func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error)) {
	if _recv == nil {
		panic("clientRest.GetPublicArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetPublicArchivedThreadsMocks = []func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error){}
	} else if len(_dat.GetPublicArchivedThreadsMocks) < 2 {
		_dat.GetPublicArchivedThreadsMocks = []func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error){fn, fn}
	} else {
		_dat.GetPublicArchivedThreadsMocks = _dat.GetPublicArchivedThreadsMocks[:len(_dat.GetPublicArchivedThreadsMocks)-1]
		_dat.GetPublicArchivedThreadsMocks = append(_dat.GetPublicArchivedThreadsMocks, fn)
		_dat.GetPublicArchivedThreadsMocks = append(_dat.GetPublicArchivedThreadsMocks, fn)
	}
}

func (_recv *clientRest) _GetPublicArchivedThreads_Stub() {
	_recv._GetPublicArchivedThreads_Do(func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (threads *discord.GetThreads, err error) {
		return threads, err
	})
}

func (_recv *clientRest) _GetPublicArchivedThreads_Return(threads *discord.GetThreads, err error) {
	_recv._GetPublicArchivedThreads_Do(func(snowflake.ID, time.Time, int, ...rest.RequestOpt) (*discord.GetThreads, error) {
		return threads, err
	})
}

func (_recv *clientRest) _GetPublicArchivedThreads_Calls() []_clientRest_GetPublicArchivedThreads_Call {
	if _recv == nil {
		panic("clientRest.GetPublicArchivedThreads: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetPublicArchivedThreadsCalls
}

func (_recv *clientRest) GetReactions(channelID snowflake.ID, messageID snowflake.ID, emoji string, reactionType discord.MessageReactionType, after int, limit int, opts ...rest.RequestOpt) ([]discord.User, error) {
	if _recv == nil {
		panic("clientRest.GetReactions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetReactionsCalls = append(_dat.GetReactionsCalls, _clientRest_GetReactions_Call{channelID, messageID, emoji, reactionType, after, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, string, discord.MessageReactionType, int, int, ...rest.RequestOpt) ([]discord.User, error)
	if len(_dat.GetReactionsMocks) > 0 {
		_fn = _dat.GetReactionsMocks[0]
		if len(_dat.GetReactionsMocks) > 1 {
			_dat.GetReactionsMocks = _dat.GetReactionsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetReactions }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, emoji, reactionType, after, limit, opts...)
}

func (_recv *clientRest) _GetReactions_Do(fn func(snowflake.ID, snowflake.ID, string, discord.MessageReactionType, int, int, ...rest.RequestOpt) ([]discord.User, error)) {
	if _recv == nil {
		panic("clientRest.GetReactions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetReactionsMocks = []func(snowflake.ID, snowflake.ID, string, discord.MessageReactionType, int, int, ...rest.RequestOpt) ([]discord.User, error){}
	} else if len(_dat.GetReactionsMocks) < 2 {
		_dat.GetReactionsMocks = []func(snowflake.ID, snowflake.ID, string, discord.MessageReactionType, int, int, ...rest.RequestOpt) ([]discord.User, error){fn, fn}
	} else {
		_dat.GetReactionsMocks = _dat.GetReactionsMocks[:len(_dat.GetReactionsMocks)-1]
		_dat.GetReactionsMocks = append(_dat.GetReactionsMocks, fn)
		_dat.GetReactionsMocks = append(_dat.GetReactionsMocks, fn)
	}
}

func (_recv *clientRest) _GetReactions_Stub() {
	_recv._GetReactions_Do(func(snowflake.ID, snowflake.ID, string, discord.MessageReactionType, int, int, ...rest.RequestOpt) (r0 []discord.User, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetReactions_Return(r0 []discord.User, r1 error) {
	_recv._GetReactions_Do(func(snowflake.ID, snowflake.ID, string, discord.MessageReactionType, int, int, ...rest.RequestOpt) ([]discord.User, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetReactions_Calls() []_clientRest_GetReactions_Call {
	if _recv == nil {
		panic("clientRest.GetReactions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetReactionsCalls
}

func (_recv *clientRest) GetRole(guildID snowflake.ID, roleID snowflake.ID, opts ...rest.RequestOpt) (*discord.Role, error) {
	if _recv == nil {
		panic("clientRest.GetRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetRoleCalls = append(_dat.GetRoleCalls, _clientRest_GetRole_Call{guildID, roleID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Role, error)
	if len(_dat.GetRoleMocks) > 0 {
		_fn = _dat.GetRoleMocks[0]
		if len(_dat.GetRoleMocks) > 1 {
			_dat.GetRoleMocks = _dat.GetRoleMocks[1:]
		}
	} else { _fn = _recv.Rest.GetRole }
	_dat.mutex.Unlock()
	return _fn(guildID, roleID, opts...)
}

func (_recv *clientRest) _GetRole_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Role, error)) {
	if _recv == nil {
		panic("clientRest.GetRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetRoleMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Role, error){}
	} else if len(_dat.GetRoleMocks) < 2 {
		_dat.GetRoleMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Role, error){fn, fn}
	} else {
		_dat.GetRoleMocks = _dat.GetRoleMocks[:len(_dat.GetRoleMocks)-1]
		_dat.GetRoleMocks = append(_dat.GetRoleMocks, fn)
		_dat.GetRoleMocks = append(_dat.GetRoleMocks, fn)
	}
}

func (_recv *clientRest) _GetRole_Stub() {
	_recv._GetRole_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Role, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetRole_Return(r0 *discord.Role, r1 error) {
	_recv._GetRole_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Role, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetRole_Calls() []_clientRest_GetRole_Call {
	if _recv == nil {
		panic("clientRest.GetRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetRoleCalls
}

func (_recv *clientRest) GetRoles(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Role, error) {
	if _recv == nil {
		panic("clientRest.GetRoles: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetRolesCalls = append(_dat.GetRolesCalls, _clientRest_GetRoles_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Role, error)
	if len(_dat.GetRolesMocks) > 0 {
		_fn = _dat.GetRolesMocks[0]
		if len(_dat.GetRolesMocks) > 1 {
			_dat.GetRolesMocks = _dat.GetRolesMocks[1:]
		}
	} else { _fn = _recv.Rest.GetRoles }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetRoles_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Role, error)) {
	if _recv == nil {
		panic("clientRest.GetRoles: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetRolesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Role, error){}
	} else if len(_dat.GetRolesMocks) < 2 {
		_dat.GetRolesMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Role, error){fn, fn}
	} else {
		_dat.GetRolesMocks = _dat.GetRolesMocks[:len(_dat.GetRolesMocks)-1]
		_dat.GetRolesMocks = append(_dat.GetRolesMocks, fn)
		_dat.GetRolesMocks = append(_dat.GetRolesMocks, fn)
	}
}

func (_recv *clientRest) _GetRoles_Stub() {
	_recv._GetRoles_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.Role, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetRoles_Return(r0 []discord.Role, r1 error) {
	_recv._GetRoles_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.Role, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetRoles_Calls() []_clientRest_GetRoles_Call {
	if _recv == nil {
		panic("clientRest.GetRoles: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetRolesCalls
}

func (_recv *clientRest) GetSKUSubscription(skuID snowflake.ID, subscriptionID snowflake.ID, opts ...rest.RequestOpt) (*discord.Subscription, error) {
	if _recv == nil {
		panic("clientRest.GetSKUSubscription: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetSKUSubscriptionCalls = append(_dat.GetSKUSubscriptionCalls, _clientRest_GetSKUSubscription_Call{skuID, subscriptionID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Subscription, error)
	if len(_dat.GetSKUSubscriptionMocks) > 0 {
		_fn = _dat.GetSKUSubscriptionMocks[0]
		if len(_dat.GetSKUSubscriptionMocks) > 1 {
			_dat.GetSKUSubscriptionMocks = _dat.GetSKUSubscriptionMocks[1:]
		}
	} else { _fn = _recv.Rest.GetSKUSubscription }
	_dat.mutex.Unlock()
	return _fn(skuID, subscriptionID, opts...)
}

func (_recv *clientRest) _GetSKUSubscription_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Subscription, error)) {
	if _recv == nil {
		panic("clientRest.GetSKUSubscription: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetSKUSubscriptionMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Subscription, error){}
	} else if len(_dat.GetSKUSubscriptionMocks) < 2 {
		_dat.GetSKUSubscriptionMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Subscription, error){fn, fn}
	} else {
		_dat.GetSKUSubscriptionMocks = _dat.GetSKUSubscriptionMocks[:len(_dat.GetSKUSubscriptionMocks)-1]
		_dat.GetSKUSubscriptionMocks = append(_dat.GetSKUSubscriptionMocks, fn)
		_dat.GetSKUSubscriptionMocks = append(_dat.GetSKUSubscriptionMocks, fn)
	}
}

func (_recv *clientRest) _GetSKUSubscription_Stub() {
	_recv._GetSKUSubscription_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Subscription, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSKUSubscription_Return(r0 *discord.Subscription, r1 error) {
	_recv._GetSKUSubscription_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.Subscription, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSKUSubscription_Calls() []_clientRest_GetSKUSubscription_Call {
	if _recv == nil {
		panic("clientRest.GetSKUSubscription: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetSKUSubscriptionCalls
}

func (_recv *clientRest) GetSKUSubscriptions(skuID snowflake.ID, before snowflake.ID, after snowflake.ID, limit int, userID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Subscription, error) {
	if _recv == nil {
		panic("clientRest.GetSKUSubscriptions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetSKUSubscriptionsCalls = append(_dat.GetSKUSubscriptionsCalls, _clientRest_GetSKUSubscriptions_Call{skuID, before, after, limit, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Subscription, error)
	if len(_dat.GetSKUSubscriptionsMocks) > 0 {
		_fn = _dat.GetSKUSubscriptionsMocks[0]
		if len(_dat.GetSKUSubscriptionsMocks) > 1 {
			_dat.GetSKUSubscriptionsMocks = _dat.GetSKUSubscriptionsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetSKUSubscriptions }
	_dat.mutex.Unlock()
	return _fn(skuID, before, after, limit, userID, opts...)
}

func (_recv *clientRest) _GetSKUSubscriptions_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Subscription, error)) {
	if _recv == nil {
		panic("clientRest.GetSKUSubscriptions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetSKUSubscriptionsMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Subscription, error){}
	} else if len(_dat.GetSKUSubscriptionsMocks) < 2 {
		_dat.GetSKUSubscriptionsMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Subscription, error){fn, fn}
	} else {
		_dat.GetSKUSubscriptionsMocks = _dat.GetSKUSubscriptionsMocks[:len(_dat.GetSKUSubscriptionsMocks)-1]
		_dat.GetSKUSubscriptionsMocks = append(_dat.GetSKUSubscriptionsMocks, fn)
		_dat.GetSKUSubscriptionsMocks = append(_dat.GetSKUSubscriptionsMocks, fn)
	}
}

func (_recv *clientRest) _GetSKUSubscriptions_Stub() {
	_recv._GetSKUSubscriptions_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) (r0 []discord.Subscription, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSKUSubscriptions_Return(r0 []discord.Subscription, r1 error) {
	_recv._GetSKUSubscriptions_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, int, snowflake.ID, ...rest.RequestOpt) ([]discord.Subscription, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSKUSubscriptions_Calls() []_clientRest_GetSKUSubscriptions_Call {
	if _recv == nil {
		panic("clientRest.GetSKUSubscriptions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetSKUSubscriptionsCalls
}

func (_recv *clientRest) GetSKUSubscriptionsPage(skuID snowflake.ID, userID snowflake.ID, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.Page[discord.Subscription] {
	if _recv == nil {
		panic("clientRest.GetSKUSubscriptionsPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetSKUSubscriptionsPageCalls = append(_dat.GetSKUSubscriptionsPageCalls, _clientRest_GetSKUSubscriptionsPage_Call{skuID, userID, startID, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Subscription])
	if len(_dat.GetSKUSubscriptionsPageMocks) > 0 {
		_fn = _dat.GetSKUSubscriptionsPageMocks[0]
		if len(_dat.GetSKUSubscriptionsPageMocks) > 1 {
			_dat.GetSKUSubscriptionsPageMocks = _dat.GetSKUSubscriptionsPageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetSKUSubscriptionsPage }
	_dat.mutex.Unlock()
	return _fn(skuID, userID, startID, limit, opts...)
}

func (_recv *clientRest) _GetSKUSubscriptionsPage_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Subscription])) {
	if _recv == nil {
		panic("clientRest.GetSKUSubscriptionsPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetSKUSubscriptionsPageMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Subscription]){}
	} else if len(_dat.GetSKUSubscriptionsPageMocks) < 2 {
		_dat.GetSKUSubscriptionsPageMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Subscription]){fn, fn}
	} else {
		_dat.GetSKUSubscriptionsPageMocks = _dat.GetSKUSubscriptionsPageMocks[:len(_dat.GetSKUSubscriptionsPageMocks)-1]
		_dat.GetSKUSubscriptionsPageMocks = append(_dat.GetSKUSubscriptionsPageMocks, fn)
		_dat.GetSKUSubscriptionsPageMocks = append(_dat.GetSKUSubscriptionsPageMocks, fn)
	}
}

func (_recv *clientRest) _GetSKUSubscriptionsPage_Stub() {
	_recv._GetSKUSubscriptionsPage_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (r0 rest.Page[discord.Subscription]) {
		return r0
	})
}

func (_recv *clientRest) _GetSKUSubscriptionsPage_Return(r0 rest.Page[discord.Subscription]) {
	_recv._GetSKUSubscriptionsPage_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.Page[discord.Subscription]) {
		return r0
	})
}

func (_recv *clientRest) _GetSKUSubscriptionsPage_Calls() []_clientRest_GetSKUSubscriptionsPage_Call {
	if _recv == nil {
		panic("clientRest.GetSKUSubscriptionsPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetSKUSubscriptionsPageCalls
}

func (_recv *clientRest) GetSKUs(applicationID snowflake.ID, opts ...rest.RequestOpt) ([]discord.SKU, error) {
	if _recv == nil {
		panic("clientRest.GetSKUs: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetSKUsCalls = append(_dat.GetSKUsCalls, _clientRest_GetSKUs_Call{applicationID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.SKU, error)
	if len(_dat.GetSKUsMocks) > 0 {
		_fn = _dat.GetSKUsMocks[0]
		if len(_dat.GetSKUsMocks) > 1 {
			_dat.GetSKUsMocks = _dat.GetSKUsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetSKUs }
	_dat.mutex.Unlock()
	return _fn(applicationID, opts...)
}

func (_recv *clientRest) _GetSKUs_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.SKU, error)) {
	if _recv == nil {
		panic("clientRest.GetSKUs: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetSKUsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.SKU, error){}
	} else if len(_dat.GetSKUsMocks) < 2 {
		_dat.GetSKUsMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.SKU, error){fn, fn}
	} else {
		_dat.GetSKUsMocks = _dat.GetSKUsMocks[:len(_dat.GetSKUsMocks)-1]
		_dat.GetSKUsMocks = append(_dat.GetSKUsMocks, fn)
		_dat.GetSKUsMocks = append(_dat.GetSKUsMocks, fn)
	}
}

func (_recv *clientRest) _GetSKUs_Stub() {
	_recv._GetSKUs_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.SKU, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSKUs_Return(r0 []discord.SKU, r1 error) {
	_recv._GetSKUs_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.SKU, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSKUs_Calls() []_clientRest_GetSKUs_Call {
	if _recv == nil {
		panic("clientRest.GetSKUs: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetSKUsCalls
}

func (_recv *clientRest) GetSoundboardDefaultSounds(opts ...rest.RequestOpt) ([]discord.SoundboardSound, error) {
	if _recv == nil {
		panic("clientRest.GetSoundboardDefaultSounds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetSoundboardDefaultSoundsCalls = append(_dat.GetSoundboardDefaultSoundsCalls, _clientRest_GetSoundboardDefaultSounds_Call{opts})
	var _fn func(...rest.RequestOpt) ([]discord.SoundboardSound, error)
	if len(_dat.GetSoundboardDefaultSoundsMocks) > 0 {
		_fn = _dat.GetSoundboardDefaultSoundsMocks[0]
		if len(_dat.GetSoundboardDefaultSoundsMocks) > 1 {
			_dat.GetSoundboardDefaultSoundsMocks = _dat.GetSoundboardDefaultSoundsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetSoundboardDefaultSounds }
	_dat.mutex.Unlock()
	return _fn(opts...)
}

func (_recv *clientRest) _GetSoundboardDefaultSounds_Do(fn func(...rest.RequestOpt) ([]discord.SoundboardSound, error)) {
	if _recv == nil {
		panic("clientRest.GetSoundboardDefaultSounds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetSoundboardDefaultSoundsMocks = []func(...rest.RequestOpt) ([]discord.SoundboardSound, error){}
	} else if len(_dat.GetSoundboardDefaultSoundsMocks) < 2 {
		_dat.GetSoundboardDefaultSoundsMocks = []func(...rest.RequestOpt) ([]discord.SoundboardSound, error){fn, fn}
	} else {
		_dat.GetSoundboardDefaultSoundsMocks = _dat.GetSoundboardDefaultSoundsMocks[:len(_dat.GetSoundboardDefaultSoundsMocks)-1]
		_dat.GetSoundboardDefaultSoundsMocks = append(_dat.GetSoundboardDefaultSoundsMocks, fn)
		_dat.GetSoundboardDefaultSoundsMocks = append(_dat.GetSoundboardDefaultSoundsMocks, fn)
	}
}

func (_recv *clientRest) _GetSoundboardDefaultSounds_Stub() {
	_recv._GetSoundboardDefaultSounds_Do(func(...rest.RequestOpt) (r0 []discord.SoundboardSound, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSoundboardDefaultSounds_Return(r0 []discord.SoundboardSound, r1 error) {
	_recv._GetSoundboardDefaultSounds_Do(func(...rest.RequestOpt) ([]discord.SoundboardSound, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSoundboardDefaultSounds_Calls() []_clientRest_GetSoundboardDefaultSounds_Call {
	if _recv == nil {
		panic("clientRest.GetSoundboardDefaultSounds: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetSoundboardDefaultSoundsCalls
}

func (_recv *clientRest) GetStageInstance(channelID snowflake.ID, opts ...rest.RequestOpt) (*discord.StageInstance, error) {
	if _recv == nil {
		panic("clientRest.GetStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetStageInstanceCalls = append(_dat.GetStageInstanceCalls, _clientRest_GetStageInstance_Call{channelID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.StageInstance, error)
	if len(_dat.GetStageInstanceMocks) > 0 {
		_fn = _dat.GetStageInstanceMocks[0]
		if len(_dat.GetStageInstanceMocks) > 1 {
			_dat.GetStageInstanceMocks = _dat.GetStageInstanceMocks[1:]
		}
	} else { _fn = _recv.Rest.GetStageInstance }
	_dat.mutex.Unlock()
	return _fn(channelID, opts...)
}

func (_recv *clientRest) _GetStageInstance_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.StageInstance, error)) {
	if _recv == nil {
		panic("clientRest.GetStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetStageInstanceMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.StageInstance, error){}
	} else if len(_dat.GetStageInstanceMocks) < 2 {
		_dat.GetStageInstanceMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.StageInstance, error){fn, fn}
	} else {
		_dat.GetStageInstanceMocks = _dat.GetStageInstanceMocks[:len(_dat.GetStageInstanceMocks)-1]
		_dat.GetStageInstanceMocks = append(_dat.GetStageInstanceMocks, fn)
		_dat.GetStageInstanceMocks = append(_dat.GetStageInstanceMocks, fn)
	}
}

func (_recv *clientRest) _GetStageInstance_Stub() {
	_recv._GetStageInstance_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.StageInstance, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetStageInstance_Return(r0 *discord.StageInstance, r1 error) {
	_recv._GetStageInstance_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.StageInstance, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetStageInstance_Calls() []_clientRest_GetStageInstance_Call {
	if _recv == nil {
		panic("clientRest.GetStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetStageInstanceCalls
}

func (_recv *clientRest) GetSticker(stickerID snowflake.ID, opts ...rest.RequestOpt) (*discord.Sticker, error) {
	if _recv == nil {
		panic("clientRest.GetSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetStickerCalls = append(_dat.GetStickerCalls, _clientRest_GetSticker_Call{stickerID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.Sticker, error)
	if len(_dat.GetStickerMocks) > 0 {
		_fn = _dat.GetStickerMocks[0]
		if len(_dat.GetStickerMocks) > 1 {
			_dat.GetStickerMocks = _dat.GetStickerMocks[1:]
		}
	} else { _fn = _recv.Rest.GetSticker }
	_dat.mutex.Unlock()
	return _fn(stickerID, opts...)
}

func (_recv *clientRest) _GetSticker_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.Sticker, error)) {
	if _recv == nil {
		panic("clientRest.GetSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetStickerMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.Sticker, error){}
	} else if len(_dat.GetStickerMocks) < 2 {
		_dat.GetStickerMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.Sticker, error){fn, fn}
	} else {
		_dat.GetStickerMocks = _dat.GetStickerMocks[:len(_dat.GetStickerMocks)-1]
		_dat.GetStickerMocks = append(_dat.GetStickerMocks, fn)
		_dat.GetStickerMocks = append(_dat.GetStickerMocks, fn)
	}
}

func (_recv *clientRest) _GetSticker_Stub() {
	_recv._GetSticker_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.Sticker, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSticker_Return(r0 *discord.Sticker, r1 error) {
	_recv._GetSticker_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.Sticker, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetSticker_Calls() []_clientRest_GetSticker_Call {
	if _recv == nil {
		panic("clientRest.GetSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetStickerCalls
}

func (_recv *clientRest) GetStickers(guildID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Sticker, error) {
	if _recv == nil {
		panic("clientRest.GetStickers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetStickersCalls = append(_dat.GetStickersCalls, _clientRest_GetStickers_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Sticker, error)
	if len(_dat.GetStickersMocks) > 0 {
		_fn = _dat.GetStickersMocks[0]
		if len(_dat.GetStickersMocks) > 1 {
			_dat.GetStickersMocks = _dat.GetStickersMocks[1:]
		}
	} else { _fn = _recv.Rest.GetStickers }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _GetStickers_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Sticker, error)) {
	if _recv == nil {
		panic("clientRest.GetStickers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetStickersMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Sticker, error){}
	} else if len(_dat.GetStickersMocks) < 2 {
		_dat.GetStickersMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Sticker, error){fn, fn}
	} else {
		_dat.GetStickersMocks = _dat.GetStickersMocks[:len(_dat.GetStickersMocks)-1]
		_dat.GetStickersMocks = append(_dat.GetStickersMocks, fn)
		_dat.GetStickersMocks = append(_dat.GetStickersMocks, fn)
	}
}

func (_recv *clientRest) _GetStickers_Stub() {
	_recv._GetStickers_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.Sticker, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetStickers_Return(r0 []discord.Sticker, r1 error) {
	_recv._GetStickers_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.Sticker, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetStickers_Calls() []_clientRest_GetStickers_Call {
	if _recv == nil {
		panic("clientRest.GetStickers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetStickersCalls
}

func (_recv *clientRest) GetThreadMember(threadID snowflake.ID, userID snowflake.ID, withMember bool, opts ...rest.RequestOpt) (*discord.ThreadMember, error) {
	if _recv == nil {
		panic("clientRest.GetThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetThreadMemberCalls = append(_dat.GetThreadMemberCalls, _clientRest_GetThreadMember_Call{threadID, userID, withMember, opts})
	var _fn func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.ThreadMember, error)
	if len(_dat.GetThreadMemberMocks) > 0 {
		_fn = _dat.GetThreadMemberMocks[0]
		if len(_dat.GetThreadMemberMocks) > 1 {
			_dat.GetThreadMemberMocks = _dat.GetThreadMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.GetThreadMember }
	_dat.mutex.Unlock()
	return _fn(threadID, userID, withMember, opts...)
}

func (_recv *clientRest) _GetThreadMember_Do(fn func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.ThreadMember, error)) {
	if _recv == nil {
		panic("clientRest.GetThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetThreadMemberMocks = []func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.ThreadMember, error){}
	} else if len(_dat.GetThreadMemberMocks) < 2 {
		_dat.GetThreadMemberMocks = []func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.ThreadMember, error){fn, fn}
	} else {
		_dat.GetThreadMemberMocks = _dat.GetThreadMemberMocks[:len(_dat.GetThreadMemberMocks)-1]
		_dat.GetThreadMemberMocks = append(_dat.GetThreadMemberMocks, fn)
		_dat.GetThreadMemberMocks = append(_dat.GetThreadMemberMocks, fn)
	}
}

func (_recv *clientRest) _GetThreadMember_Stub() {
	_recv._GetThreadMember_Do(func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (threadMember *discord.ThreadMember, err error) {
		return threadMember, err
	})
}

func (_recv *clientRest) _GetThreadMember_Return(threadMember *discord.ThreadMember, err error) {
	_recv._GetThreadMember_Do(func(snowflake.ID, snowflake.ID, bool, ...rest.RequestOpt) (*discord.ThreadMember, error) {
		return threadMember, err
	})
}

func (_recv *clientRest) _GetThreadMember_Calls() []_clientRest_GetThreadMember_Call {
	if _recv == nil {
		panic("clientRest.GetThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetThreadMemberCalls
}

func (_recv *clientRest) GetThreadMembers(threadID snowflake.ID, opts ...rest.RequestOpt) ([]discord.ThreadMember, error) {
	if _recv == nil {
		panic("clientRest.GetThreadMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetThreadMembersCalls = append(_dat.GetThreadMembersCalls, _clientRest_GetThreadMembers_Call{threadID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.ThreadMember, error)
	if len(_dat.GetThreadMembersMocks) > 0 {
		_fn = _dat.GetThreadMembersMocks[0]
		if len(_dat.GetThreadMembersMocks) > 1 {
			_dat.GetThreadMembersMocks = _dat.GetThreadMembersMocks[1:]
		}
	} else { _fn = _recv.Rest.GetThreadMembers }
	_dat.mutex.Unlock()
	return _fn(threadID, opts...)
}

func (_recv *clientRest) _GetThreadMembers_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.ThreadMember, error)) {
	if _recv == nil {
		panic("clientRest.GetThreadMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetThreadMembersMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.ThreadMember, error){}
	} else if len(_dat.GetThreadMembersMocks) < 2 {
		_dat.GetThreadMembersMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.ThreadMember, error){fn, fn}
	} else {
		_dat.GetThreadMembersMocks = _dat.GetThreadMembersMocks[:len(_dat.GetThreadMembersMocks)-1]
		_dat.GetThreadMembersMocks = append(_dat.GetThreadMembersMocks, fn)
		_dat.GetThreadMembersMocks = append(_dat.GetThreadMembersMocks, fn)
	}
}

func (_recv *clientRest) _GetThreadMembers_Stub() {
	_recv._GetThreadMembers_Do(func(snowflake.ID, ...rest.RequestOpt) (threadMembers []discord.ThreadMember, err error) {
		return threadMembers, err
	})
}

func (_recv *clientRest) _GetThreadMembers_Return(threadMembers []discord.ThreadMember, err error) {
	_recv._GetThreadMembers_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.ThreadMember, error) {
		return threadMembers, err
	})
}

func (_recv *clientRest) _GetThreadMembers_Calls() []_clientRest_GetThreadMembers_Call {
	if _recv == nil {
		panic("clientRest.GetThreadMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetThreadMembersCalls
}

func (_recv *clientRest) GetThreadMembersPage(threadID snowflake.ID, startID snowflake.ID, limit int, opts ...rest.RequestOpt) rest.ThreadMemberPage {
	if _recv == nil {
		panic("clientRest.GetThreadMembersPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetThreadMembersPageCalls = append(_dat.GetThreadMembersPageCalls, _clientRest_GetThreadMembersPage_Call{threadID, startID, limit, opts})
	var _fn func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.ThreadMemberPage)
	if len(_dat.GetThreadMembersPageMocks) > 0 {
		_fn = _dat.GetThreadMembersPageMocks[0]
		if len(_dat.GetThreadMembersPageMocks) > 1 {
			_dat.GetThreadMembersPageMocks = _dat.GetThreadMembersPageMocks[1:]
		}
	} else { _fn = _recv.Rest.GetThreadMembersPage }
	_dat.mutex.Unlock()
	return _fn(threadID, startID, limit, opts...)
}

func (_recv *clientRest) _GetThreadMembersPage_Do(fn func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.ThreadMemberPage)) {
	if _recv == nil {
		panic("clientRest.GetThreadMembersPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetThreadMembersPageMocks = []func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.ThreadMemberPage){}
	} else if len(_dat.GetThreadMembersPageMocks) < 2 {
		_dat.GetThreadMembersPageMocks = []func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.ThreadMemberPage){fn, fn}
	} else {
		_dat.GetThreadMembersPageMocks = _dat.GetThreadMembersPageMocks[:len(_dat.GetThreadMembersPageMocks)-1]
		_dat.GetThreadMembersPageMocks = append(_dat.GetThreadMembersPageMocks, fn)
		_dat.GetThreadMembersPageMocks = append(_dat.GetThreadMembersPageMocks, fn)
	}
}

func (_recv *clientRest) _GetThreadMembersPage_Stub() {
	_recv._GetThreadMembersPage_Do(func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (r0 rest.ThreadMemberPage) {
		return r0
	})
}

func (_recv *clientRest) _GetThreadMembersPage_Return(r0 rest.ThreadMemberPage) {
	_recv._GetThreadMembersPage_Do(func(snowflake.ID, snowflake.ID, int, ...rest.RequestOpt) (rest.ThreadMemberPage) {
		return r0
	})
}

func (_recv *clientRest) _GetThreadMembersPage_Calls() []_clientRest_GetThreadMembersPage_Call {
	if _recv == nil {
		panic("clientRest.GetThreadMembersPage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetThreadMembersPageCalls
}

func (_recv *clientRest) GetUser(userID snowflake.ID, opts ...rest.RequestOpt) (*discord.User, error) {
	if _recv == nil {
		panic("clientRest.GetUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetUserCalls = append(_dat.GetUserCalls, _clientRest_GetUser_Call{userID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (*discord.User, error)
	if len(_dat.GetUserMocks) > 0 {
		_fn = _dat.GetUserMocks[0]
		if len(_dat.GetUserMocks) > 1 {
			_dat.GetUserMocks = _dat.GetUserMocks[1:]
		}
	} else { _fn = _recv.Rest.GetUser }
	_dat.mutex.Unlock()
	return _fn(userID, opts...)
}

func (_recv *clientRest) _GetUser_Do(fn func(snowflake.ID, ...rest.RequestOpt) (*discord.User, error)) {
	if _recv == nil {
		panic("clientRest.GetUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetUserMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.User, error){}
	} else if len(_dat.GetUserMocks) < 2 {
		_dat.GetUserMocks = []func(snowflake.ID, ...rest.RequestOpt) (*discord.User, error){fn, fn}
	} else {
		_dat.GetUserMocks = _dat.GetUserMocks[:len(_dat.GetUserMocks)-1]
		_dat.GetUserMocks = append(_dat.GetUserMocks, fn)
		_dat.GetUserMocks = append(_dat.GetUserMocks, fn)
	}
}

func (_recv *clientRest) _GetUser_Stub() {
	_recv._GetUser_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 *discord.User, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetUser_Return(r0 *discord.User, r1 error) {
	_recv._GetUser_Do(func(snowflake.ID, ...rest.RequestOpt) (*discord.User, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetUser_Calls() []_clientRest_GetUser_Call {
	if _recv == nil {
		panic("clientRest.GetUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetUserCalls
}

func (_recv *clientRest) GetUserVoiceState(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) (*discord.VoiceState, error) {
	if _recv == nil {
		panic("clientRest.GetUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetUserVoiceStateCalls = append(_dat.GetUserVoiceStateCalls, _clientRest_GetUserVoiceState_Call{guildID, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error)
	if len(_dat.GetUserVoiceStateMocks) > 0 {
		_fn = _dat.GetUserVoiceStateMocks[0]
		if len(_dat.GetUserVoiceStateMocks) > 1 {
			_dat.GetUserVoiceStateMocks = _dat.GetUserVoiceStateMocks[1:]
		}
	} else { _fn = _recv.Rest.GetUserVoiceState }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, opts...)
}

func (_recv *clientRest) _GetUserVoiceState_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error)) {
	if _recv == nil {
		panic("clientRest.GetUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetUserVoiceStateMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error){}
	} else if len(_dat.GetUserVoiceStateMocks) < 2 {
		_dat.GetUserVoiceStateMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error){fn, fn}
	} else {
		_dat.GetUserVoiceStateMocks = _dat.GetUserVoiceStateMocks[:len(_dat.GetUserVoiceStateMocks)-1]
		_dat.GetUserVoiceStateMocks = append(_dat.GetUserVoiceStateMocks, fn)
		_dat.GetUserVoiceStateMocks = append(_dat.GetUserVoiceStateMocks, fn)
	}
}

func (_recv *clientRest) _GetUserVoiceState_Stub() {
	_recv._GetUserVoiceState_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 *discord.VoiceState, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetUserVoiceState_Return(r0 *discord.VoiceState, r1 error) {
	_recv._GetUserVoiceState_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (*discord.VoiceState, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetUserVoiceState_Calls() []_clientRest_GetUserVoiceState_Call {
	if _recv == nil {
		panic("clientRest.GetUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetUserVoiceStateCalls
}

func (_recv *clientRest) GetVoiceRegions(opts ...rest.RequestOpt) ([]discord.VoiceRegion, error) {
	if _recv == nil {
		panic("clientRest.GetVoiceRegions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetVoiceRegionsCalls = append(_dat.GetVoiceRegionsCalls, _clientRest_GetVoiceRegions_Call{opts})
	var _fn func(...rest.RequestOpt) ([]discord.VoiceRegion, error)
	if len(_dat.GetVoiceRegionsMocks) > 0 {
		_fn = _dat.GetVoiceRegionsMocks[0]
		if len(_dat.GetVoiceRegionsMocks) > 1 {
			_dat.GetVoiceRegionsMocks = _dat.GetVoiceRegionsMocks[1:]
		}
	} else { _fn = _recv.Rest.GetVoiceRegions }
	_dat.mutex.Unlock()
	return _fn(opts...)
}

func (_recv *clientRest) _GetVoiceRegions_Do(fn func(...rest.RequestOpt) ([]discord.VoiceRegion, error)) {
	if _recv == nil {
		panic("clientRest.GetVoiceRegions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetVoiceRegionsMocks = []func(...rest.RequestOpt) ([]discord.VoiceRegion, error){}
	} else if len(_dat.GetVoiceRegionsMocks) < 2 {
		_dat.GetVoiceRegionsMocks = []func(...rest.RequestOpt) ([]discord.VoiceRegion, error){fn, fn}
	} else {
		_dat.GetVoiceRegionsMocks = _dat.GetVoiceRegionsMocks[:len(_dat.GetVoiceRegionsMocks)-1]
		_dat.GetVoiceRegionsMocks = append(_dat.GetVoiceRegionsMocks, fn)
		_dat.GetVoiceRegionsMocks = append(_dat.GetVoiceRegionsMocks, fn)
	}
}

func (_recv *clientRest) _GetVoiceRegions_Stub() {
	_recv._GetVoiceRegions_Do(func(...rest.RequestOpt) (r0 []discord.VoiceRegion, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetVoiceRegions_Return(r0 []discord.VoiceRegion, r1 error) {
	_recv._GetVoiceRegions_Do(func(...rest.RequestOpt) ([]discord.VoiceRegion, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetVoiceRegions_Calls() []_clientRest_GetVoiceRegions_Call {
	if _recv == nil {
		panic("clientRest.GetVoiceRegions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetVoiceRegionsCalls
}

func (_recv *clientRest) GetWebhook(webhookID snowflake.ID, opts ...rest.RequestOpt) (discord.Webhook, error) {
	if _recv == nil {
		panic("clientRest.GetWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetWebhookCalls = append(_dat.GetWebhookCalls, _clientRest_GetWebhook_Call{webhookID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (discord.Webhook, error)
	if len(_dat.GetWebhookMocks) > 0 {
		_fn = _dat.GetWebhookMocks[0]
		if len(_dat.GetWebhookMocks) > 1 {
			_dat.GetWebhookMocks = _dat.GetWebhookMocks[1:]
		}
	} else { _fn = _recv.Rest.GetWebhook }
	_dat.mutex.Unlock()
	return _fn(webhookID, opts...)
}

func (_recv *clientRest) _GetWebhook_Do(fn func(snowflake.ID, ...rest.RequestOpt) (discord.Webhook, error)) {
	if _recv == nil {
		panic("clientRest.GetWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetWebhookMocks = []func(snowflake.ID, ...rest.RequestOpt) (discord.Webhook, error){}
	} else if len(_dat.GetWebhookMocks) < 2 {
		_dat.GetWebhookMocks = []func(snowflake.ID, ...rest.RequestOpt) (discord.Webhook, error){fn, fn}
	} else {
		_dat.GetWebhookMocks = _dat.GetWebhookMocks[:len(_dat.GetWebhookMocks)-1]
		_dat.GetWebhookMocks = append(_dat.GetWebhookMocks, fn)
		_dat.GetWebhookMocks = append(_dat.GetWebhookMocks, fn)
	}
}

func (_recv *clientRest) _GetWebhook_Stub() {
	_recv._GetWebhook_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 discord.Webhook, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetWebhook_Return(r0 discord.Webhook, r1 error) {
	_recv._GetWebhook_Do(func(snowflake.ID, ...rest.RequestOpt) (discord.Webhook, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetWebhook_Calls() []_clientRest_GetWebhook_Call {
	if _recv == nil {
		panic("clientRest.GetWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetWebhookCalls
}

func (_recv *clientRest) GetWebhookWithToken(webhookID snowflake.ID, webhookToken string, opts ...rest.RequestOpt) (discord.Webhook, error) {
	if _recv == nil {
		panic("clientRest.GetWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetWebhookWithTokenCalls = append(_dat.GetWebhookWithTokenCalls, _clientRest_GetWebhookWithToken_Call{webhookID, webhookToken, opts})
	var _fn func(snowflake.ID, string, ...rest.RequestOpt) (discord.Webhook, error)
	if len(_dat.GetWebhookWithTokenMocks) > 0 {
		_fn = _dat.GetWebhookWithTokenMocks[0]
		if len(_dat.GetWebhookWithTokenMocks) > 1 {
			_dat.GetWebhookWithTokenMocks = _dat.GetWebhookWithTokenMocks[1:]
		}
	} else { _fn = _recv.Rest.GetWebhookWithToken }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookToken, opts...)
}

func (_recv *clientRest) _GetWebhookWithToken_Do(fn func(snowflake.ID, string, ...rest.RequestOpt) (discord.Webhook, error)) {
	if _recv == nil {
		panic("clientRest.GetWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetWebhookWithTokenMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (discord.Webhook, error){}
	} else if len(_dat.GetWebhookWithTokenMocks) < 2 {
		_dat.GetWebhookWithTokenMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (discord.Webhook, error){fn, fn}
	} else {
		_dat.GetWebhookWithTokenMocks = _dat.GetWebhookWithTokenMocks[:len(_dat.GetWebhookWithTokenMocks)-1]
		_dat.GetWebhookWithTokenMocks = append(_dat.GetWebhookWithTokenMocks, fn)
		_dat.GetWebhookWithTokenMocks = append(_dat.GetWebhookWithTokenMocks, fn)
	}
}

func (_recv *clientRest) _GetWebhookWithToken_Stub() {
	_recv._GetWebhookWithToken_Do(func(snowflake.ID, string, ...rest.RequestOpt) (r0 discord.Webhook, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetWebhookWithToken_Return(r0 discord.Webhook, r1 error) {
	_recv._GetWebhookWithToken_Do(func(snowflake.ID, string, ...rest.RequestOpt) (discord.Webhook, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetWebhookWithToken_Calls() []_clientRest_GetWebhookWithToken_Call {
	if _recv == nil {
		panic("clientRest.GetWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetWebhookWithTokenCalls
}

func (_recv *clientRest) GetWebhooks(channelID snowflake.ID, opts ...rest.RequestOpt) ([]discord.Webhook, error) {
	if _recv == nil {
		panic("clientRest.GetWebhooks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.GetWebhooksCalls = append(_dat.GetWebhooksCalls, _clientRest_GetWebhooks_Call{channelID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error)
	if len(_dat.GetWebhooksMocks) > 0 {
		_fn = _dat.GetWebhooksMocks[0]
		if len(_dat.GetWebhooksMocks) > 1 {
			_dat.GetWebhooksMocks = _dat.GetWebhooksMocks[1:]
		}
	} else { _fn = _recv.Rest.GetWebhooks }
	_dat.mutex.Unlock()
	return _fn(channelID, opts...)
}

func (_recv *clientRest) _GetWebhooks_Do(fn func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error)) {
	if _recv == nil {
		panic("clientRest.GetWebhooks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.GetWebhooksMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error){}
	} else if len(_dat.GetWebhooksMocks) < 2 {
		_dat.GetWebhooksMocks = []func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error){fn, fn}
	} else {
		_dat.GetWebhooksMocks = _dat.GetWebhooksMocks[:len(_dat.GetWebhooksMocks)-1]
		_dat.GetWebhooksMocks = append(_dat.GetWebhooksMocks, fn)
		_dat.GetWebhooksMocks = append(_dat.GetWebhooksMocks, fn)
	}
}

func (_recv *clientRest) _GetWebhooks_Stub() {
	_recv._GetWebhooks_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 []discord.Webhook, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetWebhooks_Return(r0 []discord.Webhook, r1 error) {
	_recv._GetWebhooks_Do(func(snowflake.ID, ...rest.RequestOpt) ([]discord.Webhook, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _GetWebhooks_Calls() []_clientRest_GetWebhooks_Call {
	if _recv == nil {
		panic("clientRest.GetWebhooks: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.GetWebhooksCalls
}

func (_recv *clientRest) HTTPClient() *http.Client {
	if _recv == nil {
		panic("clientRest.HTTPClient: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.HTTPClientCalls = append(_dat.HTTPClientCalls, _clientRest_HTTPClient_Call{})
	var _fn func() (*http.Client)
	if len(_dat.HTTPClientMocks) > 0 {
		_fn = _dat.HTTPClientMocks[0]
		if len(_dat.HTTPClientMocks) > 1 {
			_dat.HTTPClientMocks = _dat.HTTPClientMocks[1:]
		}
	} else { _fn = _recv.Rest.HTTPClient }
	_dat.mutex.Unlock()
	return _fn()
}

func (_recv *clientRest) _HTTPClient_Do(fn func() (*http.Client)) {
	if _recv == nil {
		panic("clientRest.HTTPClient: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.HTTPClientMocks = []func() (*http.Client){}
	} else if len(_dat.HTTPClientMocks) < 2 {
		_dat.HTTPClientMocks = []func() (*http.Client){fn, fn}
	} else {
		_dat.HTTPClientMocks = _dat.HTTPClientMocks[:len(_dat.HTTPClientMocks)-1]
		_dat.HTTPClientMocks = append(_dat.HTTPClientMocks, fn)
		_dat.HTTPClientMocks = append(_dat.HTTPClientMocks, fn)
	}
}

func (_recv *clientRest) _HTTPClient_Stub() {
	_recv._HTTPClient_Do(func() (r0 *http.Client) {
		return r0
	})
}

func (_recv *clientRest) _HTTPClient_Return(r0 *http.Client) {
	_recv._HTTPClient_Do(func() (*http.Client) {
		return r0
	})
}

func (_recv *clientRest) _HTTPClient_Calls() []_clientRest_HTTPClient_Call {
	if _recv == nil {
		panic("clientRest.HTTPClient: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.HTTPClientCalls
}

func (_recv *clientRest) JoinThread(threadID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.JoinThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.JoinThreadCalls = append(_dat.JoinThreadCalls, _clientRest_JoinThread_Call{threadID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.JoinThreadMocks) > 0 {
		_fn = _dat.JoinThreadMocks[0]
		if len(_dat.JoinThreadMocks) > 1 {
			_dat.JoinThreadMocks = _dat.JoinThreadMocks[1:]
		}
	} else { _fn = _recv.Rest.JoinThread }
	_dat.mutex.Unlock()
	return _fn(threadID, opts...)
}

func (_recv *clientRest) _JoinThread_Do(fn func(snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.JoinThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.JoinThreadMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.JoinThreadMocks) < 2 {
		_dat.JoinThreadMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.JoinThreadMocks = _dat.JoinThreadMocks[:len(_dat.JoinThreadMocks)-1]
		_dat.JoinThreadMocks = append(_dat.JoinThreadMocks, fn)
		_dat.JoinThreadMocks = append(_dat.JoinThreadMocks, fn)
	}
}

func (_recv *clientRest) _JoinThread_Stub() {
	_recv._JoinThread_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _JoinThread_Return(r0 error) {
	_recv._JoinThread_Do(func(snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _JoinThread_Calls() []_clientRest_JoinThread_Call {
	if _recv == nil {
		panic("clientRest.JoinThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.JoinThreadCalls
}

func (_recv *clientRest) LeaveGuild(guildID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.LeaveGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.LeaveGuildCalls = append(_dat.LeaveGuildCalls, _clientRest_LeaveGuild_Call{guildID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.LeaveGuildMocks) > 0 {
		_fn = _dat.LeaveGuildMocks[0]
		if len(_dat.LeaveGuildMocks) > 1 {
			_dat.LeaveGuildMocks = _dat.LeaveGuildMocks[1:]
		}
	} else { _fn = _recv.Rest.LeaveGuild }
	_dat.mutex.Unlock()
	return _fn(guildID, opts...)
}

func (_recv *clientRest) _LeaveGuild_Do(fn func(snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.LeaveGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.LeaveGuildMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.LeaveGuildMocks) < 2 {
		_dat.LeaveGuildMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.LeaveGuildMocks = _dat.LeaveGuildMocks[:len(_dat.LeaveGuildMocks)-1]
		_dat.LeaveGuildMocks = append(_dat.LeaveGuildMocks, fn)
		_dat.LeaveGuildMocks = append(_dat.LeaveGuildMocks, fn)
	}
}

func (_recv *clientRest) _LeaveGuild_Stub() {
	_recv._LeaveGuild_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _LeaveGuild_Return(r0 error) {
	_recv._LeaveGuild_Do(func(snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _LeaveGuild_Calls() []_clientRest_LeaveGuild_Call {
	if _recv == nil {
		panic("clientRest.LeaveGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.LeaveGuildCalls
}

func (_recv *clientRest) LeaveThread(threadID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.LeaveThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.LeaveThreadCalls = append(_dat.LeaveThreadCalls, _clientRest_LeaveThread_Call{threadID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.LeaveThreadMocks) > 0 {
		_fn = _dat.LeaveThreadMocks[0]
		if len(_dat.LeaveThreadMocks) > 1 {
			_dat.LeaveThreadMocks = _dat.LeaveThreadMocks[1:]
		}
	} else { _fn = _recv.Rest.LeaveThread }
	_dat.mutex.Unlock()
	return _fn(threadID, opts...)
}

func (_recv *clientRest) _LeaveThread_Do(fn func(snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.LeaveThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.LeaveThreadMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.LeaveThreadMocks) < 2 {
		_dat.LeaveThreadMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.LeaveThreadMocks = _dat.LeaveThreadMocks[:len(_dat.LeaveThreadMocks)-1]
		_dat.LeaveThreadMocks = append(_dat.LeaveThreadMocks, fn)
		_dat.LeaveThreadMocks = append(_dat.LeaveThreadMocks, fn)
	}
}

func (_recv *clientRest) _LeaveThread_Stub() {
	_recv._LeaveThread_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _LeaveThread_Return(r0 error) {
	_recv._LeaveThread_Do(func(snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _LeaveThread_Calls() []_clientRest_LeaveThread_Call {
	if _recv == nil {
		panic("clientRest.LeaveThread: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.LeaveThreadCalls
}

func (_recv *clientRest) PinMessage(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.PinMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.PinMessageCalls = append(_dat.PinMessageCalls, _clientRest_PinMessage_Call{channelID, messageID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.PinMessageMocks) > 0 {
		_fn = _dat.PinMessageMocks[0]
		if len(_dat.PinMessageMocks) > 1 {
			_dat.PinMessageMocks = _dat.PinMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.PinMessage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, opts...)
}

func (_recv *clientRest) _PinMessage_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.PinMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.PinMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.PinMessageMocks) < 2 {
		_dat.PinMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.PinMessageMocks = _dat.PinMessageMocks[:len(_dat.PinMessageMocks)-1]
		_dat.PinMessageMocks = append(_dat.PinMessageMocks, fn)
		_dat.PinMessageMocks = append(_dat.PinMessageMocks, fn)
	}
}

func (_recv *clientRest) _PinMessage_Stub() {
	_recv._PinMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _PinMessage_Return(r0 error) {
	_recv._PinMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _PinMessage_Calls() []_clientRest_PinMessage_Call {
	if _recv == nil {
		panic("clientRest.PinMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.PinMessageCalls
}

func (_recv *clientRest) RateLimiter() rest.RateLimiter {
	if _recv == nil {
		panic("clientRest.RateLimiter: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RateLimiterCalls = append(_dat.RateLimiterCalls, _clientRest_RateLimiter_Call{})
	var _fn func() (rest.RateLimiter)
	if len(_dat.RateLimiterMocks) > 0 {
		_fn = _dat.RateLimiterMocks[0]
		if len(_dat.RateLimiterMocks) > 1 {
			_dat.RateLimiterMocks = _dat.RateLimiterMocks[1:]
		}
	} else { _fn = _recv.Rest.RateLimiter }
	_dat.mutex.Unlock()
	return _fn()
}

func (_recv *clientRest) _RateLimiter_Do(fn func() (rest.RateLimiter)) {
	if _recv == nil {
		panic("clientRest.RateLimiter: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RateLimiterMocks = []func() (rest.RateLimiter){}
	} else if len(_dat.RateLimiterMocks) < 2 {
		_dat.RateLimiterMocks = []func() (rest.RateLimiter){fn, fn}
	} else {
		_dat.RateLimiterMocks = _dat.RateLimiterMocks[:len(_dat.RateLimiterMocks)-1]
		_dat.RateLimiterMocks = append(_dat.RateLimiterMocks, fn)
		_dat.RateLimiterMocks = append(_dat.RateLimiterMocks, fn)
	}
}

func (_recv *clientRest) _RateLimiter_Stub() {
	_recv._RateLimiter_Do(func() (r0 rest.RateLimiter) {
		return r0
	})
}

func (_recv *clientRest) _RateLimiter_Return(r0 rest.RateLimiter) {
	_recv._RateLimiter_Do(func() (rest.RateLimiter) {
		return r0
	})
}

func (_recv *clientRest) _RateLimiter_Calls() []_clientRest_RateLimiter_Call {
	if _recv == nil {
		panic("clientRest.RateLimiter: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RateLimiterCalls
}

func (_recv *clientRest) RefreshAccessToken(clientID snowflake.ID, clientSecret string, refreshToken string, opts ...rest.RequestOpt) (*discord.AccessTokenResponse, error) {
	if _recv == nil {
		panic("clientRest.RefreshAccessToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RefreshAccessTokenCalls = append(_dat.RefreshAccessTokenCalls, _clientRest_RefreshAccessToken_Call{clientID, clientSecret, refreshToken, opts})
	var _fn func(snowflake.ID, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error)
	if len(_dat.RefreshAccessTokenMocks) > 0 {
		_fn = _dat.RefreshAccessTokenMocks[0]
		if len(_dat.RefreshAccessTokenMocks) > 1 {
			_dat.RefreshAccessTokenMocks = _dat.RefreshAccessTokenMocks[1:]
		}
	} else { _fn = _recv.Rest.RefreshAccessToken }
	_dat.mutex.Unlock()
	return _fn(clientID, clientSecret, refreshToken, opts...)
}

func (_recv *clientRest) _RefreshAccessToken_Do(fn func(snowflake.ID, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error)) {
	if _recv == nil {
		panic("clientRest.RefreshAccessToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RefreshAccessTokenMocks = []func(snowflake.ID, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error){}
	} else if len(_dat.RefreshAccessTokenMocks) < 2 {
		_dat.RefreshAccessTokenMocks = []func(snowflake.ID, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error){fn, fn}
	} else {
		_dat.RefreshAccessTokenMocks = _dat.RefreshAccessTokenMocks[:len(_dat.RefreshAccessTokenMocks)-1]
		_dat.RefreshAccessTokenMocks = append(_dat.RefreshAccessTokenMocks, fn)
		_dat.RefreshAccessTokenMocks = append(_dat.RefreshAccessTokenMocks, fn)
	}
}

func (_recv *clientRest) _RefreshAccessToken_Stub() {
	_recv._RefreshAccessToken_Do(func(snowflake.ID, string, string, ...rest.RequestOpt) (r0 *discord.AccessTokenResponse, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _RefreshAccessToken_Return(r0 *discord.AccessTokenResponse, r1 error) {
	_recv._RefreshAccessToken_Do(func(snowflake.ID, string, string, ...rest.RequestOpt) (*discord.AccessTokenResponse, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _RefreshAccessToken_Calls() []_clientRest_RefreshAccessToken_Call {
	if _recv == nil {
		panic("clientRest.RefreshAccessToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RefreshAccessTokenCalls
}

func (_recv *clientRest) RemoveAllReactions(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.RemoveAllReactions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RemoveAllReactionsCalls = append(_dat.RemoveAllReactionsCalls, _clientRest_RemoveAllReactions_Call{channelID, messageID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.RemoveAllReactionsMocks) > 0 {
		_fn = _dat.RemoveAllReactionsMocks[0]
		if len(_dat.RemoveAllReactionsMocks) > 1 {
			_dat.RemoveAllReactionsMocks = _dat.RemoveAllReactionsMocks[1:]
		}
	} else { _fn = _recv.Rest.RemoveAllReactions }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, opts...)
}

func (_recv *clientRest) _RemoveAllReactions_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.RemoveAllReactions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RemoveAllReactionsMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.RemoveAllReactionsMocks) < 2 {
		_dat.RemoveAllReactionsMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.RemoveAllReactionsMocks = _dat.RemoveAllReactionsMocks[:len(_dat.RemoveAllReactionsMocks)-1]
		_dat.RemoveAllReactionsMocks = append(_dat.RemoveAllReactionsMocks, fn)
		_dat.RemoveAllReactionsMocks = append(_dat.RemoveAllReactionsMocks, fn)
	}
}

func (_recv *clientRest) _RemoveAllReactions_Stub() {
	_recv._RemoveAllReactions_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveAllReactions_Return(r0 error) {
	_recv._RemoveAllReactions_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveAllReactions_Calls() []_clientRest_RemoveAllReactions_Call {
	if _recv == nil {
		panic("clientRest.RemoveAllReactions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RemoveAllReactionsCalls
}

func (_recv *clientRest) RemoveAllReactionsForEmoji(channelID snowflake.ID, messageID snowflake.ID, emoji string, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.RemoveAllReactionsForEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RemoveAllReactionsForEmojiCalls = append(_dat.RemoveAllReactionsForEmojiCalls, _clientRest_RemoveAllReactionsForEmoji_Call{channelID, messageID, emoji, opts})
	var _fn func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error)
	if len(_dat.RemoveAllReactionsForEmojiMocks) > 0 {
		_fn = _dat.RemoveAllReactionsForEmojiMocks[0]
		if len(_dat.RemoveAllReactionsForEmojiMocks) > 1 {
			_dat.RemoveAllReactionsForEmojiMocks = _dat.RemoveAllReactionsForEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.RemoveAllReactionsForEmoji }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, emoji, opts...)
}

func (_recv *clientRest) _RemoveAllReactionsForEmoji_Do(fn func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.RemoveAllReactionsForEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RemoveAllReactionsForEmojiMocks = []func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error){}
	} else if len(_dat.RemoveAllReactionsForEmojiMocks) < 2 {
		_dat.RemoveAllReactionsForEmojiMocks = []func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.RemoveAllReactionsForEmojiMocks = _dat.RemoveAllReactionsForEmojiMocks[:len(_dat.RemoveAllReactionsForEmojiMocks)-1]
		_dat.RemoveAllReactionsForEmojiMocks = append(_dat.RemoveAllReactionsForEmojiMocks, fn)
		_dat.RemoveAllReactionsForEmojiMocks = append(_dat.RemoveAllReactionsForEmojiMocks, fn)
	}
}

func (_recv *clientRest) _RemoveAllReactionsForEmoji_Stub() {
	_recv._RemoveAllReactionsForEmoji_Do(func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveAllReactionsForEmoji_Return(r0 error) {
	_recv._RemoveAllReactionsForEmoji_Do(func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveAllReactionsForEmoji_Calls() []_clientRest_RemoveAllReactionsForEmoji_Call {
	if _recv == nil {
		panic("clientRest.RemoveAllReactionsForEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RemoveAllReactionsForEmojiCalls
}

func (_recv *clientRest) RemoveMember(guildID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.RemoveMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RemoveMemberCalls = append(_dat.RemoveMemberCalls, _clientRest_RemoveMember_Call{guildID, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.RemoveMemberMocks) > 0 {
		_fn = _dat.RemoveMemberMocks[0]
		if len(_dat.RemoveMemberMocks) > 1 {
			_dat.RemoveMemberMocks = _dat.RemoveMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.RemoveMember }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, opts...)
}

func (_recv *clientRest) _RemoveMember_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.RemoveMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RemoveMemberMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.RemoveMemberMocks) < 2 {
		_dat.RemoveMemberMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.RemoveMemberMocks = _dat.RemoveMemberMocks[:len(_dat.RemoveMemberMocks)-1]
		_dat.RemoveMemberMocks = append(_dat.RemoveMemberMocks, fn)
		_dat.RemoveMemberMocks = append(_dat.RemoveMemberMocks, fn)
	}
}

func (_recv *clientRest) _RemoveMember_Stub() {
	_recv._RemoveMember_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveMember_Return(r0 error) {
	_recv._RemoveMember_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveMember_Calls() []_clientRest_RemoveMember_Call {
	if _recv == nil {
		panic("clientRest.RemoveMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RemoveMemberCalls
}

func (_recv *clientRest) RemoveMemberRole(guildID snowflake.ID, userID snowflake.ID, roleID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.RemoveMemberRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RemoveMemberRoleCalls = append(_dat.RemoveMemberRoleCalls, _clientRest_RemoveMemberRole_Call{guildID, userID, roleID, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.RemoveMemberRoleMocks) > 0 {
		_fn = _dat.RemoveMemberRoleMocks[0]
		if len(_dat.RemoveMemberRoleMocks) > 1 {
			_dat.RemoveMemberRoleMocks = _dat.RemoveMemberRoleMocks[1:]
		}
	} else { _fn = _recv.Rest.RemoveMemberRole }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, roleID, opts...)
}

func (_recv *clientRest) _RemoveMemberRole_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.RemoveMemberRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RemoveMemberRoleMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.RemoveMemberRoleMocks) < 2 {
		_dat.RemoveMemberRoleMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.RemoveMemberRoleMocks = _dat.RemoveMemberRoleMocks[:len(_dat.RemoveMemberRoleMocks)-1]
		_dat.RemoveMemberRoleMocks = append(_dat.RemoveMemberRoleMocks, fn)
		_dat.RemoveMemberRoleMocks = append(_dat.RemoveMemberRoleMocks, fn)
	}
}

func (_recv *clientRest) _RemoveMemberRole_Stub() {
	_recv._RemoveMemberRole_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveMemberRole_Return(r0 error) {
	_recv._RemoveMemberRole_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveMemberRole_Calls() []_clientRest_RemoveMemberRole_Call {
	if _recv == nil {
		panic("clientRest.RemoveMemberRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RemoveMemberRoleCalls
}

func (_recv *clientRest) RemoveOwnReaction(channelID snowflake.ID, messageID snowflake.ID, emoji string, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.RemoveOwnReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RemoveOwnReactionCalls = append(_dat.RemoveOwnReactionCalls, _clientRest_RemoveOwnReaction_Call{channelID, messageID, emoji, opts})
	var _fn func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error)
	if len(_dat.RemoveOwnReactionMocks) > 0 {
		_fn = _dat.RemoveOwnReactionMocks[0]
		if len(_dat.RemoveOwnReactionMocks) > 1 {
			_dat.RemoveOwnReactionMocks = _dat.RemoveOwnReactionMocks[1:]
		}
	} else { _fn = _recv.Rest.RemoveOwnReaction }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, emoji, opts...)
}

func (_recv *clientRest) _RemoveOwnReaction_Do(fn func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.RemoveOwnReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RemoveOwnReactionMocks = []func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error){}
	} else if len(_dat.RemoveOwnReactionMocks) < 2 {
		_dat.RemoveOwnReactionMocks = []func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.RemoveOwnReactionMocks = _dat.RemoveOwnReactionMocks[:len(_dat.RemoveOwnReactionMocks)-1]
		_dat.RemoveOwnReactionMocks = append(_dat.RemoveOwnReactionMocks, fn)
		_dat.RemoveOwnReactionMocks = append(_dat.RemoveOwnReactionMocks, fn)
	}
}

func (_recv *clientRest) _RemoveOwnReaction_Stub() {
	_recv._RemoveOwnReaction_Do(func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveOwnReaction_Return(r0 error) {
	_recv._RemoveOwnReaction_Do(func(snowflake.ID, snowflake.ID, string, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveOwnReaction_Calls() []_clientRest_RemoveOwnReaction_Call {
	if _recv == nil {
		panic("clientRest.RemoveOwnReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RemoveOwnReactionCalls
}

func (_recv *clientRest) RemoveThreadMember(threadID snowflake.ID, userID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.RemoveThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RemoveThreadMemberCalls = append(_dat.RemoveThreadMemberCalls, _clientRest_RemoveThreadMember_Call{threadID, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.RemoveThreadMemberMocks) > 0 {
		_fn = _dat.RemoveThreadMemberMocks[0]
		if len(_dat.RemoveThreadMemberMocks) > 1 {
			_dat.RemoveThreadMemberMocks = _dat.RemoveThreadMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.RemoveThreadMember }
	_dat.mutex.Unlock()
	return _fn(threadID, userID, opts...)
}

func (_recv *clientRest) _RemoveThreadMember_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.RemoveThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RemoveThreadMemberMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.RemoveThreadMemberMocks) < 2 {
		_dat.RemoveThreadMemberMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.RemoveThreadMemberMocks = _dat.RemoveThreadMemberMocks[:len(_dat.RemoveThreadMemberMocks)-1]
		_dat.RemoveThreadMemberMocks = append(_dat.RemoveThreadMemberMocks, fn)
		_dat.RemoveThreadMemberMocks = append(_dat.RemoveThreadMemberMocks, fn)
	}
}

func (_recv *clientRest) _RemoveThreadMember_Stub() {
	_recv._RemoveThreadMember_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveThreadMember_Return(r0 error) {
	_recv._RemoveThreadMember_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveThreadMember_Calls() []_clientRest_RemoveThreadMember_Call {
	if _recv == nil {
		panic("clientRest.RemoveThreadMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RemoveThreadMemberCalls
}

func (_recv *clientRest) RemoveUserReaction(channelID snowflake.ID, messageID snowflake.ID, emoji string, userID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.RemoveUserReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.RemoveUserReactionCalls = append(_dat.RemoveUserReactionCalls, _clientRest_RemoveUserReaction_Call{channelID, messageID, emoji, userID, opts})
	var _fn func(snowflake.ID, snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.RemoveUserReactionMocks) > 0 {
		_fn = _dat.RemoveUserReactionMocks[0]
		if len(_dat.RemoveUserReactionMocks) > 1 {
			_dat.RemoveUserReactionMocks = _dat.RemoveUserReactionMocks[1:]
		}
	} else { _fn = _recv.Rest.RemoveUserReaction }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, emoji, userID, opts...)
}

func (_recv *clientRest) _RemoveUserReaction_Do(fn func(snowflake.ID, snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.RemoveUserReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.RemoveUserReactionMocks = []func(snowflake.ID, snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.RemoveUserReactionMocks) < 2 {
		_dat.RemoveUserReactionMocks = []func(snowflake.ID, snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.RemoveUserReactionMocks = _dat.RemoveUserReactionMocks[:len(_dat.RemoveUserReactionMocks)-1]
		_dat.RemoveUserReactionMocks = append(_dat.RemoveUserReactionMocks, fn)
		_dat.RemoveUserReactionMocks = append(_dat.RemoveUserReactionMocks, fn)
	}
}

func (_recv *clientRest) _RemoveUserReaction_Stub() {
	_recv._RemoveUserReaction_Do(func(snowflake.ID, snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveUserReaction_Return(r0 error) {
	_recv._RemoveUserReaction_Do(func(snowflake.ID, snowflake.ID, string, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _RemoveUserReaction_Calls() []_clientRest_RemoveUserReaction_Call {
	if _recv == nil {
		panic("clientRest.RemoveUserReaction: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.RemoveUserReactionCalls
}

func (_recv *clientRest) SearchMembers(guildID snowflake.ID, query string, limit int, opts ...rest.RequestOpt) ([]discord.Member, error) {
	if _recv == nil {
		panic("clientRest.SearchMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.SearchMembersCalls = append(_dat.SearchMembersCalls, _clientRest_SearchMembers_Call{guildID, query, limit, opts})
	var _fn func(snowflake.ID, string, int, ...rest.RequestOpt) ([]discord.Member, error)
	if len(_dat.SearchMembersMocks) > 0 {
		_fn = _dat.SearchMembersMocks[0]
		if len(_dat.SearchMembersMocks) > 1 {
			_dat.SearchMembersMocks = _dat.SearchMembersMocks[1:]
		}
	} else { _fn = _recv.Rest.SearchMembers }
	_dat.mutex.Unlock()
	return _fn(guildID, query, limit, opts...)
}

func (_recv *clientRest) _SearchMembers_Do(fn func(snowflake.ID, string, int, ...rest.RequestOpt) ([]discord.Member, error)) {
	if _recv == nil {
		panic("clientRest.SearchMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.SearchMembersMocks = []func(snowflake.ID, string, int, ...rest.RequestOpt) ([]discord.Member, error){}
	} else if len(_dat.SearchMembersMocks) < 2 {
		_dat.SearchMembersMocks = []func(snowflake.ID, string, int, ...rest.RequestOpt) ([]discord.Member, error){fn, fn}
	} else {
		_dat.SearchMembersMocks = _dat.SearchMembersMocks[:len(_dat.SearchMembersMocks)-1]
		_dat.SearchMembersMocks = append(_dat.SearchMembersMocks, fn)
		_dat.SearchMembersMocks = append(_dat.SearchMembersMocks, fn)
	}
}

func (_recv *clientRest) _SearchMembers_Stub() {
	_recv._SearchMembers_Do(func(snowflake.ID, string, int, ...rest.RequestOpt) (r0 []discord.Member, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SearchMembers_Return(r0 []discord.Member, r1 error) {
	_recv._SearchMembers_Do(func(snowflake.ID, string, int, ...rest.RequestOpt) ([]discord.Member, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SearchMembers_Calls() []_clientRest_SearchMembers_Call {
	if _recv == nil {
		panic("clientRest.SearchMembers: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.SearchMembersCalls
}

func (_recv *clientRest) SendSoundboardSound(channelID snowflake.ID, sendSound discord.SendSoundboardSound, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.SendSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.SendSoundboardSoundCalls = append(_dat.SendSoundboardSoundCalls, _clientRest_SendSoundboardSound_Call{channelID, sendSound, opts})
	var _fn func(snowflake.ID, discord.SendSoundboardSound, ...rest.RequestOpt) (error)
	if len(_dat.SendSoundboardSoundMocks) > 0 {
		_fn = _dat.SendSoundboardSoundMocks[0]
		if len(_dat.SendSoundboardSoundMocks) > 1 {
			_dat.SendSoundboardSoundMocks = _dat.SendSoundboardSoundMocks[1:]
		}
	} else { _fn = _recv.Rest.SendSoundboardSound }
	_dat.mutex.Unlock()
	return _fn(channelID, sendSound, opts...)
}

func (_recv *clientRest) _SendSoundboardSound_Do(fn func(snowflake.ID, discord.SendSoundboardSound, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.SendSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.SendSoundboardSoundMocks = []func(snowflake.ID, discord.SendSoundboardSound, ...rest.RequestOpt) (error){}
	} else if len(_dat.SendSoundboardSoundMocks) < 2 {
		_dat.SendSoundboardSoundMocks = []func(snowflake.ID, discord.SendSoundboardSound, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.SendSoundboardSoundMocks = _dat.SendSoundboardSoundMocks[:len(_dat.SendSoundboardSoundMocks)-1]
		_dat.SendSoundboardSoundMocks = append(_dat.SendSoundboardSoundMocks, fn)
		_dat.SendSoundboardSoundMocks = append(_dat.SendSoundboardSoundMocks, fn)
	}
}

func (_recv *clientRest) _SendSoundboardSound_Stub() {
	_recv._SendSoundboardSound_Do(func(snowflake.ID, discord.SendSoundboardSound, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _SendSoundboardSound_Return(r0 error) {
	_recv._SendSoundboardSound_Do(func(snowflake.ID, discord.SendSoundboardSound, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _SendSoundboardSound_Calls() []_clientRest_SendSoundboardSound_Call {
	if _recv == nil {
		panic("clientRest.SendSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.SendSoundboardSoundCalls
}

func (_recv *clientRest) SendTyping(channelID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.SendTyping: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.SendTypingCalls = append(_dat.SendTypingCalls, _clientRest_SendTyping_Call{channelID, opts})
	var _fn func(snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.SendTypingMocks) > 0 {
		_fn = _dat.SendTypingMocks[0]
		if len(_dat.SendTypingMocks) > 1 {
			_dat.SendTypingMocks = _dat.SendTypingMocks[1:]
		}
	} else { _fn = _recv.Rest.SendTyping }
	_dat.mutex.Unlock()
	return _fn(channelID, opts...)
}

func (_recv *clientRest) _SendTyping_Do(fn func(snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.SendTyping: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.SendTypingMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.SendTypingMocks) < 2 {
		_dat.SendTypingMocks = []func(snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.SendTypingMocks = _dat.SendTypingMocks[:len(_dat.SendTypingMocks)-1]
		_dat.SendTypingMocks = append(_dat.SendTypingMocks, fn)
		_dat.SendTypingMocks = append(_dat.SendTypingMocks, fn)
	}
}

func (_recv *clientRest) _SendTyping_Stub() {
	_recv._SendTyping_Do(func(snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _SendTyping_Return(r0 error) {
	_recv._SendTyping_Do(func(snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _SendTyping_Calls() []_clientRest_SendTyping_Call {
	if _recv == nil {
		panic("clientRest.SendTyping: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.SendTypingCalls
}

func (_recv *clientRest) SetGlobalCommands(applicationID snowflake.ID, commandCreates []discord.ApplicationCommandCreate, opts ...rest.RequestOpt) ([]discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.SetGlobalCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.SetGlobalCommandsCalls = append(_dat.SetGlobalCommandsCalls, _clientRest_SetGlobalCommands_Call{applicationID, commandCreates, opts})
	var _fn func(snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error)
	if len(_dat.SetGlobalCommandsMocks) > 0 {
		_fn = _dat.SetGlobalCommandsMocks[0]
		if len(_dat.SetGlobalCommandsMocks) > 1 {
			_dat.SetGlobalCommandsMocks = _dat.SetGlobalCommandsMocks[1:]
		}
	} else { _fn = _recv.Rest.SetGlobalCommands }
	_dat.mutex.Unlock()
	return _fn(applicationID, commandCreates, opts...)
}

func (_recv *clientRest) _SetGlobalCommands_Do(fn func(snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.SetGlobalCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.SetGlobalCommandsMocks = []func(snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error){}
	} else if len(_dat.SetGlobalCommandsMocks) < 2 {
		_dat.SetGlobalCommandsMocks = []func(snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.SetGlobalCommandsMocks = _dat.SetGlobalCommandsMocks[:len(_dat.SetGlobalCommandsMocks)-1]
		_dat.SetGlobalCommandsMocks = append(_dat.SetGlobalCommandsMocks, fn)
		_dat.SetGlobalCommandsMocks = append(_dat.SetGlobalCommandsMocks, fn)
	}
}

func (_recv *clientRest) _SetGlobalCommands_Stub() {
	_recv._SetGlobalCommands_Do(func(snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) (r0 []discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SetGlobalCommands_Return(r0 []discord.ApplicationCommand, r1 error) {
	_recv._SetGlobalCommands_Do(func(snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SetGlobalCommands_Calls() []_clientRest_SetGlobalCommands_Call {
	if _recv == nil {
		panic("clientRest.SetGlobalCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.SetGlobalCommandsCalls
}

func (_recv *clientRest) SetGuildCommandPermissions(bearerToken string, applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, commandPermissions []discord.ApplicationCommandPermission, opts ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error) {
	if _recv == nil {
		panic("clientRest.SetGuildCommandPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.SetGuildCommandPermissionsCalls = append(_dat.SetGuildCommandPermissionsCalls, _clientRest_SetGuildCommandPermissions_Call{bearerToken, applicationID, guildID, commandID, commandPermissions, opts})
	var _fn func(string, snowflake.ID, snowflake.ID, snowflake.ID, []discord.ApplicationCommandPermission, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error)
	if len(_dat.SetGuildCommandPermissionsMocks) > 0 {
		_fn = _dat.SetGuildCommandPermissionsMocks[0]
		if len(_dat.SetGuildCommandPermissionsMocks) > 1 {
			_dat.SetGuildCommandPermissionsMocks = _dat.SetGuildCommandPermissionsMocks[1:]
		}
	} else { _fn = _recv.Rest.SetGuildCommandPermissions }
	_dat.mutex.Unlock()
	return _fn(bearerToken, applicationID, guildID, commandID, commandPermissions, opts...)
}

func (_recv *clientRest) _SetGuildCommandPermissions_Do(fn func(string, snowflake.ID, snowflake.ID, snowflake.ID, []discord.ApplicationCommandPermission, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error)) {
	if _recv == nil {
		panic("clientRest.SetGuildCommandPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.SetGuildCommandPermissionsMocks = []func(string, snowflake.ID, snowflake.ID, snowflake.ID, []discord.ApplicationCommandPermission, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error){}
	} else if len(_dat.SetGuildCommandPermissionsMocks) < 2 {
		_dat.SetGuildCommandPermissionsMocks = []func(string, snowflake.ID, snowflake.ID, snowflake.ID, []discord.ApplicationCommandPermission, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error){fn, fn}
	} else {
		_dat.SetGuildCommandPermissionsMocks = _dat.SetGuildCommandPermissionsMocks[:len(_dat.SetGuildCommandPermissionsMocks)-1]
		_dat.SetGuildCommandPermissionsMocks = append(_dat.SetGuildCommandPermissionsMocks, fn)
		_dat.SetGuildCommandPermissionsMocks = append(_dat.SetGuildCommandPermissionsMocks, fn)
	}
}

func (_recv *clientRest) _SetGuildCommandPermissions_Stub() {
	_recv._SetGuildCommandPermissions_Do(func(string, snowflake.ID, snowflake.ID, snowflake.ID, []discord.ApplicationCommandPermission, ...rest.RequestOpt) (r0 *discord.ApplicationCommandPermissions, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SetGuildCommandPermissions_Return(r0 *discord.ApplicationCommandPermissions, r1 error) {
	_recv._SetGuildCommandPermissions_Do(func(string, snowflake.ID, snowflake.ID, snowflake.ID, []discord.ApplicationCommandPermission, ...rest.RequestOpt) (*discord.ApplicationCommandPermissions, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SetGuildCommandPermissions_Calls() []_clientRest_SetGuildCommandPermissions_Call {
	if _recv == nil {
		panic("clientRest.SetGuildCommandPermissions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.SetGuildCommandPermissionsCalls
}

func (_recv *clientRest) SetGuildCommands(applicationID snowflake.ID, guildID snowflake.ID, commands []discord.ApplicationCommandCreate, opts ...rest.RequestOpt) ([]discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.SetGuildCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.SetGuildCommandsCalls = append(_dat.SetGuildCommandsCalls, _clientRest_SetGuildCommands_Call{applicationID, guildID, commands, opts})
	var _fn func(snowflake.ID, snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error)
	if len(_dat.SetGuildCommandsMocks) > 0 {
		_fn = _dat.SetGuildCommandsMocks[0]
		if len(_dat.SetGuildCommandsMocks) > 1 {
			_dat.SetGuildCommandsMocks = _dat.SetGuildCommandsMocks[1:]
		}
	} else { _fn = _recv.Rest.SetGuildCommands }
	_dat.mutex.Unlock()
	return _fn(applicationID, guildID, commands, opts...)
}

func (_recv *clientRest) _SetGuildCommands_Do(fn func(snowflake.ID, snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.SetGuildCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.SetGuildCommandsMocks = []func(snowflake.ID, snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error){}
	} else if len(_dat.SetGuildCommandsMocks) < 2 {
		_dat.SetGuildCommandsMocks = []func(snowflake.ID, snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.SetGuildCommandsMocks = _dat.SetGuildCommandsMocks[:len(_dat.SetGuildCommandsMocks)-1]
		_dat.SetGuildCommandsMocks = append(_dat.SetGuildCommandsMocks, fn)
		_dat.SetGuildCommandsMocks = append(_dat.SetGuildCommandsMocks, fn)
	}
}

func (_recv *clientRest) _SetGuildCommands_Stub() {
	_recv._SetGuildCommands_Do(func(snowflake.ID, snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) (r0 []discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SetGuildCommands_Return(r0 []discord.ApplicationCommand, r1 error) {
	_recv._SetGuildCommands_Do(func(snowflake.ID, snowflake.ID, []discord.ApplicationCommandCreate, ...rest.RequestOpt) ([]discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SetGuildCommands_Calls() []_clientRest_SetGuildCommands_Call {
	if _recv == nil {
		panic("clientRest.SetGuildCommands: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.SetGuildCommandsCalls
}

func (_recv *clientRest) SyncGuildTemplate(guildID snowflake.ID, templateCode string, opts ...rest.RequestOpt) (*discord.GuildTemplate, error) {
	if _recv == nil {
		panic("clientRest.SyncGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.SyncGuildTemplateCalls = append(_dat.SyncGuildTemplateCalls, _clientRest_SyncGuildTemplate_Call{guildID, templateCode, opts})
	var _fn func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error)
	if len(_dat.SyncGuildTemplateMocks) > 0 {
		_fn = _dat.SyncGuildTemplateMocks[0]
		if len(_dat.SyncGuildTemplateMocks) > 1 {
			_dat.SyncGuildTemplateMocks = _dat.SyncGuildTemplateMocks[1:]
		}
	} else { _fn = _recv.Rest.SyncGuildTemplate }
	_dat.mutex.Unlock()
	return _fn(guildID, templateCode, opts...)
}

func (_recv *clientRest) _SyncGuildTemplate_Do(fn func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error)) {
	if _recv == nil {
		panic("clientRest.SyncGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.SyncGuildTemplateMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error){}
	} else if len(_dat.SyncGuildTemplateMocks) < 2 {
		_dat.SyncGuildTemplateMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error){fn, fn}
	} else {
		_dat.SyncGuildTemplateMocks = _dat.SyncGuildTemplateMocks[:len(_dat.SyncGuildTemplateMocks)-1]
		_dat.SyncGuildTemplateMocks = append(_dat.SyncGuildTemplateMocks, fn)
		_dat.SyncGuildTemplateMocks = append(_dat.SyncGuildTemplateMocks, fn)
	}
}

func (_recv *clientRest) _SyncGuildTemplate_Stub() {
	_recv._SyncGuildTemplate_Do(func(snowflake.ID, string, ...rest.RequestOpt) (r0 *discord.GuildTemplate, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SyncGuildTemplate_Return(r0 *discord.GuildTemplate, r1 error) {
	_recv._SyncGuildTemplate_Do(func(snowflake.ID, string, ...rest.RequestOpt) (*discord.GuildTemplate, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _SyncGuildTemplate_Calls() []_clientRest_SyncGuildTemplate_Call {
	if _recv == nil {
		panic("clientRest.SyncGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.SyncGuildTemplateCalls
}

func (_recv *clientRest) UnpinMessage(channelID snowflake.ID, messageID snowflake.ID, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.UnpinMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UnpinMessageCalls = append(_dat.UnpinMessageCalls, _clientRest_UnpinMessage_Call{channelID, messageID, opts})
	var _fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)
	if len(_dat.UnpinMessageMocks) > 0 {
		_fn = _dat.UnpinMessageMocks[0]
		if len(_dat.UnpinMessageMocks) > 1 {
			_dat.UnpinMessageMocks = _dat.UnpinMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.UnpinMessage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, opts...)
}

func (_recv *clientRest) _UnpinMessage_Do(fn func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.UnpinMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UnpinMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){}
	} else if len(_dat.UnpinMessageMocks) < 2 {
		_dat.UnpinMessageMocks = []func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.UnpinMessageMocks = _dat.UnpinMessageMocks[:len(_dat.UnpinMessageMocks)-1]
		_dat.UnpinMessageMocks = append(_dat.UnpinMessageMocks, fn)
		_dat.UnpinMessageMocks = append(_dat.UnpinMessageMocks, fn)
	}
}

func (_recv *clientRest) _UnpinMessage_Stub() {
	_recv._UnpinMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _UnpinMessage_Return(r0 error) {
	_recv._UnpinMessage_Do(func(snowflake.ID, snowflake.ID, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _UnpinMessage_Calls() []_clientRest_UnpinMessage_Call {
	if _recv == nil {
		panic("clientRest.UnpinMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UnpinMessageCalls
}

func (_recv *clientRest) UpdateApplicationEmoji(applicationID snowflake.ID, emojiID snowflake.ID, emojiUpdate discord.EmojiUpdate, opts ...rest.RequestOpt) (*discord.Emoji, error) {
	if _recv == nil {
		panic("clientRest.UpdateApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateApplicationEmojiCalls = append(_dat.UpdateApplicationEmojiCalls, _clientRest_UpdateApplicationEmoji_Call{applicationID, emojiID, emojiUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error)
	if len(_dat.UpdateApplicationEmojiMocks) > 0 {
		_fn = _dat.UpdateApplicationEmojiMocks[0]
		if len(_dat.UpdateApplicationEmojiMocks) > 1 {
			_dat.UpdateApplicationEmojiMocks = _dat.UpdateApplicationEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateApplicationEmoji }
	_dat.mutex.Unlock()
	return _fn(applicationID, emojiID, emojiUpdate, opts...)
}

func (_recv *clientRest) _UpdateApplicationEmoji_Do(fn func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error)) {
	if _recv == nil {
		panic("clientRest.UpdateApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateApplicationEmojiMocks = []func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error){}
	} else if len(_dat.UpdateApplicationEmojiMocks) < 2 {
		_dat.UpdateApplicationEmojiMocks = []func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error){fn, fn}
	} else {
		_dat.UpdateApplicationEmojiMocks = _dat.UpdateApplicationEmojiMocks[:len(_dat.UpdateApplicationEmojiMocks)-1]
		_dat.UpdateApplicationEmojiMocks = append(_dat.UpdateApplicationEmojiMocks, fn)
		_dat.UpdateApplicationEmojiMocks = append(_dat.UpdateApplicationEmojiMocks, fn)
	}
}

func (_recv *clientRest) _UpdateApplicationEmoji_Stub() {
	_recv._UpdateApplicationEmoji_Do(func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (r0 *discord.Emoji, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateApplicationEmoji_Return(r0 *discord.Emoji, r1 error) {
	_recv._UpdateApplicationEmoji_Do(func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateApplicationEmoji_Calls() []_clientRest_UpdateApplicationEmoji_Call {
	if _recv == nil {
		panic("clientRest.UpdateApplicationEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateApplicationEmojiCalls
}

func (_recv *clientRest) UpdateApplicationRoleConnectionMetadata(applicationID snowflake.ID, newRecords []discord.ApplicationRoleConnectionMetadata, opts ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error) {
	if _recv == nil {
		panic("clientRest.UpdateApplicationRoleConnectionMetadata: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateApplicationRoleConnectionMetadataCalls = append(_dat.UpdateApplicationRoleConnectionMetadataCalls, _clientRest_UpdateApplicationRoleConnectionMetadata_Call{applicationID, newRecords, opts})
	var _fn func(snowflake.ID, []discord.ApplicationRoleConnectionMetadata, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error)
	if len(_dat.UpdateApplicationRoleConnectionMetadataMocks) > 0 {
		_fn = _dat.UpdateApplicationRoleConnectionMetadataMocks[0]
		if len(_dat.UpdateApplicationRoleConnectionMetadataMocks) > 1 {
			_dat.UpdateApplicationRoleConnectionMetadataMocks = _dat.UpdateApplicationRoleConnectionMetadataMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateApplicationRoleConnectionMetadata }
	_dat.mutex.Unlock()
	return _fn(applicationID, newRecords, opts...)
}

func (_recv *clientRest) _UpdateApplicationRoleConnectionMetadata_Do(fn func(snowflake.ID, []discord.ApplicationRoleConnectionMetadata, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error)) {
	if _recv == nil {
		panic("clientRest.UpdateApplicationRoleConnectionMetadata: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateApplicationRoleConnectionMetadataMocks = []func(snowflake.ID, []discord.ApplicationRoleConnectionMetadata, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error){}
	} else if len(_dat.UpdateApplicationRoleConnectionMetadataMocks) < 2 {
		_dat.UpdateApplicationRoleConnectionMetadataMocks = []func(snowflake.ID, []discord.ApplicationRoleConnectionMetadata, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error){fn, fn}
	} else {
		_dat.UpdateApplicationRoleConnectionMetadataMocks = _dat.UpdateApplicationRoleConnectionMetadataMocks[:len(_dat.UpdateApplicationRoleConnectionMetadataMocks)-1]
		_dat.UpdateApplicationRoleConnectionMetadataMocks = append(_dat.UpdateApplicationRoleConnectionMetadataMocks, fn)
		_dat.UpdateApplicationRoleConnectionMetadataMocks = append(_dat.UpdateApplicationRoleConnectionMetadataMocks, fn)
	}
}

func (_recv *clientRest) _UpdateApplicationRoleConnectionMetadata_Stub() {
	_recv._UpdateApplicationRoleConnectionMetadata_Do(func(snowflake.ID, []discord.ApplicationRoleConnectionMetadata, ...rest.RequestOpt) (r0 []discord.ApplicationRoleConnectionMetadata, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateApplicationRoleConnectionMetadata_Return(r0 []discord.ApplicationRoleConnectionMetadata, r1 error) {
	_recv._UpdateApplicationRoleConnectionMetadata_Do(func(snowflake.ID, []discord.ApplicationRoleConnectionMetadata, ...rest.RequestOpt) ([]discord.ApplicationRoleConnectionMetadata, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateApplicationRoleConnectionMetadata_Calls() []_clientRest_UpdateApplicationRoleConnectionMetadata_Call {
	if _recv == nil {
		panic("clientRest.UpdateApplicationRoleConnectionMetadata: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateApplicationRoleConnectionMetadataCalls
}

func (_recv *clientRest) UpdateAutoModerationRule(guildID snowflake.ID, ruleID snowflake.ID, ruleUpdate discord.AutoModerationRuleUpdate, opts ...rest.RequestOpt) (*discord.AutoModerationRule, error) {
	if _recv == nil {
		panic("clientRest.UpdateAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateAutoModerationRuleCalls = append(_dat.UpdateAutoModerationRuleCalls, _clientRest_UpdateAutoModerationRule_Call{guildID, ruleID, ruleUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.AutoModerationRuleUpdate, ...rest.RequestOpt) (*discord.AutoModerationRule, error)
	if len(_dat.UpdateAutoModerationRuleMocks) > 0 {
		_fn = _dat.UpdateAutoModerationRuleMocks[0]
		if len(_dat.UpdateAutoModerationRuleMocks) > 1 {
			_dat.UpdateAutoModerationRuleMocks = _dat.UpdateAutoModerationRuleMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateAutoModerationRule }
	_dat.mutex.Unlock()
	return _fn(guildID, ruleID, ruleUpdate, opts...)
}

func (_recv *clientRest) _UpdateAutoModerationRule_Do(fn func(snowflake.ID, snowflake.ID, discord.AutoModerationRuleUpdate, ...rest.RequestOpt) (*discord.AutoModerationRule, error)) {
	if _recv == nil {
		panic("clientRest.UpdateAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateAutoModerationRuleMocks = []func(snowflake.ID, snowflake.ID, discord.AutoModerationRuleUpdate, ...rest.RequestOpt) (*discord.AutoModerationRule, error){}
	} else if len(_dat.UpdateAutoModerationRuleMocks) < 2 {
		_dat.UpdateAutoModerationRuleMocks = []func(snowflake.ID, snowflake.ID, discord.AutoModerationRuleUpdate, ...rest.RequestOpt) (*discord.AutoModerationRule, error){fn, fn}
	} else {
		_dat.UpdateAutoModerationRuleMocks = _dat.UpdateAutoModerationRuleMocks[:len(_dat.UpdateAutoModerationRuleMocks)-1]
		_dat.UpdateAutoModerationRuleMocks = append(_dat.UpdateAutoModerationRuleMocks, fn)
		_dat.UpdateAutoModerationRuleMocks = append(_dat.UpdateAutoModerationRuleMocks, fn)
	}
}

func (_recv *clientRest) _UpdateAutoModerationRule_Stub() {
	_recv._UpdateAutoModerationRule_Do(func(snowflake.ID, snowflake.ID, discord.AutoModerationRuleUpdate, ...rest.RequestOpt) (r0 *discord.AutoModerationRule, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateAutoModerationRule_Return(r0 *discord.AutoModerationRule, r1 error) {
	_recv._UpdateAutoModerationRule_Do(func(snowflake.ID, snowflake.ID, discord.AutoModerationRuleUpdate, ...rest.RequestOpt) (*discord.AutoModerationRule, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateAutoModerationRule_Calls() []_clientRest_UpdateAutoModerationRule_Call {
	if _recv == nil {
		panic("clientRest.UpdateAutoModerationRule: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateAutoModerationRuleCalls
}

func (_recv *clientRest) UpdateChannel(channelID snowflake.ID, channelUpdate discord.ChannelUpdate, opts ...rest.RequestOpt) (discord.Channel, error) {
	if _recv == nil {
		panic("clientRest.UpdateChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateChannelCalls = append(_dat.UpdateChannelCalls, _clientRest_UpdateChannel_Call{channelID, channelUpdate, opts})
	var _fn func(snowflake.ID, discord.ChannelUpdate, ...rest.RequestOpt) (discord.Channel, error)
	if len(_dat.UpdateChannelMocks) > 0 {
		_fn = _dat.UpdateChannelMocks[0]
		if len(_dat.UpdateChannelMocks) > 1 {
			_dat.UpdateChannelMocks = _dat.UpdateChannelMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateChannel }
	_dat.mutex.Unlock()
	return _fn(channelID, channelUpdate, opts...)
}

func (_recv *clientRest) _UpdateChannel_Do(fn func(snowflake.ID, discord.ChannelUpdate, ...rest.RequestOpt) (discord.Channel, error)) {
	if _recv == nil {
		panic("clientRest.UpdateChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateChannelMocks = []func(snowflake.ID, discord.ChannelUpdate, ...rest.RequestOpt) (discord.Channel, error){}
	} else if len(_dat.UpdateChannelMocks) < 2 {
		_dat.UpdateChannelMocks = []func(snowflake.ID, discord.ChannelUpdate, ...rest.RequestOpt) (discord.Channel, error){fn, fn}
	} else {
		_dat.UpdateChannelMocks = _dat.UpdateChannelMocks[:len(_dat.UpdateChannelMocks)-1]
		_dat.UpdateChannelMocks = append(_dat.UpdateChannelMocks, fn)
		_dat.UpdateChannelMocks = append(_dat.UpdateChannelMocks, fn)
	}
}

func (_recv *clientRest) _UpdateChannel_Stub() {
	_recv._UpdateChannel_Do(func(snowflake.ID, discord.ChannelUpdate, ...rest.RequestOpt) (r0 discord.Channel, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateChannel_Return(r0 discord.Channel, r1 error) {
	_recv._UpdateChannel_Do(func(snowflake.ID, discord.ChannelUpdate, ...rest.RequestOpt) (discord.Channel, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateChannel_Calls() []_clientRest_UpdateChannel_Call {
	if _recv == nil {
		panic("clientRest.UpdateChannel: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateChannelCalls
}

func (_recv *clientRest) UpdateChannelPositions(guildID snowflake.ID, guildChannelPositionUpdates []discord.GuildChannelPositionUpdate, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.UpdateChannelPositions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateChannelPositionsCalls = append(_dat.UpdateChannelPositionsCalls, _clientRest_UpdateChannelPositions_Call{guildID, guildChannelPositionUpdates, opts})
	var _fn func(snowflake.ID, []discord.GuildChannelPositionUpdate, ...rest.RequestOpt) (error)
	if len(_dat.UpdateChannelPositionsMocks) > 0 {
		_fn = _dat.UpdateChannelPositionsMocks[0]
		if len(_dat.UpdateChannelPositionsMocks) > 1 {
			_dat.UpdateChannelPositionsMocks = _dat.UpdateChannelPositionsMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateChannelPositions }
	_dat.mutex.Unlock()
	return _fn(guildID, guildChannelPositionUpdates, opts...)
}

func (_recv *clientRest) _UpdateChannelPositions_Do(fn func(snowflake.ID, []discord.GuildChannelPositionUpdate, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.UpdateChannelPositions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateChannelPositionsMocks = []func(snowflake.ID, []discord.GuildChannelPositionUpdate, ...rest.RequestOpt) (error){}
	} else if len(_dat.UpdateChannelPositionsMocks) < 2 {
		_dat.UpdateChannelPositionsMocks = []func(snowflake.ID, []discord.GuildChannelPositionUpdate, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.UpdateChannelPositionsMocks = _dat.UpdateChannelPositionsMocks[:len(_dat.UpdateChannelPositionsMocks)-1]
		_dat.UpdateChannelPositionsMocks = append(_dat.UpdateChannelPositionsMocks, fn)
		_dat.UpdateChannelPositionsMocks = append(_dat.UpdateChannelPositionsMocks, fn)
	}
}

func (_recv *clientRest) _UpdateChannelPositions_Stub() {
	_recv._UpdateChannelPositions_Do(func(snowflake.ID, []discord.GuildChannelPositionUpdate, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _UpdateChannelPositions_Return(r0 error) {
	_recv._UpdateChannelPositions_Do(func(snowflake.ID, []discord.GuildChannelPositionUpdate, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _UpdateChannelPositions_Calls() []_clientRest_UpdateChannelPositions_Call {
	if _recv == nil {
		panic("clientRest.UpdateChannelPositions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateChannelPositionsCalls
}

func (_recv *clientRest) UpdateCurrentApplication(applicationUpdate discord.ApplicationUpdate, opts ...rest.RequestOpt) (*discord.Application, error) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentApplication: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateCurrentApplicationCalls = append(_dat.UpdateCurrentApplicationCalls, _clientRest_UpdateCurrentApplication_Call{applicationUpdate, opts})
	var _fn func(discord.ApplicationUpdate, ...rest.RequestOpt) (*discord.Application, error)
	if len(_dat.UpdateCurrentApplicationMocks) > 0 {
		_fn = _dat.UpdateCurrentApplicationMocks[0]
		if len(_dat.UpdateCurrentApplicationMocks) > 1 {
			_dat.UpdateCurrentApplicationMocks = _dat.UpdateCurrentApplicationMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateCurrentApplication }
	_dat.mutex.Unlock()
	return _fn(applicationUpdate, opts...)
}

func (_recv *clientRest) _UpdateCurrentApplication_Do(fn func(discord.ApplicationUpdate, ...rest.RequestOpt) (*discord.Application, error)) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentApplication: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateCurrentApplicationMocks = []func(discord.ApplicationUpdate, ...rest.RequestOpt) (*discord.Application, error){}
	} else if len(_dat.UpdateCurrentApplicationMocks) < 2 {
		_dat.UpdateCurrentApplicationMocks = []func(discord.ApplicationUpdate, ...rest.RequestOpt) (*discord.Application, error){fn, fn}
	} else {
		_dat.UpdateCurrentApplicationMocks = _dat.UpdateCurrentApplicationMocks[:len(_dat.UpdateCurrentApplicationMocks)-1]
		_dat.UpdateCurrentApplicationMocks = append(_dat.UpdateCurrentApplicationMocks, fn)
		_dat.UpdateCurrentApplicationMocks = append(_dat.UpdateCurrentApplicationMocks, fn)
	}
}

func (_recv *clientRest) _UpdateCurrentApplication_Stub() {
	_recv._UpdateCurrentApplication_Do(func(discord.ApplicationUpdate, ...rest.RequestOpt) (r0 *discord.Application, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateCurrentApplication_Return(r0 *discord.Application, r1 error) {
	_recv._UpdateCurrentApplication_Do(func(discord.ApplicationUpdate, ...rest.RequestOpt) (*discord.Application, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateCurrentApplication_Calls() []_clientRest_UpdateCurrentApplication_Call {
	if _recv == nil {
		panic("clientRest.UpdateCurrentApplication: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateCurrentApplicationCalls
}

func (_recv *clientRest) UpdateCurrentMember(guildID snowflake.ID, nick string, opts ...rest.RequestOpt) (*string, error) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateCurrentMemberCalls = append(_dat.UpdateCurrentMemberCalls, _clientRest_UpdateCurrentMember_Call{guildID, nick, opts})
	var _fn func(snowflake.ID, string, ...rest.RequestOpt) (*string, error)
	if len(_dat.UpdateCurrentMemberMocks) > 0 {
		_fn = _dat.UpdateCurrentMemberMocks[0]
		if len(_dat.UpdateCurrentMemberMocks) > 1 {
			_dat.UpdateCurrentMemberMocks = _dat.UpdateCurrentMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateCurrentMember }
	_dat.mutex.Unlock()
	return _fn(guildID, nick, opts...)
}

func (_recv *clientRest) _UpdateCurrentMember_Do(fn func(snowflake.ID, string, ...rest.RequestOpt) (*string, error)) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateCurrentMemberMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*string, error){}
	} else if len(_dat.UpdateCurrentMemberMocks) < 2 {
		_dat.UpdateCurrentMemberMocks = []func(snowflake.ID, string, ...rest.RequestOpt) (*string, error){fn, fn}
	} else {
		_dat.UpdateCurrentMemberMocks = _dat.UpdateCurrentMemberMocks[:len(_dat.UpdateCurrentMemberMocks)-1]
		_dat.UpdateCurrentMemberMocks = append(_dat.UpdateCurrentMemberMocks, fn)
		_dat.UpdateCurrentMemberMocks = append(_dat.UpdateCurrentMemberMocks, fn)
	}
}

func (_recv *clientRest) _UpdateCurrentMember_Stub() {
	_recv._UpdateCurrentMember_Do(func(snowflake.ID, string, ...rest.RequestOpt) (r0 *string, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateCurrentMember_Return(r0 *string, r1 error) {
	_recv._UpdateCurrentMember_Do(func(snowflake.ID, string, ...rest.RequestOpt) (*string, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateCurrentMember_Calls() []_clientRest_UpdateCurrentMember_Call {
	if _recv == nil {
		panic("clientRest.UpdateCurrentMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateCurrentMemberCalls
}

func (_recv *clientRest) UpdateCurrentUser(userUpdate discord.UserUpdate, opts ...rest.RequestOpt) (*discord.OAuth2User, error) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateCurrentUserCalls = append(_dat.UpdateCurrentUserCalls, _clientRest_UpdateCurrentUser_Call{userUpdate, opts})
	var _fn func(discord.UserUpdate, ...rest.RequestOpt) (*discord.OAuth2User, error)
	if len(_dat.UpdateCurrentUserMocks) > 0 {
		_fn = _dat.UpdateCurrentUserMocks[0]
		if len(_dat.UpdateCurrentUserMocks) > 1 {
			_dat.UpdateCurrentUserMocks = _dat.UpdateCurrentUserMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateCurrentUser }
	_dat.mutex.Unlock()
	return _fn(userUpdate, opts...)
}

func (_recv *clientRest) _UpdateCurrentUser_Do(fn func(discord.UserUpdate, ...rest.RequestOpt) (*discord.OAuth2User, error)) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateCurrentUserMocks = []func(discord.UserUpdate, ...rest.RequestOpt) (*discord.OAuth2User, error){}
	} else if len(_dat.UpdateCurrentUserMocks) < 2 {
		_dat.UpdateCurrentUserMocks = []func(discord.UserUpdate, ...rest.RequestOpt) (*discord.OAuth2User, error){fn, fn}
	} else {
		_dat.UpdateCurrentUserMocks = _dat.UpdateCurrentUserMocks[:len(_dat.UpdateCurrentUserMocks)-1]
		_dat.UpdateCurrentUserMocks = append(_dat.UpdateCurrentUserMocks, fn)
		_dat.UpdateCurrentUserMocks = append(_dat.UpdateCurrentUserMocks, fn)
	}
}

func (_recv *clientRest) _UpdateCurrentUser_Stub() {
	_recv._UpdateCurrentUser_Do(func(discord.UserUpdate, ...rest.RequestOpt) (r0 *discord.OAuth2User, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateCurrentUser_Return(r0 *discord.OAuth2User, r1 error) {
	_recv._UpdateCurrentUser_Do(func(discord.UserUpdate, ...rest.RequestOpt) (*discord.OAuth2User, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateCurrentUser_Calls() []_clientRest_UpdateCurrentUser_Call {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUser: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateCurrentUserCalls
}

func (_recv *clientRest) UpdateCurrentUserApplicationRoleConnection(bearerToken string, applicationID snowflake.ID, connectionUpdate discord.ApplicationRoleConnectionUpdate, opts ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUserApplicationRoleConnection: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateCurrentUserApplicationRoleConnectionCalls = append(_dat.UpdateCurrentUserApplicationRoleConnectionCalls, _clientRest_UpdateCurrentUserApplicationRoleConnection_Call{bearerToken, applicationID, connectionUpdate, opts})
	var _fn func(string, snowflake.ID, discord.ApplicationRoleConnectionUpdate, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error)
	if len(_dat.UpdateCurrentUserApplicationRoleConnectionMocks) > 0 {
		_fn = _dat.UpdateCurrentUserApplicationRoleConnectionMocks[0]
		if len(_dat.UpdateCurrentUserApplicationRoleConnectionMocks) > 1 {
			_dat.UpdateCurrentUserApplicationRoleConnectionMocks = _dat.UpdateCurrentUserApplicationRoleConnectionMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateCurrentUserApplicationRoleConnection }
	_dat.mutex.Unlock()
	return _fn(bearerToken, applicationID, connectionUpdate, opts...)
}

func (_recv *clientRest) _UpdateCurrentUserApplicationRoleConnection_Do(fn func(string, snowflake.ID, discord.ApplicationRoleConnectionUpdate, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error)) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUserApplicationRoleConnection: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateCurrentUserApplicationRoleConnectionMocks = []func(string, snowflake.ID, discord.ApplicationRoleConnectionUpdate, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error){}
	} else if len(_dat.UpdateCurrentUserApplicationRoleConnectionMocks) < 2 {
		_dat.UpdateCurrentUserApplicationRoleConnectionMocks = []func(string, snowflake.ID, discord.ApplicationRoleConnectionUpdate, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error){fn, fn}
	} else {
		_dat.UpdateCurrentUserApplicationRoleConnectionMocks = _dat.UpdateCurrentUserApplicationRoleConnectionMocks[:len(_dat.UpdateCurrentUserApplicationRoleConnectionMocks)-1]
		_dat.UpdateCurrentUserApplicationRoleConnectionMocks = append(_dat.UpdateCurrentUserApplicationRoleConnectionMocks, fn)
		_dat.UpdateCurrentUserApplicationRoleConnectionMocks = append(_dat.UpdateCurrentUserApplicationRoleConnectionMocks, fn)
	}
}

func (_recv *clientRest) _UpdateCurrentUserApplicationRoleConnection_Stub() {
	_recv._UpdateCurrentUserApplicationRoleConnection_Do(func(string, snowflake.ID, discord.ApplicationRoleConnectionUpdate, ...rest.RequestOpt) (r0 *discord.ApplicationRoleConnection, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateCurrentUserApplicationRoleConnection_Return(r0 *discord.ApplicationRoleConnection, r1 error) {
	_recv._UpdateCurrentUserApplicationRoleConnection_Do(func(string, snowflake.ID, discord.ApplicationRoleConnectionUpdate, ...rest.RequestOpt) (*discord.ApplicationRoleConnection, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateCurrentUserApplicationRoleConnection_Calls() []_clientRest_UpdateCurrentUserApplicationRoleConnection_Call {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUserApplicationRoleConnection: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateCurrentUserApplicationRoleConnectionCalls
}

func (_recv *clientRest) UpdateCurrentUserVoiceState(guildID snowflake.ID, currentUserVoiceStateUpdate discord.CurrentUserVoiceStateUpdate, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateCurrentUserVoiceStateCalls = append(_dat.UpdateCurrentUserVoiceStateCalls, _clientRest_UpdateCurrentUserVoiceState_Call{guildID, currentUserVoiceStateUpdate, opts})
	var _fn func(snowflake.ID, discord.CurrentUserVoiceStateUpdate, ...rest.RequestOpt) (error)
	if len(_dat.UpdateCurrentUserVoiceStateMocks) > 0 {
		_fn = _dat.UpdateCurrentUserVoiceStateMocks[0]
		if len(_dat.UpdateCurrentUserVoiceStateMocks) > 1 {
			_dat.UpdateCurrentUserVoiceStateMocks = _dat.UpdateCurrentUserVoiceStateMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateCurrentUserVoiceState }
	_dat.mutex.Unlock()
	return _fn(guildID, currentUserVoiceStateUpdate, opts...)
}

func (_recv *clientRest) _UpdateCurrentUserVoiceState_Do(fn func(snowflake.ID, discord.CurrentUserVoiceStateUpdate, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateCurrentUserVoiceStateMocks = []func(snowflake.ID, discord.CurrentUserVoiceStateUpdate, ...rest.RequestOpt) (error){}
	} else if len(_dat.UpdateCurrentUserVoiceStateMocks) < 2 {
		_dat.UpdateCurrentUserVoiceStateMocks = []func(snowflake.ID, discord.CurrentUserVoiceStateUpdate, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.UpdateCurrentUserVoiceStateMocks = _dat.UpdateCurrentUserVoiceStateMocks[:len(_dat.UpdateCurrentUserVoiceStateMocks)-1]
		_dat.UpdateCurrentUserVoiceStateMocks = append(_dat.UpdateCurrentUserVoiceStateMocks, fn)
		_dat.UpdateCurrentUserVoiceStateMocks = append(_dat.UpdateCurrentUserVoiceStateMocks, fn)
	}
}

func (_recv *clientRest) _UpdateCurrentUserVoiceState_Stub() {
	_recv._UpdateCurrentUserVoiceState_Do(func(snowflake.ID, discord.CurrentUserVoiceStateUpdate, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _UpdateCurrentUserVoiceState_Return(r0 error) {
	_recv._UpdateCurrentUserVoiceState_Do(func(snowflake.ID, discord.CurrentUserVoiceStateUpdate, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _UpdateCurrentUserVoiceState_Calls() []_clientRest_UpdateCurrentUserVoiceState_Call {
	if _recv == nil {
		panic("clientRest.UpdateCurrentUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateCurrentUserVoiceStateCalls
}

func (_recv *clientRest) UpdateEmoji(guildID snowflake.ID, emojiID snowflake.ID, emojiUpdate discord.EmojiUpdate, opts ...rest.RequestOpt) (*discord.Emoji, error) {
	if _recv == nil {
		panic("clientRest.UpdateEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateEmojiCalls = append(_dat.UpdateEmojiCalls, _clientRest_UpdateEmoji_Call{guildID, emojiID, emojiUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error)
	if len(_dat.UpdateEmojiMocks) > 0 {
		_fn = _dat.UpdateEmojiMocks[0]
		if len(_dat.UpdateEmojiMocks) > 1 {
			_dat.UpdateEmojiMocks = _dat.UpdateEmojiMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateEmoji }
	_dat.mutex.Unlock()
	return _fn(guildID, emojiID, emojiUpdate, opts...)
}

func (_recv *clientRest) _UpdateEmoji_Do(fn func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error)) {
	if _recv == nil {
		panic("clientRest.UpdateEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateEmojiMocks = []func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error){}
	} else if len(_dat.UpdateEmojiMocks) < 2 {
		_dat.UpdateEmojiMocks = []func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error){fn, fn}
	} else {
		_dat.UpdateEmojiMocks = _dat.UpdateEmojiMocks[:len(_dat.UpdateEmojiMocks)-1]
		_dat.UpdateEmojiMocks = append(_dat.UpdateEmojiMocks, fn)
		_dat.UpdateEmojiMocks = append(_dat.UpdateEmojiMocks, fn)
	}
}

func (_recv *clientRest) _UpdateEmoji_Stub() {
	_recv._UpdateEmoji_Do(func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (r0 *discord.Emoji, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateEmoji_Return(r0 *discord.Emoji, r1 error) {
	_recv._UpdateEmoji_Do(func(snowflake.ID, snowflake.ID, discord.EmojiUpdate, ...rest.RequestOpt) (*discord.Emoji, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateEmoji_Calls() []_clientRest_UpdateEmoji_Call {
	if _recv == nil {
		panic("clientRest.UpdateEmoji: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateEmojiCalls
}

func (_recv *clientRest) UpdateFollowupMessage(applicationID snowflake.ID, interactionToken string, messageID snowflake.ID, messageUpdate discord.MessageUpdate, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.UpdateFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateFollowupMessageCalls = append(_dat.UpdateFollowupMessageCalls, _clientRest_UpdateFollowupMessage_Call{applicationID, interactionToken, messageID, messageUpdate, opts})
	var _fn func(snowflake.ID, string, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.UpdateFollowupMessageMocks) > 0 {
		_fn = _dat.UpdateFollowupMessageMocks[0]
		if len(_dat.UpdateFollowupMessageMocks) > 1 {
			_dat.UpdateFollowupMessageMocks = _dat.UpdateFollowupMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateFollowupMessage }
	_dat.mutex.Unlock()
	return _fn(applicationID, interactionToken, messageID, messageUpdate, opts...)
}

func (_recv *clientRest) _UpdateFollowupMessage_Do(fn func(snowflake.ID, string, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.UpdateFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateFollowupMessageMocks = []func(snowflake.ID, string, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.UpdateFollowupMessageMocks) < 2 {
		_dat.UpdateFollowupMessageMocks = []func(snowflake.ID, string, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.UpdateFollowupMessageMocks = _dat.UpdateFollowupMessageMocks[:len(_dat.UpdateFollowupMessageMocks)-1]
		_dat.UpdateFollowupMessageMocks = append(_dat.UpdateFollowupMessageMocks, fn)
		_dat.UpdateFollowupMessageMocks = append(_dat.UpdateFollowupMessageMocks, fn)
	}
}

func (_recv *clientRest) _UpdateFollowupMessage_Stub() {
	_recv._UpdateFollowupMessage_Do(func(snowflake.ID, string, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateFollowupMessage_Return(r0 *discord.Message, r1 error) {
	_recv._UpdateFollowupMessage_Do(func(snowflake.ID, string, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateFollowupMessage_Calls() []_clientRest_UpdateFollowupMessage_Call {
	if _recv == nil {
		panic("clientRest.UpdateFollowupMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateFollowupMessageCalls
}

func (_recv *clientRest) UpdateGlobalCommand(applicationID snowflake.ID, commandID snowflake.ID, commandUpdate discord.ApplicationCommandUpdate, opts ...rest.RequestOpt) (discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.UpdateGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGlobalCommandCalls = append(_dat.UpdateGlobalCommandCalls, _clientRest_UpdateGlobalCommand_Call{applicationID, commandID, commandUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error)
	if len(_dat.UpdateGlobalCommandMocks) > 0 {
		_fn = _dat.UpdateGlobalCommandMocks[0]
		if len(_dat.UpdateGlobalCommandMocks) > 1 {
			_dat.UpdateGlobalCommandMocks = _dat.UpdateGlobalCommandMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGlobalCommand }
	_dat.mutex.Unlock()
	return _fn(applicationID, commandID, commandUpdate, opts...)
}

func (_recv *clientRest) _UpdateGlobalCommand_Do(fn func(snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGlobalCommandMocks = []func(snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error){}
	} else if len(_dat.UpdateGlobalCommandMocks) < 2 {
		_dat.UpdateGlobalCommandMocks = []func(snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.UpdateGlobalCommandMocks = _dat.UpdateGlobalCommandMocks[:len(_dat.UpdateGlobalCommandMocks)-1]
		_dat.UpdateGlobalCommandMocks = append(_dat.UpdateGlobalCommandMocks, fn)
		_dat.UpdateGlobalCommandMocks = append(_dat.UpdateGlobalCommandMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGlobalCommand_Stub() {
	_recv._UpdateGlobalCommand_Do(func(snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (r0 discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGlobalCommand_Return(r0 discord.ApplicationCommand, r1 error) {
	_recv._UpdateGlobalCommand_Do(func(snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGlobalCommand_Calls() []_clientRest_UpdateGlobalCommand_Call {
	if _recv == nil {
		panic("clientRest.UpdateGlobalCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGlobalCommandCalls
}

func (_recv *clientRest) UpdateGuild(guildID snowflake.ID, guildUpdate discord.GuildUpdate, opts ...rest.RequestOpt) (*discord.RestGuild, error) {
	if _recv == nil {
		panic("clientRest.UpdateGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGuildCalls = append(_dat.UpdateGuildCalls, _clientRest_UpdateGuild_Call{guildID, guildUpdate, opts})
	var _fn func(snowflake.ID, discord.GuildUpdate, ...rest.RequestOpt) (*discord.RestGuild, error)
	if len(_dat.UpdateGuildMocks) > 0 {
		_fn = _dat.UpdateGuildMocks[0]
		if len(_dat.UpdateGuildMocks) > 1 {
			_dat.UpdateGuildMocks = _dat.UpdateGuildMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGuild }
	_dat.mutex.Unlock()
	return _fn(guildID, guildUpdate, opts...)
}

func (_recv *clientRest) _UpdateGuild_Do(fn func(snowflake.ID, discord.GuildUpdate, ...rest.RequestOpt) (*discord.RestGuild, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGuildMocks = []func(snowflake.ID, discord.GuildUpdate, ...rest.RequestOpt) (*discord.RestGuild, error){}
	} else if len(_dat.UpdateGuildMocks) < 2 {
		_dat.UpdateGuildMocks = []func(snowflake.ID, discord.GuildUpdate, ...rest.RequestOpt) (*discord.RestGuild, error){fn, fn}
	} else {
		_dat.UpdateGuildMocks = _dat.UpdateGuildMocks[:len(_dat.UpdateGuildMocks)-1]
		_dat.UpdateGuildMocks = append(_dat.UpdateGuildMocks, fn)
		_dat.UpdateGuildMocks = append(_dat.UpdateGuildMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGuild_Stub() {
	_recv._UpdateGuild_Do(func(snowflake.ID, discord.GuildUpdate, ...rest.RequestOpt) (r0 *discord.RestGuild, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuild_Return(r0 *discord.RestGuild, r1 error) {
	_recv._UpdateGuild_Do(func(snowflake.ID, discord.GuildUpdate, ...rest.RequestOpt) (*discord.RestGuild, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuild_Calls() []_clientRest_UpdateGuild_Call {
	if _recv == nil {
		panic("clientRest.UpdateGuild: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGuildCalls
}

func (_recv *clientRest) UpdateGuildCommand(applicationID snowflake.ID, guildID snowflake.ID, commandID snowflake.ID, command discord.ApplicationCommandUpdate, opts ...rest.RequestOpt) (discord.ApplicationCommand, error) {
	if _recv == nil {
		panic("clientRest.UpdateGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGuildCommandCalls = append(_dat.UpdateGuildCommandCalls, _clientRest_UpdateGuildCommand_Call{applicationID, guildID, commandID, command, opts})
	var _fn func(snowflake.ID, snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error)
	if len(_dat.UpdateGuildCommandMocks) > 0 {
		_fn = _dat.UpdateGuildCommandMocks[0]
		if len(_dat.UpdateGuildCommandMocks) > 1 {
			_dat.UpdateGuildCommandMocks = _dat.UpdateGuildCommandMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGuildCommand }
	_dat.mutex.Unlock()
	return _fn(applicationID, guildID, commandID, command, opts...)
}

func (_recv *clientRest) _UpdateGuildCommand_Do(fn func(snowflake.ID, snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGuildCommandMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error){}
	} else if len(_dat.UpdateGuildCommandMocks) < 2 {
		_dat.UpdateGuildCommandMocks = []func(snowflake.ID, snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error){fn, fn}
	} else {
		_dat.UpdateGuildCommandMocks = _dat.UpdateGuildCommandMocks[:len(_dat.UpdateGuildCommandMocks)-1]
		_dat.UpdateGuildCommandMocks = append(_dat.UpdateGuildCommandMocks, fn)
		_dat.UpdateGuildCommandMocks = append(_dat.UpdateGuildCommandMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGuildCommand_Stub() {
	_recv._UpdateGuildCommand_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (r0 discord.ApplicationCommand, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildCommand_Return(r0 discord.ApplicationCommand, r1 error) {
	_recv._UpdateGuildCommand_Do(func(snowflake.ID, snowflake.ID, snowflake.ID, discord.ApplicationCommandUpdate, ...rest.RequestOpt) (discord.ApplicationCommand, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildCommand_Calls() []_clientRest_UpdateGuildCommand_Call {
	if _recv == nil {
		panic("clientRest.UpdateGuildCommand: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGuildCommandCalls
}

func (_recv *clientRest) UpdateGuildIncidentActions(guildID snowflake.ID, actionsUpdate discord.GuildIncidentActionsUpdate, opts ...rest.RequestOpt) (*discord.GuildIncidentsData, error) {
	if _recv == nil {
		panic("clientRest.UpdateGuildIncidentActions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGuildIncidentActionsCalls = append(_dat.UpdateGuildIncidentActionsCalls, _clientRest_UpdateGuildIncidentActions_Call{guildID, actionsUpdate, opts})
	var _fn func(snowflake.ID, discord.GuildIncidentActionsUpdate, ...rest.RequestOpt) (*discord.GuildIncidentsData, error)
	if len(_dat.UpdateGuildIncidentActionsMocks) > 0 {
		_fn = _dat.UpdateGuildIncidentActionsMocks[0]
		if len(_dat.UpdateGuildIncidentActionsMocks) > 1 {
			_dat.UpdateGuildIncidentActionsMocks = _dat.UpdateGuildIncidentActionsMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGuildIncidentActions }
	_dat.mutex.Unlock()
	return _fn(guildID, actionsUpdate, opts...)
}

func (_recv *clientRest) _UpdateGuildIncidentActions_Do(fn func(snowflake.ID, discord.GuildIncidentActionsUpdate, ...rest.RequestOpt) (*discord.GuildIncidentsData, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGuildIncidentActions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGuildIncidentActionsMocks = []func(snowflake.ID, discord.GuildIncidentActionsUpdate, ...rest.RequestOpt) (*discord.GuildIncidentsData, error){}
	} else if len(_dat.UpdateGuildIncidentActionsMocks) < 2 {
		_dat.UpdateGuildIncidentActionsMocks = []func(snowflake.ID, discord.GuildIncidentActionsUpdate, ...rest.RequestOpt) (*discord.GuildIncidentsData, error){fn, fn}
	} else {
		_dat.UpdateGuildIncidentActionsMocks = _dat.UpdateGuildIncidentActionsMocks[:len(_dat.UpdateGuildIncidentActionsMocks)-1]
		_dat.UpdateGuildIncidentActionsMocks = append(_dat.UpdateGuildIncidentActionsMocks, fn)
		_dat.UpdateGuildIncidentActionsMocks = append(_dat.UpdateGuildIncidentActionsMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGuildIncidentActions_Stub() {
	_recv._UpdateGuildIncidentActions_Do(func(snowflake.ID, discord.GuildIncidentActionsUpdate, ...rest.RequestOpt) (r0 *discord.GuildIncidentsData, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildIncidentActions_Return(r0 *discord.GuildIncidentsData, r1 error) {
	_recv._UpdateGuildIncidentActions_Do(func(snowflake.ID, discord.GuildIncidentActionsUpdate, ...rest.RequestOpt) (*discord.GuildIncidentsData, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildIncidentActions_Calls() []_clientRest_UpdateGuildIncidentActions_Call {
	if _recv == nil {
		panic("clientRest.UpdateGuildIncidentActions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGuildIncidentActionsCalls
}

func (_recv *clientRest) UpdateGuildOnboarding(guildID snowflake.ID, onboardingUpdate discord.GuildOnboardingUpdate, opts ...rest.RequestOpt) (*discord.GuildOnboarding, error) {
	if _recv == nil {
		panic("clientRest.UpdateGuildOnboarding: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGuildOnboardingCalls = append(_dat.UpdateGuildOnboardingCalls, _clientRest_UpdateGuildOnboarding_Call{guildID, onboardingUpdate, opts})
	var _fn func(snowflake.ID, discord.GuildOnboardingUpdate, ...rest.RequestOpt) (*discord.GuildOnboarding, error)
	if len(_dat.UpdateGuildOnboardingMocks) > 0 {
		_fn = _dat.UpdateGuildOnboardingMocks[0]
		if len(_dat.UpdateGuildOnboardingMocks) > 1 {
			_dat.UpdateGuildOnboardingMocks = _dat.UpdateGuildOnboardingMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGuildOnboarding }
	_dat.mutex.Unlock()
	return _fn(guildID, onboardingUpdate, opts...)
}

func (_recv *clientRest) _UpdateGuildOnboarding_Do(fn func(snowflake.ID, discord.GuildOnboardingUpdate, ...rest.RequestOpt) (*discord.GuildOnboarding, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGuildOnboarding: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGuildOnboardingMocks = []func(snowflake.ID, discord.GuildOnboardingUpdate, ...rest.RequestOpt) (*discord.GuildOnboarding, error){}
	} else if len(_dat.UpdateGuildOnboardingMocks) < 2 {
		_dat.UpdateGuildOnboardingMocks = []func(snowflake.ID, discord.GuildOnboardingUpdate, ...rest.RequestOpt) (*discord.GuildOnboarding, error){fn, fn}
	} else {
		_dat.UpdateGuildOnboardingMocks = _dat.UpdateGuildOnboardingMocks[:len(_dat.UpdateGuildOnboardingMocks)-1]
		_dat.UpdateGuildOnboardingMocks = append(_dat.UpdateGuildOnboardingMocks, fn)
		_dat.UpdateGuildOnboardingMocks = append(_dat.UpdateGuildOnboardingMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGuildOnboarding_Stub() {
	_recv._UpdateGuildOnboarding_Do(func(snowflake.ID, discord.GuildOnboardingUpdate, ...rest.RequestOpt) (r0 *discord.GuildOnboarding, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildOnboarding_Return(r0 *discord.GuildOnboarding, r1 error) {
	_recv._UpdateGuildOnboarding_Do(func(snowflake.ID, discord.GuildOnboardingUpdate, ...rest.RequestOpt) (*discord.GuildOnboarding, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildOnboarding_Calls() []_clientRest_UpdateGuildOnboarding_Call {
	if _recv == nil {
		panic("clientRest.UpdateGuildOnboarding: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGuildOnboardingCalls
}

func (_recv *clientRest) UpdateGuildScheduledEvent(guildID snowflake.ID, guildScheduledEventID snowflake.ID, guildScheduledEventUpdate discord.GuildScheduledEventUpdate, opts ...rest.RequestOpt) (*discord.GuildScheduledEvent, error) {
	if _recv == nil {
		panic("clientRest.UpdateGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGuildScheduledEventCalls = append(_dat.UpdateGuildScheduledEventCalls, _clientRest_UpdateGuildScheduledEvent_Call{guildID, guildScheduledEventID, guildScheduledEventUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.GuildScheduledEventUpdate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)
	if len(_dat.UpdateGuildScheduledEventMocks) > 0 {
		_fn = _dat.UpdateGuildScheduledEventMocks[0]
		if len(_dat.UpdateGuildScheduledEventMocks) > 1 {
			_dat.UpdateGuildScheduledEventMocks = _dat.UpdateGuildScheduledEventMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGuildScheduledEvent }
	_dat.mutex.Unlock()
	return _fn(guildID, guildScheduledEventID, guildScheduledEventUpdate, opts...)
}

func (_recv *clientRest) _UpdateGuildScheduledEvent_Do(fn func(snowflake.ID, snowflake.ID, discord.GuildScheduledEventUpdate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGuildScheduledEventMocks = []func(snowflake.ID, snowflake.ID, discord.GuildScheduledEventUpdate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error){}
	} else if len(_dat.UpdateGuildScheduledEventMocks) < 2 {
		_dat.UpdateGuildScheduledEventMocks = []func(snowflake.ID, snowflake.ID, discord.GuildScheduledEventUpdate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error){fn, fn}
	} else {
		_dat.UpdateGuildScheduledEventMocks = _dat.UpdateGuildScheduledEventMocks[:len(_dat.UpdateGuildScheduledEventMocks)-1]
		_dat.UpdateGuildScheduledEventMocks = append(_dat.UpdateGuildScheduledEventMocks, fn)
		_dat.UpdateGuildScheduledEventMocks = append(_dat.UpdateGuildScheduledEventMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGuildScheduledEvent_Stub() {
	_recv._UpdateGuildScheduledEvent_Do(func(snowflake.ID, snowflake.ID, discord.GuildScheduledEventUpdate, ...rest.RequestOpt) (r0 *discord.GuildScheduledEvent, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildScheduledEvent_Return(r0 *discord.GuildScheduledEvent, r1 error) {
	_recv._UpdateGuildScheduledEvent_Do(func(snowflake.ID, snowflake.ID, discord.GuildScheduledEventUpdate, ...rest.RequestOpt) (*discord.GuildScheduledEvent, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildScheduledEvent_Calls() []_clientRest_UpdateGuildScheduledEvent_Call {
	if _recv == nil {
		panic("clientRest.UpdateGuildScheduledEvent: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGuildScheduledEventCalls
}

func (_recv *clientRest) UpdateGuildSoundboardSound(guildID snowflake.ID, soundID snowflake.ID, soundUpdate discord.SoundboardSoundUpdate, opts ...rest.RequestOpt) (*discord.SoundboardSound, error) {
	if _recv == nil {
		panic("clientRest.UpdateGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGuildSoundboardSoundCalls = append(_dat.UpdateGuildSoundboardSoundCalls, _clientRest_UpdateGuildSoundboardSound_Call{guildID, soundID, soundUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.SoundboardSoundUpdate, ...rest.RequestOpt) (*discord.SoundboardSound, error)
	if len(_dat.UpdateGuildSoundboardSoundMocks) > 0 {
		_fn = _dat.UpdateGuildSoundboardSoundMocks[0]
		if len(_dat.UpdateGuildSoundboardSoundMocks) > 1 {
			_dat.UpdateGuildSoundboardSoundMocks = _dat.UpdateGuildSoundboardSoundMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGuildSoundboardSound }
	_dat.mutex.Unlock()
	return _fn(guildID, soundID, soundUpdate, opts...)
}

func (_recv *clientRest) _UpdateGuildSoundboardSound_Do(fn func(snowflake.ID, snowflake.ID, discord.SoundboardSoundUpdate, ...rest.RequestOpt) (*discord.SoundboardSound, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGuildSoundboardSoundMocks = []func(snowflake.ID, snowflake.ID, discord.SoundboardSoundUpdate, ...rest.RequestOpt) (*discord.SoundboardSound, error){}
	} else if len(_dat.UpdateGuildSoundboardSoundMocks) < 2 {
		_dat.UpdateGuildSoundboardSoundMocks = []func(snowflake.ID, snowflake.ID, discord.SoundboardSoundUpdate, ...rest.RequestOpt) (*discord.SoundboardSound, error){fn, fn}
	} else {
		_dat.UpdateGuildSoundboardSoundMocks = _dat.UpdateGuildSoundboardSoundMocks[:len(_dat.UpdateGuildSoundboardSoundMocks)-1]
		_dat.UpdateGuildSoundboardSoundMocks = append(_dat.UpdateGuildSoundboardSoundMocks, fn)
		_dat.UpdateGuildSoundboardSoundMocks = append(_dat.UpdateGuildSoundboardSoundMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGuildSoundboardSound_Stub() {
	_recv._UpdateGuildSoundboardSound_Do(func(snowflake.ID, snowflake.ID, discord.SoundboardSoundUpdate, ...rest.RequestOpt) (r0 *discord.SoundboardSound, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildSoundboardSound_Return(r0 *discord.SoundboardSound, r1 error) {
	_recv._UpdateGuildSoundboardSound_Do(func(snowflake.ID, snowflake.ID, discord.SoundboardSoundUpdate, ...rest.RequestOpt) (*discord.SoundboardSound, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildSoundboardSound_Calls() []_clientRest_UpdateGuildSoundboardSound_Call {
	if _recv == nil {
		panic("clientRest.UpdateGuildSoundboardSound: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGuildSoundboardSoundCalls
}

func (_recv *clientRest) UpdateGuildTemplate(guildID snowflake.ID, templateCode string, guildTemplateUpdate discord.GuildTemplateUpdate, opts ...rest.RequestOpt) (*discord.GuildTemplate, error) {
	if _recv == nil {
		panic("clientRest.UpdateGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGuildTemplateCalls = append(_dat.UpdateGuildTemplateCalls, _clientRest_UpdateGuildTemplate_Call{guildID, templateCode, guildTemplateUpdate, opts})
	var _fn func(snowflake.ID, string, discord.GuildTemplateUpdate, ...rest.RequestOpt) (*discord.GuildTemplate, error)
	if len(_dat.UpdateGuildTemplateMocks) > 0 {
		_fn = _dat.UpdateGuildTemplateMocks[0]
		if len(_dat.UpdateGuildTemplateMocks) > 1 {
			_dat.UpdateGuildTemplateMocks = _dat.UpdateGuildTemplateMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGuildTemplate }
	_dat.mutex.Unlock()
	return _fn(guildID, templateCode, guildTemplateUpdate, opts...)
}

func (_recv *clientRest) _UpdateGuildTemplate_Do(fn func(snowflake.ID, string, discord.GuildTemplateUpdate, ...rest.RequestOpt) (*discord.GuildTemplate, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGuildTemplateMocks = []func(snowflake.ID, string, discord.GuildTemplateUpdate, ...rest.RequestOpt) (*discord.GuildTemplate, error){}
	} else if len(_dat.UpdateGuildTemplateMocks) < 2 {
		_dat.UpdateGuildTemplateMocks = []func(snowflake.ID, string, discord.GuildTemplateUpdate, ...rest.RequestOpt) (*discord.GuildTemplate, error){fn, fn}
	} else {
		_dat.UpdateGuildTemplateMocks = _dat.UpdateGuildTemplateMocks[:len(_dat.UpdateGuildTemplateMocks)-1]
		_dat.UpdateGuildTemplateMocks = append(_dat.UpdateGuildTemplateMocks, fn)
		_dat.UpdateGuildTemplateMocks = append(_dat.UpdateGuildTemplateMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGuildTemplate_Stub() {
	_recv._UpdateGuildTemplate_Do(func(snowflake.ID, string, discord.GuildTemplateUpdate, ...rest.RequestOpt) (r0 *discord.GuildTemplate, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildTemplate_Return(r0 *discord.GuildTemplate, r1 error) {
	_recv._UpdateGuildTemplate_Do(func(snowflake.ID, string, discord.GuildTemplateUpdate, ...rest.RequestOpt) (*discord.GuildTemplate, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildTemplate_Calls() []_clientRest_UpdateGuildTemplate_Call {
	if _recv == nil {
		panic("clientRest.UpdateGuildTemplate: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGuildTemplateCalls
}

func (_recv *clientRest) UpdateGuildWelcomeScreen(guildID snowflake.ID, screenUpdate discord.GuildWelcomeScreenUpdate, opts ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error) {
	if _recv == nil {
		panic("clientRest.UpdateGuildWelcomeScreen: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateGuildWelcomeScreenCalls = append(_dat.UpdateGuildWelcomeScreenCalls, _clientRest_UpdateGuildWelcomeScreen_Call{guildID, screenUpdate, opts})
	var _fn func(snowflake.ID, discord.GuildWelcomeScreenUpdate, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error)
	if len(_dat.UpdateGuildWelcomeScreenMocks) > 0 {
		_fn = _dat.UpdateGuildWelcomeScreenMocks[0]
		if len(_dat.UpdateGuildWelcomeScreenMocks) > 1 {
			_dat.UpdateGuildWelcomeScreenMocks = _dat.UpdateGuildWelcomeScreenMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateGuildWelcomeScreen }
	_dat.mutex.Unlock()
	return _fn(guildID, screenUpdate, opts...)
}

func (_recv *clientRest) _UpdateGuildWelcomeScreen_Do(fn func(snowflake.ID, discord.GuildWelcomeScreenUpdate, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error)) {
	if _recv == nil {
		panic("clientRest.UpdateGuildWelcomeScreen: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateGuildWelcomeScreenMocks = []func(snowflake.ID, discord.GuildWelcomeScreenUpdate, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error){}
	} else if len(_dat.UpdateGuildWelcomeScreenMocks) < 2 {
		_dat.UpdateGuildWelcomeScreenMocks = []func(snowflake.ID, discord.GuildWelcomeScreenUpdate, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error){fn, fn}
	} else {
		_dat.UpdateGuildWelcomeScreenMocks = _dat.UpdateGuildWelcomeScreenMocks[:len(_dat.UpdateGuildWelcomeScreenMocks)-1]
		_dat.UpdateGuildWelcomeScreenMocks = append(_dat.UpdateGuildWelcomeScreenMocks, fn)
		_dat.UpdateGuildWelcomeScreenMocks = append(_dat.UpdateGuildWelcomeScreenMocks, fn)
	}
}

func (_recv *clientRest) _UpdateGuildWelcomeScreen_Stub() {
	_recv._UpdateGuildWelcomeScreen_Do(func(snowflake.ID, discord.GuildWelcomeScreenUpdate, ...rest.RequestOpt) (r0 *discord.GuildWelcomeScreen, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildWelcomeScreen_Return(r0 *discord.GuildWelcomeScreen, r1 error) {
	_recv._UpdateGuildWelcomeScreen_Do(func(snowflake.ID, discord.GuildWelcomeScreenUpdate, ...rest.RequestOpt) (*discord.GuildWelcomeScreen, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateGuildWelcomeScreen_Calls() []_clientRest_UpdateGuildWelcomeScreen_Call {
	if _recv == nil {
		panic("clientRest.UpdateGuildWelcomeScreen: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateGuildWelcomeScreenCalls
}

func (_recv *clientRest) UpdateInteractionResponse(applicationID snowflake.ID, interactionToken string, messageUpdate discord.MessageUpdate, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.UpdateInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateInteractionResponseCalls = append(_dat.UpdateInteractionResponseCalls, _clientRest_UpdateInteractionResponse_Call{applicationID, interactionToken, messageUpdate, opts})
	var _fn func(snowflake.ID, string, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.UpdateInteractionResponseMocks) > 0 {
		_fn = _dat.UpdateInteractionResponseMocks[0]
		if len(_dat.UpdateInteractionResponseMocks) > 1 {
			_dat.UpdateInteractionResponseMocks = _dat.UpdateInteractionResponseMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateInteractionResponse }
	_dat.mutex.Unlock()
	return _fn(applicationID, interactionToken, messageUpdate, opts...)
}

func (_recv *clientRest) _UpdateInteractionResponse_Do(fn func(snowflake.ID, string, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.UpdateInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateInteractionResponseMocks = []func(snowflake.ID, string, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.UpdateInteractionResponseMocks) < 2 {
		_dat.UpdateInteractionResponseMocks = []func(snowflake.ID, string, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.UpdateInteractionResponseMocks = _dat.UpdateInteractionResponseMocks[:len(_dat.UpdateInteractionResponseMocks)-1]
		_dat.UpdateInteractionResponseMocks = append(_dat.UpdateInteractionResponseMocks, fn)
		_dat.UpdateInteractionResponseMocks = append(_dat.UpdateInteractionResponseMocks, fn)
	}
}

func (_recv *clientRest) _UpdateInteractionResponse_Stub() {
	_recv._UpdateInteractionResponse_Do(func(snowflake.ID, string, discord.MessageUpdate, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateInteractionResponse_Return(r0 *discord.Message, r1 error) {
	_recv._UpdateInteractionResponse_Do(func(snowflake.ID, string, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateInteractionResponse_Calls() []_clientRest_UpdateInteractionResponse_Call {
	if _recv == nil {
		panic("clientRest.UpdateInteractionResponse: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateInteractionResponseCalls
}

func (_recv *clientRest) UpdateMember(guildID snowflake.ID, userID snowflake.ID, memberUpdate discord.MemberUpdate, opts ...rest.RequestOpt) (*discord.Member, error) {
	if _recv == nil {
		panic("clientRest.UpdateMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateMemberCalls = append(_dat.UpdateMemberCalls, _clientRest_UpdateMember_Call{guildID, userID, memberUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.MemberUpdate, ...rest.RequestOpt) (*discord.Member, error)
	if len(_dat.UpdateMemberMocks) > 0 {
		_fn = _dat.UpdateMemberMocks[0]
		if len(_dat.UpdateMemberMocks) > 1 {
			_dat.UpdateMemberMocks = _dat.UpdateMemberMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateMember }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, memberUpdate, opts...)
}

func (_recv *clientRest) _UpdateMember_Do(fn func(snowflake.ID, snowflake.ID, discord.MemberUpdate, ...rest.RequestOpt) (*discord.Member, error)) {
	if _recv == nil {
		panic("clientRest.UpdateMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateMemberMocks = []func(snowflake.ID, snowflake.ID, discord.MemberUpdate, ...rest.RequestOpt) (*discord.Member, error){}
	} else if len(_dat.UpdateMemberMocks) < 2 {
		_dat.UpdateMemberMocks = []func(snowflake.ID, snowflake.ID, discord.MemberUpdate, ...rest.RequestOpt) (*discord.Member, error){fn, fn}
	} else {
		_dat.UpdateMemberMocks = _dat.UpdateMemberMocks[:len(_dat.UpdateMemberMocks)-1]
		_dat.UpdateMemberMocks = append(_dat.UpdateMemberMocks, fn)
		_dat.UpdateMemberMocks = append(_dat.UpdateMemberMocks, fn)
	}
}

func (_recv *clientRest) _UpdateMember_Stub() {
	_recv._UpdateMember_Do(func(snowflake.ID, snowflake.ID, discord.MemberUpdate, ...rest.RequestOpt) (r0 *discord.Member, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateMember_Return(r0 *discord.Member, r1 error) {
	_recv._UpdateMember_Do(func(snowflake.ID, snowflake.ID, discord.MemberUpdate, ...rest.RequestOpt) (*discord.Member, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateMember_Calls() []_clientRest_UpdateMember_Call {
	if _recv == nil {
		panic("clientRest.UpdateMember: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateMemberCalls
}

func (_recv *clientRest) UpdateMessage(channelID snowflake.ID, messageID snowflake.ID, messageUpdate discord.MessageUpdate, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.UpdateMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateMessageCalls = append(_dat.UpdateMessageCalls, _clientRest_UpdateMessage_Call{channelID, messageID, messageUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.UpdateMessageMocks) > 0 {
		_fn = _dat.UpdateMessageMocks[0]
		if len(_dat.UpdateMessageMocks) > 1 {
			_dat.UpdateMessageMocks = _dat.UpdateMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateMessage }
	_dat.mutex.Unlock()
	return _fn(channelID, messageID, messageUpdate, opts...)
}

func (_recv *clientRest) _UpdateMessage_Do(fn func(snowflake.ID, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.UpdateMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateMessageMocks = []func(snowflake.ID, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.UpdateMessageMocks) < 2 {
		_dat.UpdateMessageMocks = []func(snowflake.ID, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.UpdateMessageMocks = _dat.UpdateMessageMocks[:len(_dat.UpdateMessageMocks)-1]
		_dat.UpdateMessageMocks = append(_dat.UpdateMessageMocks, fn)
		_dat.UpdateMessageMocks = append(_dat.UpdateMessageMocks, fn)
	}
}

func (_recv *clientRest) _UpdateMessage_Stub() {
	_recv._UpdateMessage_Do(func(snowflake.ID, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateMessage_Return(r0 *discord.Message, r1 error) {
	_recv._UpdateMessage_Do(func(snowflake.ID, snowflake.ID, discord.MessageUpdate, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateMessage_Calls() []_clientRest_UpdateMessage_Call {
	if _recv == nil {
		panic("clientRest.UpdateMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateMessageCalls
}

func (_recv *clientRest) UpdatePermissionOverwrite(channelID snowflake.ID, overwriteID snowflake.ID, permissionOverwrite discord.PermissionOverwriteUpdate, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.UpdatePermissionOverwrite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdatePermissionOverwriteCalls = append(_dat.UpdatePermissionOverwriteCalls, _clientRest_UpdatePermissionOverwrite_Call{channelID, overwriteID, permissionOverwrite, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.PermissionOverwriteUpdate, ...rest.RequestOpt) (error)
	if len(_dat.UpdatePermissionOverwriteMocks) > 0 {
		_fn = _dat.UpdatePermissionOverwriteMocks[0]
		if len(_dat.UpdatePermissionOverwriteMocks) > 1 {
			_dat.UpdatePermissionOverwriteMocks = _dat.UpdatePermissionOverwriteMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdatePermissionOverwrite }
	_dat.mutex.Unlock()
	return _fn(channelID, overwriteID, permissionOverwrite, opts...)
}

func (_recv *clientRest) _UpdatePermissionOverwrite_Do(fn func(snowflake.ID, snowflake.ID, discord.PermissionOverwriteUpdate, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.UpdatePermissionOverwrite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdatePermissionOverwriteMocks = []func(snowflake.ID, snowflake.ID, discord.PermissionOverwriteUpdate, ...rest.RequestOpt) (error){}
	} else if len(_dat.UpdatePermissionOverwriteMocks) < 2 {
		_dat.UpdatePermissionOverwriteMocks = []func(snowflake.ID, snowflake.ID, discord.PermissionOverwriteUpdate, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.UpdatePermissionOverwriteMocks = _dat.UpdatePermissionOverwriteMocks[:len(_dat.UpdatePermissionOverwriteMocks)-1]
		_dat.UpdatePermissionOverwriteMocks = append(_dat.UpdatePermissionOverwriteMocks, fn)
		_dat.UpdatePermissionOverwriteMocks = append(_dat.UpdatePermissionOverwriteMocks, fn)
	}
}

func (_recv *clientRest) _UpdatePermissionOverwrite_Stub() {
	_recv._UpdatePermissionOverwrite_Do(func(snowflake.ID, snowflake.ID, discord.PermissionOverwriteUpdate, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _UpdatePermissionOverwrite_Return(r0 error) {
	_recv._UpdatePermissionOverwrite_Do(func(snowflake.ID, snowflake.ID, discord.PermissionOverwriteUpdate, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _UpdatePermissionOverwrite_Calls() []_clientRest_UpdatePermissionOverwrite_Call {
	if _recv == nil {
		panic("clientRest.UpdatePermissionOverwrite: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdatePermissionOverwriteCalls
}

func (_recv *clientRest) UpdateRole(guildID snowflake.ID, roleID snowflake.ID, roleUpdate discord.RoleUpdate, opts ...rest.RequestOpt) (*discord.Role, error) {
	if _recv == nil {
		panic("clientRest.UpdateRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateRoleCalls = append(_dat.UpdateRoleCalls, _clientRest_UpdateRole_Call{guildID, roleID, roleUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.RoleUpdate, ...rest.RequestOpt) (*discord.Role, error)
	if len(_dat.UpdateRoleMocks) > 0 {
		_fn = _dat.UpdateRoleMocks[0]
		if len(_dat.UpdateRoleMocks) > 1 {
			_dat.UpdateRoleMocks = _dat.UpdateRoleMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateRole }
	_dat.mutex.Unlock()
	return _fn(guildID, roleID, roleUpdate, opts...)
}

func (_recv *clientRest) _UpdateRole_Do(fn func(snowflake.ID, snowflake.ID, discord.RoleUpdate, ...rest.RequestOpt) (*discord.Role, error)) {
	if _recv == nil {
		panic("clientRest.UpdateRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateRoleMocks = []func(snowflake.ID, snowflake.ID, discord.RoleUpdate, ...rest.RequestOpt) (*discord.Role, error){}
	} else if len(_dat.UpdateRoleMocks) < 2 {
		_dat.UpdateRoleMocks = []func(snowflake.ID, snowflake.ID, discord.RoleUpdate, ...rest.RequestOpt) (*discord.Role, error){fn, fn}
	} else {
		_dat.UpdateRoleMocks = _dat.UpdateRoleMocks[:len(_dat.UpdateRoleMocks)-1]
		_dat.UpdateRoleMocks = append(_dat.UpdateRoleMocks, fn)
		_dat.UpdateRoleMocks = append(_dat.UpdateRoleMocks, fn)
	}
}

func (_recv *clientRest) _UpdateRole_Stub() {
	_recv._UpdateRole_Do(func(snowflake.ID, snowflake.ID, discord.RoleUpdate, ...rest.RequestOpt) (r0 *discord.Role, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateRole_Return(r0 *discord.Role, r1 error) {
	_recv._UpdateRole_Do(func(snowflake.ID, snowflake.ID, discord.RoleUpdate, ...rest.RequestOpt) (*discord.Role, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateRole_Calls() []_clientRest_UpdateRole_Call {
	if _recv == nil {
		panic("clientRest.UpdateRole: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateRoleCalls
}

func (_recv *clientRest) UpdateRolePositions(guildID snowflake.ID, rolePositionUpdates []discord.RolePositionUpdate, opts ...rest.RequestOpt) ([]discord.Role, error) {
	if _recv == nil {
		panic("clientRest.UpdateRolePositions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateRolePositionsCalls = append(_dat.UpdateRolePositionsCalls, _clientRest_UpdateRolePositions_Call{guildID, rolePositionUpdates, opts})
	var _fn func(snowflake.ID, []discord.RolePositionUpdate, ...rest.RequestOpt) ([]discord.Role, error)
	if len(_dat.UpdateRolePositionsMocks) > 0 {
		_fn = _dat.UpdateRolePositionsMocks[0]
		if len(_dat.UpdateRolePositionsMocks) > 1 {
			_dat.UpdateRolePositionsMocks = _dat.UpdateRolePositionsMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateRolePositions }
	_dat.mutex.Unlock()
	return _fn(guildID, rolePositionUpdates, opts...)
}

func (_recv *clientRest) _UpdateRolePositions_Do(fn func(snowflake.ID, []discord.RolePositionUpdate, ...rest.RequestOpt) ([]discord.Role, error)) {
	if _recv == nil {
		panic("clientRest.UpdateRolePositions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateRolePositionsMocks = []func(snowflake.ID, []discord.RolePositionUpdate, ...rest.RequestOpt) ([]discord.Role, error){}
	} else if len(_dat.UpdateRolePositionsMocks) < 2 {
		_dat.UpdateRolePositionsMocks = []func(snowflake.ID, []discord.RolePositionUpdate, ...rest.RequestOpt) ([]discord.Role, error){fn, fn}
	} else {
		_dat.UpdateRolePositionsMocks = _dat.UpdateRolePositionsMocks[:len(_dat.UpdateRolePositionsMocks)-1]
		_dat.UpdateRolePositionsMocks = append(_dat.UpdateRolePositionsMocks, fn)
		_dat.UpdateRolePositionsMocks = append(_dat.UpdateRolePositionsMocks, fn)
	}
}

func (_recv *clientRest) _UpdateRolePositions_Stub() {
	_recv._UpdateRolePositions_Do(func(snowflake.ID, []discord.RolePositionUpdate, ...rest.RequestOpt) (r0 []discord.Role, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateRolePositions_Return(r0 []discord.Role, r1 error) {
	_recv._UpdateRolePositions_Do(func(snowflake.ID, []discord.RolePositionUpdate, ...rest.RequestOpt) ([]discord.Role, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateRolePositions_Calls() []_clientRest_UpdateRolePositions_Call {
	if _recv == nil {
		panic("clientRest.UpdateRolePositions: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateRolePositionsCalls
}

func (_recv *clientRest) UpdateStageInstance(channelID snowflake.ID, stageInstanceUpdate discord.StageInstanceUpdate, opts ...rest.RequestOpt) (*discord.StageInstance, error) {
	if _recv == nil {
		panic("clientRest.UpdateStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateStageInstanceCalls = append(_dat.UpdateStageInstanceCalls, _clientRest_UpdateStageInstance_Call{channelID, stageInstanceUpdate, opts})
	var _fn func(snowflake.ID, discord.StageInstanceUpdate, ...rest.RequestOpt) (*discord.StageInstance, error)
	if len(_dat.UpdateStageInstanceMocks) > 0 {
		_fn = _dat.UpdateStageInstanceMocks[0]
		if len(_dat.UpdateStageInstanceMocks) > 1 {
			_dat.UpdateStageInstanceMocks = _dat.UpdateStageInstanceMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateStageInstance }
	_dat.mutex.Unlock()
	return _fn(channelID, stageInstanceUpdate, opts...)
}

func (_recv *clientRest) _UpdateStageInstance_Do(fn func(snowflake.ID, discord.StageInstanceUpdate, ...rest.RequestOpt) (*discord.StageInstance, error)) {
	if _recv == nil {
		panic("clientRest.UpdateStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateStageInstanceMocks = []func(snowflake.ID, discord.StageInstanceUpdate, ...rest.RequestOpt) (*discord.StageInstance, error){}
	} else if len(_dat.UpdateStageInstanceMocks) < 2 {
		_dat.UpdateStageInstanceMocks = []func(snowflake.ID, discord.StageInstanceUpdate, ...rest.RequestOpt) (*discord.StageInstance, error){fn, fn}
	} else {
		_dat.UpdateStageInstanceMocks = _dat.UpdateStageInstanceMocks[:len(_dat.UpdateStageInstanceMocks)-1]
		_dat.UpdateStageInstanceMocks = append(_dat.UpdateStageInstanceMocks, fn)
		_dat.UpdateStageInstanceMocks = append(_dat.UpdateStageInstanceMocks, fn)
	}
}

func (_recv *clientRest) _UpdateStageInstance_Stub() {
	_recv._UpdateStageInstance_Do(func(snowflake.ID, discord.StageInstanceUpdate, ...rest.RequestOpt) (r0 *discord.StageInstance, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateStageInstance_Return(r0 *discord.StageInstance, r1 error) {
	_recv._UpdateStageInstance_Do(func(snowflake.ID, discord.StageInstanceUpdate, ...rest.RequestOpt) (*discord.StageInstance, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateStageInstance_Calls() []_clientRest_UpdateStageInstance_Call {
	if _recv == nil {
		panic("clientRest.UpdateStageInstance: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateStageInstanceCalls
}

func (_recv *clientRest) UpdateSticker(guildID snowflake.ID, stickerID snowflake.ID, stickerUpdate discord.StickerUpdate, opts ...rest.RequestOpt) (*discord.Sticker, error) {
	if _recv == nil {
		panic("clientRest.UpdateSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateStickerCalls = append(_dat.UpdateStickerCalls, _clientRest_UpdateSticker_Call{guildID, stickerID, stickerUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.StickerUpdate, ...rest.RequestOpt) (*discord.Sticker, error)
	if len(_dat.UpdateStickerMocks) > 0 {
		_fn = _dat.UpdateStickerMocks[0]
		if len(_dat.UpdateStickerMocks) > 1 {
			_dat.UpdateStickerMocks = _dat.UpdateStickerMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateSticker }
	_dat.mutex.Unlock()
	return _fn(guildID, stickerID, stickerUpdate, opts...)
}

func (_recv *clientRest) _UpdateSticker_Do(fn func(snowflake.ID, snowflake.ID, discord.StickerUpdate, ...rest.RequestOpt) (*discord.Sticker, error)) {
	if _recv == nil {
		panic("clientRest.UpdateSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateStickerMocks = []func(snowflake.ID, snowflake.ID, discord.StickerUpdate, ...rest.RequestOpt) (*discord.Sticker, error){}
	} else if len(_dat.UpdateStickerMocks) < 2 {
		_dat.UpdateStickerMocks = []func(snowflake.ID, snowflake.ID, discord.StickerUpdate, ...rest.RequestOpt) (*discord.Sticker, error){fn, fn}
	} else {
		_dat.UpdateStickerMocks = _dat.UpdateStickerMocks[:len(_dat.UpdateStickerMocks)-1]
		_dat.UpdateStickerMocks = append(_dat.UpdateStickerMocks, fn)
		_dat.UpdateStickerMocks = append(_dat.UpdateStickerMocks, fn)
	}
}

func (_recv *clientRest) _UpdateSticker_Stub() {
	_recv._UpdateSticker_Do(func(snowflake.ID, snowflake.ID, discord.StickerUpdate, ...rest.RequestOpt) (r0 *discord.Sticker, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateSticker_Return(r0 *discord.Sticker, r1 error) {
	_recv._UpdateSticker_Do(func(snowflake.ID, snowflake.ID, discord.StickerUpdate, ...rest.RequestOpt) (*discord.Sticker, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateSticker_Calls() []_clientRest_UpdateSticker_Call {
	if _recv == nil {
		panic("clientRest.UpdateSticker: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateStickerCalls
}

func (_recv *clientRest) UpdateUserVoiceState(guildID snowflake.ID, userID snowflake.ID, userVoiceStateUpdate discord.UserVoiceStateUpdate, opts ...rest.RequestOpt) error {
	if _recv == nil {
		panic("clientRest.UpdateUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateUserVoiceStateCalls = append(_dat.UpdateUserVoiceStateCalls, _clientRest_UpdateUserVoiceState_Call{guildID, userID, userVoiceStateUpdate, opts})
	var _fn func(snowflake.ID, snowflake.ID, discord.UserVoiceStateUpdate, ...rest.RequestOpt) (error)
	if len(_dat.UpdateUserVoiceStateMocks) > 0 {
		_fn = _dat.UpdateUserVoiceStateMocks[0]
		if len(_dat.UpdateUserVoiceStateMocks) > 1 {
			_dat.UpdateUserVoiceStateMocks = _dat.UpdateUserVoiceStateMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateUserVoiceState }
	_dat.mutex.Unlock()
	return _fn(guildID, userID, userVoiceStateUpdate, opts...)
}

func (_recv *clientRest) _UpdateUserVoiceState_Do(fn func(snowflake.ID, snowflake.ID, discord.UserVoiceStateUpdate, ...rest.RequestOpt) (error)) {
	if _recv == nil {
		panic("clientRest.UpdateUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateUserVoiceStateMocks = []func(snowflake.ID, snowflake.ID, discord.UserVoiceStateUpdate, ...rest.RequestOpt) (error){}
	} else if len(_dat.UpdateUserVoiceStateMocks) < 2 {
		_dat.UpdateUserVoiceStateMocks = []func(snowflake.ID, snowflake.ID, discord.UserVoiceStateUpdate, ...rest.RequestOpt) (error){fn, fn}
	} else {
		_dat.UpdateUserVoiceStateMocks = _dat.UpdateUserVoiceStateMocks[:len(_dat.UpdateUserVoiceStateMocks)-1]
		_dat.UpdateUserVoiceStateMocks = append(_dat.UpdateUserVoiceStateMocks, fn)
		_dat.UpdateUserVoiceStateMocks = append(_dat.UpdateUserVoiceStateMocks, fn)
	}
}

func (_recv *clientRest) _UpdateUserVoiceState_Stub() {
	_recv._UpdateUserVoiceState_Do(func(snowflake.ID, snowflake.ID, discord.UserVoiceStateUpdate, ...rest.RequestOpt) (r0 error) {
		return r0
	})
}

func (_recv *clientRest) _UpdateUserVoiceState_Return(r0 error) {
	_recv._UpdateUserVoiceState_Do(func(snowflake.ID, snowflake.ID, discord.UserVoiceStateUpdate, ...rest.RequestOpt) (error) {
		return r0
	})
}

func (_recv *clientRest) _UpdateUserVoiceState_Calls() []_clientRest_UpdateUserVoiceState_Call {
	if _recv == nil {
		panic("clientRest.UpdateUserVoiceState: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateUserVoiceStateCalls
}

func (_recv *clientRest) UpdateWebhook(webhookID snowflake.ID, webhookUpdate discord.WebhookUpdate, opts ...rest.RequestOpt) (discord.Webhook, error) {
	if _recv == nil {
		panic("clientRest.UpdateWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateWebhookCalls = append(_dat.UpdateWebhookCalls, _clientRest_UpdateWebhook_Call{webhookID, webhookUpdate, opts})
	var _fn func(snowflake.ID, discord.WebhookUpdate, ...rest.RequestOpt) (discord.Webhook, error)
	if len(_dat.UpdateWebhookMocks) > 0 {
		_fn = _dat.UpdateWebhookMocks[0]
		if len(_dat.UpdateWebhookMocks) > 1 {
			_dat.UpdateWebhookMocks = _dat.UpdateWebhookMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateWebhook }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookUpdate, opts...)
}

func (_recv *clientRest) _UpdateWebhook_Do(fn func(snowflake.ID, discord.WebhookUpdate, ...rest.RequestOpt) (discord.Webhook, error)) {
	if _recv == nil {
		panic("clientRest.UpdateWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateWebhookMocks = []func(snowflake.ID, discord.WebhookUpdate, ...rest.RequestOpt) (discord.Webhook, error){}
	} else if len(_dat.UpdateWebhookMocks) < 2 {
		_dat.UpdateWebhookMocks = []func(snowflake.ID, discord.WebhookUpdate, ...rest.RequestOpt) (discord.Webhook, error){fn, fn}
	} else {
		_dat.UpdateWebhookMocks = _dat.UpdateWebhookMocks[:len(_dat.UpdateWebhookMocks)-1]
		_dat.UpdateWebhookMocks = append(_dat.UpdateWebhookMocks, fn)
		_dat.UpdateWebhookMocks = append(_dat.UpdateWebhookMocks, fn)
	}
}

func (_recv *clientRest) _UpdateWebhook_Stub() {
	_recv._UpdateWebhook_Do(func(snowflake.ID, discord.WebhookUpdate, ...rest.RequestOpt) (r0 discord.Webhook, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateWebhook_Return(r0 discord.Webhook, r1 error) {
	_recv._UpdateWebhook_Do(func(snowflake.ID, discord.WebhookUpdate, ...rest.RequestOpt) (discord.Webhook, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateWebhook_Calls() []_clientRest_UpdateWebhook_Call {
	if _recv == nil {
		panic("clientRest.UpdateWebhook: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateWebhookCalls
}

func (_recv *clientRest) UpdateWebhookMessage(webhookID snowflake.ID, webhookToken string, messageID snowflake.ID, messageUpdate discord.WebhookMessageUpdate, threadID snowflake.ID, opts ...rest.RequestOpt) (*discord.Message, error) {
	if _recv == nil {
		panic("clientRest.UpdateWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateWebhookMessageCalls = append(_dat.UpdateWebhookMessageCalls, _clientRest_UpdateWebhookMessage_Call{webhookID, webhookToken, messageID, messageUpdate, threadID, opts})
	var _fn func(snowflake.ID, string, snowflake.ID, discord.WebhookMessageUpdate, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)
	if len(_dat.UpdateWebhookMessageMocks) > 0 {
		_fn = _dat.UpdateWebhookMessageMocks[0]
		if len(_dat.UpdateWebhookMessageMocks) > 1 {
			_dat.UpdateWebhookMessageMocks = _dat.UpdateWebhookMessageMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateWebhookMessage }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookToken, messageID, messageUpdate, threadID, opts...)
}

func (_recv *clientRest) _UpdateWebhookMessage_Do(fn func(snowflake.ID, string, snowflake.ID, discord.WebhookMessageUpdate, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error)) {
	if _recv == nil {
		panic("clientRest.UpdateWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateWebhookMessageMocks = []func(snowflake.ID, string, snowflake.ID, discord.WebhookMessageUpdate, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){}
	} else if len(_dat.UpdateWebhookMessageMocks) < 2 {
		_dat.UpdateWebhookMessageMocks = []func(snowflake.ID, string, snowflake.ID, discord.WebhookMessageUpdate, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error){fn, fn}
	} else {
		_dat.UpdateWebhookMessageMocks = _dat.UpdateWebhookMessageMocks[:len(_dat.UpdateWebhookMessageMocks)-1]
		_dat.UpdateWebhookMessageMocks = append(_dat.UpdateWebhookMessageMocks, fn)
		_dat.UpdateWebhookMessageMocks = append(_dat.UpdateWebhookMessageMocks, fn)
	}
}

func (_recv *clientRest) _UpdateWebhookMessage_Stub() {
	_recv._UpdateWebhookMessage_Do(func(snowflake.ID, string, snowflake.ID, discord.WebhookMessageUpdate, snowflake.ID, ...rest.RequestOpt) (r0 *discord.Message, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateWebhookMessage_Return(r0 *discord.Message, r1 error) {
	_recv._UpdateWebhookMessage_Do(func(snowflake.ID, string, snowflake.ID, discord.WebhookMessageUpdate, snowflake.ID, ...rest.RequestOpt) (*discord.Message, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateWebhookMessage_Calls() []_clientRest_UpdateWebhookMessage_Call {
	if _recv == nil {
		panic("clientRest.UpdateWebhookMessage: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateWebhookMessageCalls
}

func (_recv *clientRest) UpdateWebhookWithToken(webhookID snowflake.ID, webhookToken string, webhookUpdate discord.WebhookUpdateWithToken, opts ...rest.RequestOpt) (discord.Webhook, error) {
	if _recv == nil {
		panic("clientRest.UpdateWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	_dat.mutex.Lock()
	_dat.UpdateWebhookWithTokenCalls = append(_dat.UpdateWebhookWithTokenCalls, _clientRest_UpdateWebhookWithToken_Call{webhookID, webhookToken, webhookUpdate, opts})
	var _fn func(snowflake.ID, string, discord.WebhookUpdateWithToken, ...rest.RequestOpt) (discord.Webhook, error)
	if len(_dat.UpdateWebhookWithTokenMocks) > 0 {
		_fn = _dat.UpdateWebhookWithTokenMocks[0]
		if len(_dat.UpdateWebhookWithTokenMocks) > 1 {
			_dat.UpdateWebhookWithTokenMocks = _dat.UpdateWebhookWithTokenMocks[1:]
		}
	} else { _fn = _recv.Rest.UpdateWebhookWithToken }
	_dat.mutex.Unlock()
	return _fn(webhookID, webhookToken, webhookUpdate, opts...)
}

func (_recv *clientRest) _UpdateWebhookWithToken_Do(fn func(snowflake.ID, string, discord.WebhookUpdateWithToken, ...rest.RequestOpt) (discord.Webhook, error)) {
	if _recv == nil {
		panic("clientRest.UpdateWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	if fn == nil {
		_dat.UpdateWebhookWithTokenMocks = []func(snowflake.ID, string, discord.WebhookUpdateWithToken, ...rest.RequestOpt) (discord.Webhook, error){}
	} else if len(_dat.UpdateWebhookWithTokenMocks) < 2 {
		_dat.UpdateWebhookWithTokenMocks = []func(snowflake.ID, string, discord.WebhookUpdateWithToken, ...rest.RequestOpt) (discord.Webhook, error){fn, fn}
	} else {
		_dat.UpdateWebhookWithTokenMocks = _dat.UpdateWebhookWithTokenMocks[:len(_dat.UpdateWebhookWithTokenMocks)-1]
		_dat.UpdateWebhookWithTokenMocks = append(_dat.UpdateWebhookWithTokenMocks, fn)
		_dat.UpdateWebhookWithTokenMocks = append(_dat.UpdateWebhookWithTokenMocks, fn)
	}
}

func (_recv *clientRest) _UpdateWebhookWithToken_Stub() {
	_recv._UpdateWebhookWithToken_Do(func(snowflake.ID, string, discord.WebhookUpdateWithToken, ...rest.RequestOpt) (r0 discord.Webhook, r1 error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateWebhookWithToken_Return(r0 discord.Webhook, r1 error) {
	_recv._UpdateWebhookWithToken_Do(func(snowflake.ID, string, discord.WebhookUpdateWithToken, ...rest.RequestOpt) (discord.Webhook, error) {
		return r0, r1
	})
}

func (_recv *clientRest) _UpdateWebhookWithToken_Calls() []_clientRest_UpdateWebhookWithToken_Call {
	if _recv == nil {
		panic("clientRest.UpdateWebhookWithToken: nil pointer receiver")
	}
	_dat := _clientRestPtrData(_recv)
	defer _dat.mutex.Unlock()
	_dat.mutex.Lock()
	return _dat.UpdateWebhookWithTokenCalls
}
